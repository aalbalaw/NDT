/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */

#include "ns3/log.h"

/*!
\file 
\ingroup utils
Doxygen docs generated from the TypeId database.
\note This file is automatically generated by \p print-introspected-doxygen.cc. Do not edit this file! Edit that file instead.
*/

/*!

\class ns3::A2A4RsrqHandoverAlgorithm

<h3>Config Paths</h3>

ns3::A2A4RsrqHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A2A4RsrqHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A2A4RsrqHandoverAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ServingCellThreshold</b>: If the RSRQ of the serving cell is worse than this threshold, neighbour cells are consider for handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:34</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NeighbourCellOffset</b>: Minimum offset between the serving and the best neighbour cell to trigger the handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::A3RsrpHandoverAlgorithm

<h3>Config Paths</h3>

ns3::A3RsrpHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A3RsrpHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A3RsrpHandoverAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Hysteresis</b>: Handover margin (hysteresis) in dB (rounded to the nearest multiple of 0.5 dB)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: uint8_t 0:15</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TimeToTrigger</b>: Time during which neighbour cell's RSRP must continuously higher than serving cell's RSRP in order to trigger a handover
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +256000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AarfcdWifiManager

<h3>Config Paths</h3>

ns3::AarfcdWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AarfcdWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinRtsWnd</b>: Minimum value for Rts window of Aarf-CD
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxRtsWnd</b>: Maximum value for Rts window of Aarf-CD
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TurnOffRtsAfterRateDecrease</b>: If true the RTS mechanism will be turned off when the rate will be decreased
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TurnOnRtsAfterRateIncrease</b>: If true the RTS mechanism will be turned on when the rate will be increased
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AarfWifiManager

<h3>Config Paths</h3>

ns3::AarfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AarfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AcousticModemEnergyModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>TxPowerW</b>: The modem Tx power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxPowerW</b>: The modem Rx power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.158</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IdlePowerW</b>: The modem Idle power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.158</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SleepPowerW</b>: The modem Sleep power in Watts
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.0058</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the modem device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AdhocWifiMac

<h3>Config Paths</h3>

ns3::AdhocWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::AdhocWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::AdhocWifiMac"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AlohaNoackMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AlohaNoackNetDevice

<h3>Config Paths</h3>

ns3::AlohaNoackNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref Mac48AddressValue</li>
    <li>Underlying type:  \ref Mac48Address</li>
    <li>Initial value: 12:34:56:78:90:12</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Queue</b>: packets being transmitted get queued here
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mtu</b>: The Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Object></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmpduSubframeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmpduTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmrrWifiManager

<h3>Config Paths</h3>

ns3::AmrrWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AmrrWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FailureRatio</b>: Ratio of minimum erroneous transmissions needed to switch to a lower rate
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.333333</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SuccessRatio</b>: Ratio of maximum erroneous transmissions needed to switch to a higher rate
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSuccessThreshold</b>: Maximum number of consecutive success periods needed to switch to a higher rate
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinSuccessThreshold</b>: Minimum number of consecutive success periods needed to switch to a higher rate
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AmsduSubframeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AntennaModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::DeferredRouteOutputTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RerrHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RoutingProtocol

<h3>Config Paths</h3>

ns3::aodv::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::aodv::RoutingProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>HelloInterval</b>: HELLO messages emission interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TtlStart</b>: Initial TTL value for RREQ.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TtlIncrement</b>: TTL increment for each attempt using the expanding ring search for RREQ dissemination.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TtlThreshold</b>: Maximum TTL value for expanding ring search, TTL = NetDiameter is used beyond this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TimeoutBuffer</b>: Provide a buffer for the timeout.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RreqRetries</b>: Maximum number of retransmissions of RREQ to discover a route
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RreqRateLimit</b>: Maximum number of RREQ per second.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RerrRateLimit</b>: Maximum number of RERR per second.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NodeTraversalTime</b>: Conservative estimate of the average one hop traversal time for packets and should include queuing delays, interrupt processing times and transfer times.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +40000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NextHopWait</b>: Period of our waiting for the neighbour's RREP_ACK = 10 ms + NodeTraversalTime
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ActiveRouteTimeout</b>: Period of time during which the route is considered to be valid
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MyRouteTimeout</b>: Value of lifetime field in RREP generating by this node = 2 * max(ActiveRouteTimeout, PathDiscoveryTime)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +11199999999.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BlackListTimeout</b>: Time for which the node is put into the blacklist = RreqRetries * NetTraversalTime
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5599999999.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeletePeriod</b>: DeletePeriod is intended to provide an upper bound on the time for which an upstream node A can have a neighbor B as an active next hop for destination D, while B has invalidated the route to D. = 5 * max (HelloInterval, ActiveRouteTimeout)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +15000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NetDiameter</b>: Net diameter measures the maximum possible number of hops between two nodes in the network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 35</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NetTraversalTime</b>: Estimate of the average net traversal time = 2 * NodeTraversalTime * NetDiameter
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2799999999.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PathDiscoveryTime</b>: Estimate of maximum time needed to find route in network = 2 * NetTraversalTime
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5599999999.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AllowedHelloLoss</b>: Number of hello messages which may be loss for valid link.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GratuitousReply</b>: Indicates whether a gratuitous RREP should be unicast to the node originated route discovery.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DestinationOnly</b>: Indicates only the destination may respond to this RREQ.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableHello</b>: Indicates whether a hello messages enable.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableBroadcast</b>: Indicates whether a broadcast data packets forwarding enable.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UniformRv</b>: Access to the underlying UniformRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UniformRandomVariable></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 800 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RrepAckHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RrepHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::RreqHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::aodv::TypeHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AparfWifiManager

<h3>Config Paths</h3>

ns3::AparfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AparfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SuccessThreshold1</b>: The minimum number of successful transmissions in "High" state to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SuccessThreshold2</b>: The minimum number of successful transmissions in "Low" state to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FailThreshold</b>: The minimum number of failed transmissions to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PowerThreshold</b>: The maximum number of power changes.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PowerDecrementStep</b>: Step size for decrement the power.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PowerIncrementStep</b>: Step size for increment the power.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RateDecrementStep</b>: Step size for decrement the rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RateIncrementStep</b>: Step size for increment the rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PowerChange</b>: The transmission power has change<br>%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback
</li>
<li><b>RateChange</b>: The transmission rate has change<br>%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Application

<h3>Config Paths</h3>

ns3::Application is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ApplicationPacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its socket address that serve as the output for this probe<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ApWifiMac

<h3>Config Paths</h3>

ns3::ApWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::ApWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::ApWifiMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BeaconInterval</b>: Delay between two beacons
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +102400000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CfpMaxDuration</b>: The maximum size of the CFP (used when AP supports PCF)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +51200000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BeaconJitter</b>: A uniform random variable to cause the initial beacon starting time (after simulation time 0) to be distributed between 0 and the BeaconInterval.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UniformRandomVariable></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableBeaconJitter</b>: If beacons are enabled, whether to jitter the initial send event.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BeaconGeneration</b>: Whether or not beacons are generated.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>EnableNonErpProtection</b>: Whether or not protection mechanism should be used when non-ERP STAs are present within the BSS.This parameter is only used when ERP is supported by the AP.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsMode</b>: If non-HT STAs are detected, whether to force RIFS to be disabled within the BSS.This parameter is only used when HT is supported by the AP.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::InfrastructureWifiMac</h3>
<ul>
<li><b>PcfSupported</b>: This Boolean attribute is set to enable PCF support at this STA
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 552 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArfWifiManager

<h3>Config Paths</h3>

ns3::ArfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ArfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>TimerThreshold</b>: The 'timer' threshold in the ARF algorithm.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpCache

<h3>Config Paths</h3>

ns3::ArpCache is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]/ArpCache"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/CacheList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AliveTimeout</b>: When this timeout expires, the matching cache entry needs refreshing
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +120000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeadTimeout</b>: When this timeout expires, a new attempt to resolve the matching entry is made
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WaitReplyTimeout</b>: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxRetries</b>: Number of retransmissions of ArpRequest before marking dead
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PendingQueueSize</b>: The size of the queue for packets pending an arp reply.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped due to ArpCache entry in WaitReply expiring.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ArpL3Protocol

<h3>Config Paths</h3>

ns3::ArpL3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CacheList</b>: The list of ARP caches
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ArpCache></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>RequestJitter</b>: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped because not enough room in pending queue for a specific cache entry.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Asn1Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::AthstatsWifiTraceSink

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: Time interval between reports
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BandwidthManager

<h3>Config Paths</h3>

ns3::BandwidthManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BandwidthManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BandwidthRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BaseStationNetDevice

<h3>Config Paths</h3>

ns3::BaseStationNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BSScheduler</b>: Downlink Scheduler for BS
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BSScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialRangInterval</b>: Time between Initial Ranging regions assigned by the BS. Maximum is 2s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DcdInterval</b>: Time between transmission of DCD messages. Maximum value is 10s.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UcdInterval</b>: Time between transmission of UCD messages. Maximum value is 10s.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT8</b>: Wait for DSA/DSC Acknowledge timeout. Maximum 300ms.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RangReqOppSize</b>: The ranging opportunity size in symbols
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:256</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BwReqOppSize</b>: The bandwidth request opportunity size in symbols
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:256</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxRangCorrectionRetries</b>: Number of retries on contention Ranging Requests
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:16</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SSManager</b>: The ss manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SSManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Scheduler</b>: The BS scheduler attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BSScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkManager</b>: The link manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BSLinkManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UplinkScheduler</b>: The uplink scheduler attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UplinkScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BsIpcsPacketClassifier</b>: The uplink IP packet classifier attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::IpcsClassifier></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ServiceFlowManager</b>: The service flow manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ServiceFlowManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:1500</li>
    <li>Initial value: 1400</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RTG</b>: receive/transmit transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TTG</b>: transmit/receive transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnectionManager</b>: The connection manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ConnectionManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BurstProfileManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialRangingConnection</b>: Initial ranging connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BroadcastConnection</b>: Broadcast connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BSTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>BSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 672 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BasicEnergyHarvester

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>PeriodicHarvestedPowerUpdateInterval</b>: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarvestablePower</b>: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=2.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>HarvestedPower</b>: Harvested power by the BasicEnergyHarvester.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>TotalEnergyHarvested</b>: Total energy harvested by the harvester.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BasicEnergySource

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BasicEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicEnergySupplyVoltageV</b>: Initial supply voltage for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicEnergyLowBatteryThreshold</b>: Low battery threshold for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicEnergyHighBatteryThreshold</b>: High battery threshold for basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BinaryErrorModel

<h3>Config Paths</h3>

ns3::BinaryErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BlockAckManager

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BooleanProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The bool that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BridgeChannel

<h3>Config Paths</h3>

ns3::BridgeChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::BridgeChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::BridgeChannel"</li>
<li>"/ChannelList/[i]/$ns3::BridgeChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BridgeNetDevice

<h3>Config Paths</h3>

ns3::BridgeNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BridgeNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableLearning</b>: Enable the learning mode of the Learning Bridge
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ExpirationTime</b>: Time it takes for learned MAC state entry to expire.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +300000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSLinkManager

<h3>Config Paths</h3>

ns3::BSLinkManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/LinkManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/LinkManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BsmApplication

<h3>Config Paths</h3>

ns3::BsmApplication is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::BsmApplication"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSScheduler

<h3>Config Paths</h3>

ns3::BSScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSSchedulerRtps

<h3>Config Paths</h3>

ns3::BSSchedulerRtps is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerRtps"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BSSchedulerSimple

<h3>Config Paths</h3>

ns3::BSSchedulerSimple is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerSimple"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Building

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>NRoomsX</b>: The number of rooms in the X axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NRoomsY</b>: The number of rooms in the Y axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NFloors</b>: The number of floors of this building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Id</b>: The id (unique integer) of this Building.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>Boundaries</b>: The boundaries of this Building as a value of type ns3::Box
  <ul>
    <li>Set with class:  \ref BoxValue</li>
    <li>Underlying type:  \ref Box</li>
    <li>Initial value: 0|0|0|0|0|0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Type</b>: The type of building
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Residential</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ExternalWallsType</b>: The type of material of which the external walls are made
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ConcreteWithWindows</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingListPriv

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>BuildingList</b>: The list of all buildings created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Building></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::BuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BulkSendApplication

<h3>Config Paths</h3>

ns3::BulkSendApplication is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::BulkSendApplication"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SendSize</b>: The amount of data to send each time.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 1400</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Protocol</b>: The type of protocol to use.
  <ul>
    <li>Set with class:  \ref TypeIdValue</li>
    <li>Underlying type:  \ref TypeId</li>
    <li>Initial value: ns3::TcpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BurstErrorModel

<h3>Config Paths</h3>

ns3::BurstErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ErrorRate</b>: The burst error event.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BurstStart</b>: The decision variable attached to this error model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BurstSize</b>: The number of packets being corrupted at one drop.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=1|Max=4]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::BurstProfileManager

<h3>Config Paths</h3>

ns3::BurstProfileManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BurstProfileManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CalendarScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CaraWifiManager

<h3>Config Paths</h3>

ns3::CaraWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::CaraWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ProbeThreshold</b>: The number of consecutive transmissions failure to activate the RTS probe.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FailureThreshold</b>: The number of consecutive transmissions failure to decrease the rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Timeout</b>: The 'timer' in the CARA algorithm
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CcHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>NumberOfComponentCarriers</b>: Set the number of Component Carriers to setup per eNodeBCurrently the maximum Number of Component Carriers allowed is 2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:2</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEarfcn</b>: Set Ul Channel [EARFCN] for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEarfcn</b>: Set Dl Channel [EARFCN] for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlBandwidth</b>: Set Dl Bandwidth for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:100</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlBandwidth</b>: Set Dl Bandwidth for the first carrier component
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:100</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Channel

<h3>Config Paths</h3>

ns3::Channel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel"</li>
<li>"/ChannelList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelCoordinator

<h3>Config Paths</h3>

ns3::ChannelCoordinator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelCoordinator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CchInterval</b>: CCH Interval, default value is 50ms.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SchInterval</b>: SCH Interval, default value is 50ms.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GuardInterval</b>: Guard Interval, default value is 4ms.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +4000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelListPriv

<h3>Config Paths</h3>

ns3::ChannelListPriv is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>""</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ChannelList</b>: The list of all channels created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelManager

<h3>Config Paths</h3>

ns3::ChannelManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ChannelScheduler

<h3>Config Paths</h3>

ns3::ChannelScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelScheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Chunk

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CoDelQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 1500000B</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinBytes</b>: The CoDel algorithm minbytes parameter.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: The CoDel algorithm interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Target</b>: The CoDel algorithm target queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Count</b>: CoDel count<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>LastCount</b>: CoDel lastcount<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>DropState</b>: Dropping state<br>%Callback signature: ns3::TracedValueCallback::Bool
</li>
<li><b>DropNext</b>: Time until next packet drop<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1048 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ComponentCarrier

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ComponentCarrierEnb

<h3>Config Paths</h3>

ns3::ComponentCarrierEnb is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LteEnbPhy</b>: The PHY associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteEnbMac</b>: The MAC associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FfMacScheduler</b>: The scheduler associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FfMacScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteFfrAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::ComponentCarrier</h3>
<ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ComponentCarrierUe

<h3>Config Paths</h3>

ns3::ComponentCarrierUe is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LteUePhy</b>: The PHY associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUePhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteUeMac</b>: The MAC associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::ComponentCarrier</h3>
<ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 18000:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConfigStore

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Mode</b>: Configuration mode
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: None</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Filename</b>: The file where the configuration should be saved to or loaded from.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FileFormat</b>: Type of file format
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: RawText</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConnectionManager

<h3>Config Paths</h3>

ns3::ConnectionManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/ConnectionManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantAccelerationMobilityModel

<h3>Config Paths</h3>

ns3::ConstantAccelerationMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantAccelerationMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantPositionMobilityModel

<h3>Config Paths</h3>

ns3::ConstantPositionMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantPositionMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantRandomVariable

<h3>Config Paths</h3>

ns3::ConstantRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ConstantRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Constant</b>: The constant value returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantRateWifiManager

<h3>Config Paths</h3>

ns3::ConstantRateWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ConstantRateWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataMode</b>: The transmission mode to use for every data packet transmission
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: OfdmRate6Mbps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ControlMode</b>: The transmission mode to use for every RTS packet transmission.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: OfdmRate6Mbps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantSpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Loss</b>: Path loss (dB) between transmitter and receiver
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantSpeedPropagationDelayModel

<h3>Config Paths</h3>

ns3::ConstantSpeedPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Speed</b>: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.99792e+08</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ConstantVelocityMobilityModel

<h3>Config Paths</h3>

ns3::ConstantVelocityMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantVelocityMobilityModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::consumer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RetxTimer</b>: Timeout defining how frequent retransmission timeouts should be checked
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CongestionWindow</b>: The ITP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 384 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CosineAntennaModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Beamwidth</b>: The 3dB beamwidth (degrees)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:180</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -360:360</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxGain</b>: The gain (dB) at the antenna boresight (the direction of maximum gain)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Cost231PropagationLossModel

<h3>Config Paths</h3>

ns3::Cost231PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Lambda</b>: The wavelength  (default is 2.3 GHz at 300 000 km/s).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.130435</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Frequency</b>: The Frequency  (default is 2.3 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.3e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BSAntennaHeight</b>: BS Antenna Height (default is 50m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SSAntennaHeight</b>: SS Antenna Height (default is 3m).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m) 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CqaFfMacScheduler

<h3>Config Paths</h3>

ns3::CqaFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CqaMetric</b>: CqaFfMacScheduler metric type that can be: CqaFf, CqaPf
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: CqaFf</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1408 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CsmaChannel

<h3>Config Paths</h3>

ns3::CsmaChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::CsmaChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::CsmaChannel"</li>
<li>"/ChannelList/[i]/$ns3::CsmaChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The transmission data rate to be provided to devices connected to the channel
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 4294967295bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CsmaNetDevice

<h3>Config Paths</h3>

ns3::CsmaNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref Mac48AddressValue</li>
    <li>Underlying type:  \ref Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Dix</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>SendEnable</b>: Enable or disable the transmitter section of the device.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReceiveEnable</b>: Enable or disable the receiver section of the device.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxBackoff</b>: Trace source indicating a packet has been delayed by the CSMA backoff process<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 432 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CtrlBAckRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::CtrlBAckResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DataCollectionObject

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Dcd

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DefaultChannelScheduler

<h3>Config Paths</h3>

ns3::DefaultChannelScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelScheduler/$ns3::DefaultChannelScheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DefaultSimulatorImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeterministicRandomVariable

<h3>Config Paths</h3>

ns3::DeterministicRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeviceEnergyModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DeviceNameTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DhcpClient

<h3>Config Paths</h3>

ns3::DhcpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RTRS</b>: Time for retransmission of Discover message
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Collect</b>: Time for which offer collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReRequest</b>: Time after which request will be resent to next server
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Transactions</b>: The possible value of transaction numbers 
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1000000.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>NewLease</b>: Get a NewLease<br>%Callback signature: ns3::Ipv4Address::TracedCallback
</li>
<li><b>ExpireLease</b>: A lease expires<br>%Callback signature: ns3::Ipv4Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 440 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DhcpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 544 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DhcpServer

<h3>Config Paths</h3>

ns3::DhcpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LeaseTime</b>: Lease for which address will be leased.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RenewTime</b>: Time after which client should renew.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +15000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RebindTime</b>: Time after which client should rebind.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PoolAddresses</b>: Pool of addresses to provide on request.
  <ul>
    <li>Set with class:  \ref Ipv4AddressValue</li>
    <li>Underlying type:  \ref Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FirstAddress</b>: The First valid address that can be given.
  <ul>
    <li>Set with class:  \ref Ipv4AddressValue</li>
    <li>Underlying type:  \ref Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LastAddress</b>: The Last valid address that can be given.
  <ul>
    <li>Set with class:  \ref Ipv4AddressValue</li>
    <li>Underlying type:  \ref Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PoolMask</b>: Mask of the pool of addresses.
  <ul>
    <li>Set with class:  \ref Ipv4MaskValue</li>
    <li>Underlying type:  \ref Ipv4Mask</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Gateway</b>: Address of default gateway
  <ul>
    <li>Set with class:  \ref Ipv4AddressValue</li>
    <li>Underlying type:  \ref Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DistributedSimulatorImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DlMap

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::AirtimeLinkMetricCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>TestLength</b>: Number of bytes in test frame (a constant 1024 in the standard)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Dot11MetricTid</b>: TID used to calculate metric (data rate)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::HwmpProtocol

<h3>Config Paths</h3>

ns3::dot11s::HwmpProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol/$ns3::dot11s::HwmpProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RandomStart</b>: Random delay at first proactive PREQ
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxQueueSize</b>: Maximum number of packets we can store when resolving route
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 255</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPmaxPREQretries</b>: Maximum number of retries before we suppose the destination to be unreachable
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPnetDiameterTraversalTime</b>: Time we suppose the packet to go from one edge of the network to another
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +102400000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPpreqMinInterval</b>: Minimal interval between to successive PREQs
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +102400000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPperrMinInterval</b>: Minimal interval between to successive PREQs
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +102400000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPactiveRootTimeout</b>: Lifetime of poractive routing information
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5120000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPactivePathTimeout</b>: Lifetime of reactive routing information
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5120000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPpathToRootInterval</b>: Interval between two successive proactive PREQs
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2048000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Dot11MeshHWMPrannInterval</b>: Lifetime of poractive routing information
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5120000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxTtl</b>: Initial value of Time To Live field
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 2:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UnicastPerrThreshold</b>: Maximum number of PERR receivers, when we send a PERR as a chain of unicasts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UnicastPreqThreshold</b>: Maximum number of PREQ receivers, when we send a PREQ as a chain of unicasts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UnicastDataThreshold</b>: Maximum number ofbroadcast receivers, when we send a broadcast as a chain of unicasts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DoFlag</b>: Destination only HWMP flag
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RfFlag</b>: Reply and forward flag
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RouteDiscoveryTime</b>: The time of route discovery procedure<br>%Callback signature: ns3::Time::TracedCallback
</li>
<li><b>RouteChange</b>: Routing table changed<br>%Callback signature: ns3::HwmpProtocol::RouteChangeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::HwmpRtable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::HwmpTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLink

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RetryTimeout</b>: Retry timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +40960000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HoldingTimeout</b>: Holding timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +40960000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConfirmTimeout</b>: Confirm timeout
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +40960000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxRetries</b>: Maximum number of retries
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxBeaconLoss</b>: Maximum number of lost beacons before link will be closed
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPacketFailure</b>: Maximum number of failed packets before link will be closed
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:65535</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLinkCloseStart

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLinkConfirmStart

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerLinkOpenStart

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dot11s::PeerManagementProtocol

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxNumberOfPeerLinks</b>: Maximum number of peer links
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxBeaconShiftValue</b>: Maximum number of TUs for beacon shifting
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableBeaconCollisionAvoidance</b>: Enable/Disable Beacon collision avoidance.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>LinkOpen</b>: New peer link opened<br>%Callback signature: ns3::PeerManagementProtocol::LinkOpenCloseTracedCallback
</li>
<li><b>LinkClose</b>: New peer link closed<br>%Callback signature: ns3::PeerManagementProtocol::LinkOpenCloseTracedCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Dot11sStack

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Root</b>: The MAC address of root mesh point.
  <ul>
    <li>Set with class:  \ref Mac48AddressValue</li>
    <li>Underlying type:  \ref Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DoubleProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The double that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DropTailQueue<Packet>

<h3>Config Paths</h3>

ns3::DropTailQueue<Packet> is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice/Queue/$ns3::DropTailQueue<Packet>"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::Queue<Packet></h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DropTailQueue<QueueDiscItem>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::Queue<QueueDiscItem></h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsaAck

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsaReq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 288 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsaRsp

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 288 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsdv::DsdvHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsdv::RoutingProtocol

<h3>Config Paths</h3>

ns3::dsdv::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsdv::RoutingProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PeriodicUpdateInterval</b>: Periodic interval between exchange of full routing tables among nodes. 
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +15000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SettlingTime</b>: Minimum time an update is to be stored in adv table before sending outin case of change in metric (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxQueuedPacketsPerDst</b>: Maximum number of packets that we allow per destination to buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableBuffering</b>: Enables buffering of data packets if no route to destination is available
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableWST</b>: Enables Weighted Settling Time for the updates before advertising
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Holdtimes</b>: Times the forwarding Interval to purge the route.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WeightedFactor</b>: WeightedFactor for the settling time if Weighted Settling Time is enabled
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.875</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableRouteAggregation</b>: Enables Weighted Settling Time for the updates before advertising
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RouteAggregationTime</b>: Time to aggregate updates before sending them out (in seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 552 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrFsHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrGraReply

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrNetworkQueue

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAck

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAckHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAckReq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionAckReqHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPad1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPad1Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPadn

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionPadnHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerr

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerrHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerrUnreachHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRerrUnsupportHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRrep

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRrepHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRreq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionRreqHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptions

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionSR

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::dsr::DsrOptions</h3>
<ul>
<li><b>Drop</b>: Packet dropped.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: Receive DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrOptionSRHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrPassiveBuffer

<h3>Config Paths</h3>

ns3::dsr::DsrPassiveBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting/PassiveBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrRouteCache

<h3>Config Paths</h3>

ns3::dsr::DsrRouteCache is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting/RouteCache"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 560 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrRouting

<h3>Config Paths</h3>

ns3::dsr::DsrRouting is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RouteCache</b>: The route cache for saving routes from route discovery process.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::dsr::DsrRouteCache></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RreqTable</b>: The request table to manage route requests.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::dsr::DsrRreqTable></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PassiveBuffer</b>: The passive buffer to manage promisucously received passive ack.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::dsr::DsrPassiveBuffer></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSendBuffLen</b>: Maximum number of packets that can be stored in send buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSendBuffTime</b>: Maximum time packets can be queued in the send buffer .
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxMaintLen</b>: Maximum number of packets that can be stored in maintenance buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxMaintTime</b>: Maximum time packets can be queued in maintenance buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxCacheLen</b>: Maximum number of route entries that can be stored in route cache.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RouteCacheTimeout</b>: Maximum time the route cache can be queued in route cache.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +300000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxEntriesEachDst</b>: Maximum number of route entries for a single destination to respond.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SendBuffInterval</b>: How often to check send buffer for packet with route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NodeTraversalTime</b>: The time it takes to traverse two neighboring nodes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +40000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RreqRetries</b>: Maximum number of retransmissions for request discovery of a route.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaintenanceRetries</b>: Maximum number of retransmissions for data packets from maintenance buffer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RequestTableSize</b>: Maximum number of request entries in the request table, set this as the number of nodes in the simulation.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RequestIdSize</b>: Maximum number of request source Ids in the request table.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UniqueRequestIdSize</b>: Maximum number of request Ids in the request table for a single destination.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 256</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonPropRequestTimeout</b>: The timeout value for non-propagation request.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DiscoveryHopLimit</b>: The max discovery hop limit for route requests.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 255</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSalvageCount</b>: The max salvage count for a single data packet.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BlacklistTimeout</b>: The time for a neighbor to stay in blacklist.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GratReplyHoldoff</b>: The time for gratuitous reply entry to expire.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BroadcastJitter</b>: The jitter time to avoid collision for broadcast packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkAckTimeout</b>: The time a packet in maintenance buffer wait for link acknowledgment.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TryLinkAcks</b>: The number of link acknowledgment to use.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PassiveAckTimeout</b>: The time a packet in maintenance buffer wait for passive acknowledgment.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TryPassiveAcks</b>: The number of passive acknowledgment to use.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RequestPeriod</b>: The base time interval between route requests.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxRequestPeriod</b>: The max time interval between route requests.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GraReplyTableSize</b>: The gratuitous reply table size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CacheType</b>: Use Link Cache or use Path Cache
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: LinkCache</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StabilityDecrFactor</b>: The stability decrease factor for link cache
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StabilityIncrFactor</b>: The stability increase factor for link cache
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitStability</b>: The initial stability factor for link cache
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinLifeTime</b>: The minimal life time for link cache
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UseExtends</b>: The extension time for link cache
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +120000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableSubRoute</b>: Enables saving of sub route when receiving route error messages, only available when using path route cache
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RetransIncr</b>: The increase time for retransmission timer when facing network congestion
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +20000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxNetworkQueueSize</b>: The max number of packet to save in the network queue.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 400</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxNetworkQueueDelay</b>: The max time for a packet to stay in the network queue.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NumPriorityQueues</b>: The max number of packet to save in the network queue.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkAcknowledgment</b>: Enable Link layer acknowledgment mechanism
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: Send DSR packet.<br>%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback
</li>
<li><b>Drop</b>: Drop DSR packet<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::dsr::DsrRreqTable

<h3>Config Paths</h3>

ns3::dsr::DsrRreqTable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::dsr::DsrRouting/RreqTable"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DsrRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::DynamicQueueLimits

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>HoldTime</b>: The DQL algorithm hold time
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: 1s</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxLimit</b>: Maximum limit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:1879048192</li>
    <li>Initial value: 1879048192</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinLimit</b>: Minimum limit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Limit</b>: Limit value calculated by DQL<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EmpiricalRandomVariable

<h3>Config Paths</h3>

ns3::EmpiricalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EmuEpcHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>sgwDeviceName</b>: The name of the device used for the S1-U interface of the SGW
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: veth0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>enbDeviceName</b>: The name of the device used for the S1-U interface of the eNB
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: veth1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SgwMacAddress</b>: MAC address used for the SGW 
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: 00:00:00:59:00:aa</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnbMacAddressBase</b>: First 5 bytes of the Enb MAC address base
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: 00:00:00:eb:00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 288 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergyHarvester

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergyHarvesterContainer

<h3>Config Paths</h3>

ns3::EnergyHarvesterContainer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::EnergyHarvesterContainer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergySource

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EnergySourceContainer

<h3>Config Paths</h3>

ns3::EnergySourceContainer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::EnergySourceContainer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcHelper

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcMme

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcUeNas

<h3>Config Paths</h3>

ns3::EpcUeNas is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/EpcUeNas"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/EpcUeNas"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>StateTransition</b>: fired upon every UE NAS state transition<br>%Callback signature: ns3::EpcUeNas::StateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2HandoverPreparationFailureHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2HandoverRequestAckHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2HandoverRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2LoadInformationHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2ResourceStatusUpdateHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2SnStatusTransferHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpcX2UeContextReleaseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EpsBearerTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>rnti</b>: The rnti that indicates the UE which packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>bid</b>: The EPS bearer id within the UE to which the packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErlangRandomVariable

<h3>Config Paths</h3>

ns3::ErlangRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ErlangRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>K</b>: The k value for the Erlang distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Lambda</b>: The lambda value for the Erlang distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorChannel

<h3>Config Paths</h3>

ns3::ErrorChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::ErrorChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
<li>"/ChannelList/[i]/$ns3::ErrorChannel"</li>
<li>"/ChannelList/[i]/$ns3::SimpleChannel/$ns3::ErrorChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::SimpleChannel</h3>
<ul>
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorModel

<h3>Config Paths</h3>

ns3::ErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ErrorRateModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EthernetHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::EthernetTrailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ExponentialRandomVariable

<h3>Config Paths</h3>

ns3::ExponentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mean</b>: The mean of the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdBetFfMacScheduler

<h3>Config Paths</h3>

ns3::FdBetFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdMtFfMacScheduler

<h3>Config Paths</h3>

ns3::FdMtFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdNetDevice

<h3>Config Paths</h3>

ns3::FdNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::FdNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref Mac48AddressValue</li>
    <li>Underlying type:  \ref Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Start</b>: The simulation time at which to spin up the device thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: The simulation time at which to tear down the device thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Dix</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxQueueSize</b>: Maximum size of the read queue.  This value limits number of packets that have been read from the network into a memory buffer but have not yet been processed by the simulator.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 424 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FdTbfqFfMacScheduler

<h3>Config Paths</h3>

ns3::FdTbfqFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -625000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 625000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FfMacScheduler

<h3>Config Paths</h3>

ns3::FfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FifoQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 904 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FileAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 672 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FixedRoomPositionAllocator

<h3>Config Paths</h3>

ns3::FixedRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::FixedRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FixedRssLossModel

<h3>Config Paths</h3>

ns3::FixedRssLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Rss</b>: The fixed receiver Rss.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -150</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameProtocol

<h3>Config Paths</h3>

ns3::flame::FlameProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol/$ns3::flame::FlameProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BroadcastInterval</b>: How often we must send broadcast packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxCost</b>: Cost threshold after which packet will be dropped
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 3:255</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameRtable

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Lifetime</b>: The lifetime of the routing entry
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +120000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::flame::FlameTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FlameStack

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FlowIdTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FlowMonitor

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxPerHopDelay</b>: The maximum per-hop delay that should be considered.  Packets still not received after this delay are to be considered lost.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StartTime</b>: The time when the monitoring starts.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>DelayBinWidth</b>: The width used in the delay histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.001</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>JitterBinWidth</b>: The width used in the jitter histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.001</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSizeBinWidth</b>: The width used in the packetSize histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FlowInterruptionsBinWidth</b>: The width used in the flowInterruptions histogram.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FlowInterruptionsMinTime</b>: The minimum inter-arrival time that is considered a flow interruption.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCoDelFlow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDiscClass</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FqCoDelQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Interval</b>: The CoDel algorithm interval for each FQCoDel queue
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: 100ms</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Target</b>: The CoDel algorithm target queue delay for each FQCoDel queue
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: 5ms</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 10240p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Flows</b>: The number of queues into which the incoming packets are classified
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1064 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FragmentationSubheader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FrameCaptureModel

<h3>Config Paths</h3>

ns3::FrameCaptureModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/FrameCaptureModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/FrameCaptureModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FriisPropagationLossModel

<h3>Config Paths</h3>

ns3::FriisPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.15e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SystemLoss</b>: The system loss
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinLoss</b>: The minimum value (dB) of the total loss, used at short ranges. Note: 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::FriisSpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GammaRandomVariable

<h3>Config Paths</h3>

ns3::GammaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::GammaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the gamma distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Beta</b>: The beta value for the gamma distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GaussMarkovMobilityModel

<h3>Config Paths</h3>

ns3::GaussMarkovMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref BoxValue</li>
    <li>Underlying type:  \ref Box</li>
    <li>Initial value: -100|100|-100|100|0|100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TimeStep</b>: Change current direction and speed after moving for this time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Alpha</b>: A constant representing the tunable parameter in the Gauss-Markov model.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MeanVelocity</b>: A random variable used to assign the average velocity.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MeanDirection</b>: A random variable used to assign the average direction.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283185307]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MeanPitch</b>: A random variable used to assign the average pitch.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=0.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NormalVelocity</b>: A gaussian random variable used to calculate the next velocity value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NormalDirection</b>: A gaussian random variable used to calculate the next direction value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NormalPitch</b>: A gaussian random variable used to calculate the next pitch value.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NormalRandomVariable></li>
    <li>Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GenericMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GlobalRouter

<h3>Config Paths</h3>

ns3::GlobalRouter is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::GlobalRouter"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GnuplotAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GrantManagementSubheader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GridBuildingAllocator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinX</b>: The x coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinY</b>: The y coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LengthX</b>:  the length of the wall of each building along the X axis.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LengthY</b>:  the length of the wall of each building along the X axis.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeltaX</b>: The x space between buildings.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeltaY</b>: The y space between buildings.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Height</b>: The height of the building (roof level)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LayoutType</b>: The type of layout.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: RowFirst</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GridPositionAllocator

<h3>Config Paths</h3>

ns3::GridPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::GridPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinX</b>: The x coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinY</b>: The y coordinate where the grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeltaX</b>: The x space between objects.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeltaY</b>: The y space between objects.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LayoutType</b>: The type of layout.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: RowFirst</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::GtpuHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HalfDuplexIdealPhy

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Rate</b>: The PHY rate used by this device
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 1000000bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxStart</b>: Trace fired when a new transmission is started<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxAbort</b>: Trace fired when a previously started RX is aborted before time<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error (packet is corrupted)<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 336 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HeapScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HierarchicalMobilityModel

<h3>Config Paths</h3>

ns3::HierarchicalMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::HierarchicalMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Child</b>: The child mobility model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MobilityModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Parent</b>: The parent mobility model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MobilityModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HigherLayerTxVectorTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::HybridBuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::HybridBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Los2NlosThr</b>:  Threshold from LoS to NLoS in ITU 1411 [m].
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RooftopLevel</b>: The height of the rooftop level in meters
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::BuildingsPropagationLossModel</h3>
<ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4DestinationUnreachable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4Echo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4L4Protocol

<h3>Config Paths</h3>

ns3::Icmpv4L4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Icmpv4L4Protocol"</li>
<li>"/NodeList/[i]/$ns3::Icmpv4L4Protocol"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv4TimeExceeded

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6DestinationUnreachable

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Echo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6L4Protocol

<h3>Config Paths</h3>

ns3::Icmpv6L4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DAD</b>: Always do DAD check.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SolicitationJitter</b>: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxMulticastSolicit</b>: Neighbor Discovery node constants: max multicast solicitations.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxUnicastSolicit</b>: Neighbor Discovery node constants: max unicast solicitations.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReachableTime</b>: Neighbor Discovery node constants: reachable time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RetransmissionTime</b>: Neighbor Discovery node constants: retransmission timer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DelayFirstProbe</b>: Neighbor Discovery node constants: delay for the first probe.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6NA

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6NS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionLinkLayerAddress

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionMtu

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionPrefixInformation

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6OptionRedirected

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6ParameterError

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6RA

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6Redirection

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6RS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6TimeExceeded

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Icmpv6TooBig

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IdealWifiManager

<h3>Config Paths</h3>

ns3::IdealWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::IdealWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BerThreshold</b>: The maximum Bit Error Rate acceptable at any transmission mode
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e-05</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::InetTopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::InfrastructureWifiMac

<h3>Config Paths</h3>

ns3::InfrastructureWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PcfSupported</b>: This Boolean attribute is set to enable PCF support at this STA
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IpcsClassifier

<h3>Config Paths</h3>

ns3::IpcsClassifier is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BsIpcsPacketClassifier"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/Classifier"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BsIpcsPacketClassifier"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/Classifier"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IpL4Protocol

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4GlobalRouting

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RandomEcmpRouting</b>: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RespondToInterfaceEvents</b>: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4Interface

<h3>Config Paths</h3>

ns3::Ipv4Interface is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ArpCache</b>: The arp cache for this ipv4 interface
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ArpCache></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4L3Protocol

<h3>Config Paths</h3>

ns3::Ipv4L3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4L3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InterfaceList</b>: The set of Ipv4 interfaces associated to this Ipv4 stack.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv4Interface></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Ipv4</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: Send ipv4 packet to outgoing interface.<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>Rx</b>: Receive ipv4 packet from incoming interface.<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>Drop</b>: Drop ipv4 packet<br>%Callback signature: ns3::Ipv4L3Protocol::DropTracedCallback
</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>UnicastForward</b>: A unicast IPv4 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
<li><b>LocalDeliver</b>: An IPv4 packet was received by/for this node, and it is being forward up the stack<br>%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback
</li>
</ul>
<b>Size</b> of this type is 544 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4ListRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4NixVectorRouting

<h3>Config Paths</h3>

ns3::Ipv4NixVectorRouting is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv4NixVectorRouting"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its IPv4 object and interface that serve as the output for this probe<br>%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RawSocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RawSocketImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Protocol</b>: Protocol number to match.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IcmpFilter</b>: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpHeaderInclude</b>: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4RoutingProtocol

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv4StaticRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Extension

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionAH

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionAHHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Extensions</b>: The set of IPv6 extensions registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Extension></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDestination

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionDestinationHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionESP

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionESPHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionFragment

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionFragmentHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHopByHop

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionHopByHopHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionLooseRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionLooseRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Extension</h3>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRoutingDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RoutingExtensions</b>: The set of IPv6 Routing extensions registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6ExtensionRouting></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ExtensionRoutingHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Interface

<h3>Config Paths</h3>

ns3::Ipv6Interface is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv6L3Protocol/InterfaceList/[i]"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6L3Protocol

<h3>Config Paths</h3>

ns3::Ipv6L3Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::Ipv6L3Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTclass</b>: The TCLASS value set by default on all outgoing packets generated on this node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InterfaceList</b>: The set of IPv6 interfaces associated to this IPv6 stack.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Interface></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>SendIcmpv6Redirect</b>: Send the ICMPv6 Redirect when appropriate.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1222).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Ipv6</h3>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: Send IPv6 packet to outgoing interface.<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>Rx</b>: Receive IPv6 packet from incoming interface.<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>Drop</b>: Drop IPv6 packet<br>%Callback signature: ns3::Ipv6L3Protocol::DropTracedCallback
</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
<li><b>UnicastForward</b>: A unicast IPv6 packet was received by this node and is being forwarded to another node<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
<li><b>LocalDeliver</b>: An IPv6 packet was received by/for this node, and it is being forward up the stack<br>%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback
</li>
</ul>
<b>Size</b> of this type is 424 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6ListRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6Option

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionDemux

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Options</b>: The set of IPv6 options registered with this demux.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Ipv6Option></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionJumbogram

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionJumbogramHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPad1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPad1Header

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPadn

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionPadnHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionRouterAlert

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Ipv6Option</h3>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6OptionRouterAlertHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet plus its IPv6 object and interface that serve as the output for this probe<br>%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6PmtuCache

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CacheExpiryTime</b>: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time +300000000000.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +600000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RawSocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RawSocketImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Protocol</b>: Protocol number to match.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6RoutingProtocol

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ipv6StaticRouting

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::IsotropicAntennaModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Gain</b>: The gain of the antenna in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::itp

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>consumer</b>: Consumer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Object></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CongestionWindow</b>: The ITP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItpCache

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>PayloadSize</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItpSink

<h3>Config Paths</h3>

ns3::ItpSink is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ItpSink"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 9</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItpSource

<h3>Config Paths</h3>

ns3::ItpSource is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ItpSource"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSize</b>: Size of echo data in outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1238PropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1238PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1411LosPropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1411LosPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ItuR1411NlosOverRooftopPropagationLossModel

<h3>Config Paths</h3>

ns3::ItuR1411NlosOverRooftopPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RooftopLevel</b>: The height of the rooftop level in meters
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StreetsOrientation</b>: The orientation of streets in degrees [0,90] with respect to the direction of propagation
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:90</li>
    <li>Initial value: 45</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StreetsWidth</b>: The width of streets
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1000</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BuildingsExtend</b>: The distance over which the buildings extend
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BuildingSeparation</b>: The separation between buildings
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::JakesProcess

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DopplerFrequencyHz</b>: Corresponding doppler frequency[Hz]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:10000</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>NumberOfOscillators</b>: The number of oscillators
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 4:1000</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::JakesPropagationLossModel

<h3>Config Paths</h3>

ns3::JakesPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Kun2600MhzPropagationLossModel

<h3>Config Paths</h3>

ns3::Kun2600MhzPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LiIonEnergySource

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>LiIonEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 31752</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LiIonEnergyLowBatteryThreshold</b>: Low battery threshold for LiIon energy source.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialCellVoltage</b>: Initial (maximum) voltage of the cell (fully charged).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.05</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NominalCellVoltage</b>: Nominal voltage of the cell.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ExpCellVoltage</b>: Cell voltage at the end of the exponential zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RatedCapacity</b>: Rated capacity of the cell.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.45</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NomCapacity</b>: Cell capacity at the end of the nominal zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ExpCapacity</b>: Cell Capacity at the end of the exponential zone.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalResistance</b>: Internal resistance of the cell
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.083</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TypCurrent</b>: Typical discharge current used to fit the curves
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.33</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ThresholdVoltage</b>: Minimum threshold voltage to consider the battery depleted.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LinearWifiTxCurrentModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Eta</b>: The efficiency of the power amplifier.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Voltage</b>: The supply voltage (in Volts).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IdleCurrent</b>: The current in the IDLE state (in Watts).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273333</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListErrorModel

<h3>Config Paths</h3>

ns3::ListErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListPositionAllocator

<h3>Config Paths</h3>

ns3::ListPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::ListPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ListScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LlcSnapHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogDistancePropagationLossModel

<h3>Config Paths</h3>

ns3::LogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Exponent</b>: The exponent of the Path Loss propagation model
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReferenceDistance</b>: The distance at which the reference loss is calculated (m)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReferenceLoss</b>: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 46.6777</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LogNormalRandomVariable

<h3>Config Paths</h3>

ns3::LogNormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mu</b>: The mu value for the log-normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sigma</b>: The sigma value for the log-normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LoopbackNetDevice

<h3>Config Paths</h3>

ns3::LoopbackNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LoopbackNetDevice"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanCsmaCa

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 168 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanLqiTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Lqi</b>: The lqi of the last packet received
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanMac

<h3>Config Paths</h3>

ns3::LrWpanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Mac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PanId</b>: 16-bit identifier of the associated PAN
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTxEnqueue</b>: Trace source indicating a packet has been enqueued in the transaction queue<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDequeue</b>: Trace source indicating a packet has was dequeued from the transaction queue<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxOk</b>: Trace source indicating a packet has been successfully sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: Trace source indicating a packet was received, but dropped before being forwarded up the stack<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacStateValue</b>: The state of LrWpan Mac<br>%Callback signature: ns3::TracedValueCallback::LrWpanMacState
</li>
<li><b>MacState</b>: The state of LrWpan Mac<br>%Callback signature: ns3::LrWpanMac::StateTracedCallback
</li>
<li><b>MacSentPkt</b>: Trace source reporting some information about the sent packet<br>%Callback signature: ns3::LrWpanMac::SentTracedCallback
</li>
</ul>
<b>Size</b> of this type is 512 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanMacTrailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanNetDevice

<h3>Config Paths</h3>

ns3::LrWpanNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Channel</b>: The channel attached to this device
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SpectrumChannel></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LrWpanPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mac</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LrWpanMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UseAcks</b>: Request acknowledgments for data frames.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LrWpanPhy

<h3>Config Paths</h3>

ns3::LrWpanPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TrxStateValue</b>: The state of the transceiver<br>%Callback signature: ns3::TracedValueCallback::LrWpanPhyEnumeration
</li>
<li><b>TrxState</b>: The state of the transceiver<br>%Callback signature: ns3::LrWpanPhy::StateTracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::SinrTracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 648 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteAmc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Ber</b>: The requested BER in assigning MCS (default is 0.00005).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5e-05</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AmcModel</b>: AMC model used to assign CQI
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Vienna</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteAnr

<h3>Config Paths</h3>

ns3::LteAnr is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteAnr"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteAnr"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Threshold</b>: Minimum RSRQ range value required for detecting a neighbour cell
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:34</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteDataRadioBearerInfo

<h3>Config Paths</h3>

ns3::LteDataRadioBearerInfo is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DrbIdentity</b>: The id of this Data Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>EpsBearerIdentity</b>: The id of the EPS bearer corresponding to this Data Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>logicalChannelIdentity</b>: The id of the Logical Channel corresponding to this Data Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>LteRlc</b>: RLC instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteRlc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LtePdcp></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbComponentCarrierManager

<h3>Config Paths</h3>

ns3::LteEnbComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbMac

<h3>Config Paths</h3>

ns3::LteEnbMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NumberOfRaPreambles</b>: how many random access preambles are available for the contention based RACH process
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 4:64</li>
    <li>Initial value: 52</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PreambleTransMax</b>: Maximum number of random access preamble transmissions
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 3:200</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RaResponseWindowSize</b>: length of the window (in TTIs) for the reception of the random access response (RAR); the resulting RAR timeout is this value + 3 ms
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 2:10</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ComponentCarrierId</b>: ComponentCarrier Id, needed to reply on the appropriate sap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:4</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>DlScheduling</b>: Information regarding DL scheduling.<br>%Callback signature: ns3::LteEnbMac::DlSchedulingTracedCallback
</li>
<li><b>UlScheduling</b>: Information regarding UL scheduling.<br>%Callback signature: ns3::LteEnbMac::UlSchedulingTracedCallback
</li>
</ul>
<b>Size</b> of this type is 552 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbNetDevice

<h3>Config Paths</h3>

ns3::LteEnbNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>LteEnbRrc</b>: The RRC associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbRrc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteHandoverAlgorithm</b>: The handover algorithm associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteHandoverAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteAnr</b>: The automatic neighbour relation function associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteAnr></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteFfrAlgorithm></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteEnbComponentCarrierManager</b>: The RRC associated to this EnbNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteEnbComponentCarrierManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ComponentCarrierMap</b>: List of component carriers.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ComponentCarrierEnb></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CellId</b>: Cell Identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 18100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbPhy

<h3>Config Paths</h3>

ns3::LteEnbPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>TxPower</b>: Transmission power in dBm
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.  According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an ideal receiver with the same overall gain and bandwidth when the receivers are connected to sources at the standard noise temperature T0."  In this model, we consider T0 = 290K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MacToChannelDelay</b>: The delay in TTI units that occurs between a scheduling decision in the MAC and the actual start of the transmission by the PHY. This is intended to be used to model the latency of real PHY and MAC implementations.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UeSinrSamplePeriod</b>: The sampling period for reporting UEs' SINR stats.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InterferenceSamplePeriod</b>: The sampling period for reporting interference stats
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ReportUeSinr</b>: Report UEs' averaged linear SINR<br>%Callback signature: ns3::LteEnbPhy::ReportUeSinrTracedCallback
</li>
<li><b>ReportInterference</b>: Report linear interference power per PHY RB<br>%Callback signature: ns3::LteEnbPhy::ReportInterferenceTracedCallback
</li>
<li><b>DlPhyTransmission</b>: DL transmission PHY layer statistics.<br>%Callback signature: ns3::PhyTransmissionStatParameters::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 640 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbRrc

<h3>Config Paths</h3>

ns3::LteEnbRrc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UeMap</b>: List of UeManager by C-RNTI.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UeManager></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTransmissionMode</b>: The default UEs' transmission mode (0: SISO)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EpsBearerToRlcMapping</b>: Specify which type of RLC will be used for each type of EPS bearer. 
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: RlcSmAlways</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SystemInformationPeriodicity</b>: The interval for sending system information (Time value)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +80000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SrsPeriodicity</b>: The SRS periodicity in milliseconds
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 40</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnectionRequestTimeoutDuration</b>: After a RA attempt, if no RRC CONNECTION REQUEST is received before this time, the UE context is destroyed. Must account for reception of RAR and transmission of RRC CONNECTION REQUEST over UL GRANT.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +15000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnectionSetupTimeoutDuration</b>: After accepting connection request, if no RRC CONNECTION SETUP COMPLETE is received before this time, the UE context is destroyed. Must account for the UE's reception of RRC CONNECTION SETUP and transmission of RRC CONNECTION SETUP COMPLETE.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +150000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnectionRejectedTimeoutDuration</b>: Time to wait between sending a RRC CONNECTION REJECT and destroying the UE context
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HandoverJoiningTimeoutDuration</b>: After accepting a handover request, if no RRC CONNECTION RECONFIGURATION COMPLETE is received before this time, the UE context is destroyed. Must account for reception of X2 HO REQ ACK by source eNB, transmission of the Handover Command, non-contention-based random access and reception of the RRC CONNECTION RECONFIGURATION COMPLETE message.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HandoverLeavingTimeoutDuration</b>: After issuing a Handover Command, if neither RRC CONNECTION RE-ESTABLISHMENT nor X2 UE Context Release has been previously received, the UE context is destroyed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>QRxLevMin</b>: One of information transmitted within the SIB1 message, indicating the required minimum RSRP level that any UE must receive from this cell before it is allowed to camp to this cell. The default value -70 corresponds to -140 dBm and is the lowest possible value as defined by Section 6.3.4 of 3GPP TS 36.133. This restriction, however, only applies to initial cell selection and EPC-enabled simulation.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int8_t -70:-22</li>
    <li>Initial value: -70</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NumberOfComponentCarriers</b>: Number of Component Carriers 
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t 1:5</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AdmitHandoverRequest</b>: Whether to admit an X2 handover request from another eNB
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AdmitRrcConnectionRequest</b>: Whether to admit a connection request from a UE
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrpFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRP in all attached UE; if set to 0, no layer 3 filtering is applicable
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrqFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRQ in all attached UE; if set to 0, no layer 3 filtering is applicable
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>NewUeContext</b>: Fired upon creation of a new UE context.<br>%Callback signature: ns3::LteEnbRrc::NewUeContextTracedCallback
</li>
<li><b>ConnectionEstablished</b>: Fired upon successful RRC connection establishment.<br>%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback
</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration<br>%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback
</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure<br>%Callback signature: ns3::LteEnbRrc::HandoverStartTracedCallback
</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure<br>%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback
</li>
<li><b>RecvMeasurementReport</b>: trace fired when measurement report is received<br>%Callback signature: ns3::LteEnbRrc::ReceiveReportTracedCallback
</li>
</ul>
<b>Size</b> of this type is 1024 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbRrcProtocolIdeal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteEnbRrcProtocolReal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrDistributedAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrDistributedAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CalculationInterval</b>: Time interval between calculation of Edge sub-band, Default value 1 second
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrpDifferenceThreshold</b>: If the difference between the power of the signal received by UE from the serving cell and the power of the signal received from the adjacent cell is less than a RsrpDifferenceThreshold value, the cell weight is incremented
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeRbNum</b>: Number of RB that can be used in edge Sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 512 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrEnhancedAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrEnhancedAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UlSubBandOffset</b>: Uplink SubBand Offset for this cell in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlReuse3SubBandwidth</b>: Uplink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlReuse1SubBandwidth</b>: Uplink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlSubBandOffset</b>: Downlink SubBand Offset for this cell in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlReuse3SubBandwidth</b>: Downlink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlReuse1SubBandwidth</b>: Downlink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 26</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlCqiThreshold</b>: If the DL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlCqiThreshold</b>: If the UL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 744 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFfrSoftAlgorithm

<h3>Config Paths</h3>

ns3::LteFfrSoftAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UlCommonSubBandwidth</b>: Uplink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlCommonSubBandwidth</b>: Downlink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Medium sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MediumAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Medium Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MediumAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in medium areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrHardAlgorithm

<h3>Config Paths</h3>

ns3::LteFrHardAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UlSubBandOffset</b>: Uplink Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlSubBandwidth</b>: Uplink Transmission SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlSubBandOffset</b>: Downlink Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlSubBandwidth</b>: Downlink Transmission SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrNoOpAlgorithm

<h3>Config Paths</h3>

ns3::LteFrNoOpAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrSoftAlgorithm

<h3>Config Paths</h3>

ns3::LteFrSoftAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AllowCenterUeUseEdgeSubBand</b>: If true center UEs can receive on Edge SubBand RBGs
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteFrStrictAlgorithm

<h3>Config Paths</h3>

ns3::LteFrStrictAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UlCommonSubBandwidth</b>: Uplink Common SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlCommonSubBandwidth</b>: Downlink Common SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteFfrAlgorithm</h3>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteHandoverAlgorithm

<h3>Config Paths</h3>

ns3::LteHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Scheduler</b>: The type of scheduler to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::FfMacScheduler.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ns3::PfFfMacScheduler</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FfrAlgorithm</b>: The type of FFR algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteFfrAlgorithm.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ns3::LteFrNoOpAlgorithm</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HandoverAlgorithm</b>: The type of handover algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteHandoverAlgorithm.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ns3::NoOpHandoverAlgorithm</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PathlossModel</b>: The type of pathloss model to be used. The allowed values for this attributes are the type names of any class inheriting from ns3::PropagationLossModel.
  <ul>
    <li>Set with class:  \ref TypeIdValue</li>
    <li>Underlying type:  \ref TypeId</li>
    <li>Initial value: ns3::FriisPropagationLossModel</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FadingModel</b>: The type of fading model to be used.The allowed values for this attributes are the type names of any class inheriting from ns3::SpectrumPropagationLossModel.If the type is set to an empty string, no fading model is used.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UseIdealRrc</b>: If true, LteRrcProtocolIdeal will be used for RRC signaling. If false, LteRrcProtocolReal will be used.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AnrEnabled</b>: Activate or deactivate Automatic Neighbour Relation function
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UsePdschForCqiGeneration</b>: If true, DL-CQI will be calculated from PDCCH as signal and PDSCH as interference If false, DL-CQI will be calculated from PDCCH as signal and PDCCH as interference  
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnbComponentCarrierManager</b>: The type of Component Carrier Manager to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting ns3::LteEnbComponentCarrierManager.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ns3::NoOpComponentCarrierManager</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UeComponentCarrierManager</b>: The type of Component Carrier Manager to be used for UEs. The allowed values for this attributes are the type names of any class inheriting ns3::LteUeComponentCarrierManager.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ns3::SimpleUeComponentCarrierManager</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UseCa</b>: If true, Carrier Aggregation feature is enabled and a valid Component Carrier Map is expected.If false, single carrier simulation.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NumberOfComponentCarriers</b>: Set the number of Component carrier to use If it is more than one and m_useCa is false, it will raise an error 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:5</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 672 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteHexGridEnbTopologyHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>InterSiteDistance</b>: The distance [m] between nearby sites
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SectorOffset</b>: The offset [m] in the position for the node of each sector with respect to the center of the three-sector site
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SiteHeight</b>: The height [m] of each site
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinX</b>: The x coordinate where the hex grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinY</b>: The y coordinate where the hex grid starts.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GridWidth</b>: The number of sites in even rows (odd rows will have one additional site).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteNetDevice

<h3>Config Paths</h3>

ns3::LteNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePdcp

<h3>Config Paths</h3>

ns3::LtePdcp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LtePdcp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LtePdcp"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the RLC.<br>%Callback signature: ns3::LtePdcp::PduTxTracedCallback
</li>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LtePdcp::PduRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePdcpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePhy

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LtePhyTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRadioBearerInfo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRadioBearerTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>rnti</b>: The rnti that indicates the UE to which packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>lcid</b>: The id within the UE identifying the logical channel to which the packet belongs
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlc

<h3>Config Paths</h3>

ns3::LteRlc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcAm

<h3>Config Paths</h3>

ns3::LteRlcAm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PollRetransmitTimer</b>: Value of the t-PollRetransmit timer (See section 7.3 of 3GPP TS 36.322)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +20000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReorderingTimer</b>: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StatusProhibitTimer</b>: Value of the t-StatusProhibit timer (See section 7.3 of 3GPP TS 36.322)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReportBufferStatusTimer</b>: How much to wait to issue a new Report Buffer Status since the last time a new SDU was received
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +20000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxOpportunityForRetxAlwaysBigEnough</b>: If true, always pretend that the size of a TxOpportunity is big enough for retransmission. If false (default and realistic behavior), no retx is performed unless the corresponding TxOpportunity is big enough.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
</ul>
<b>Size</b> of this type is 480 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcAmHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcSduStatusTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcSm

<h3>Config Paths</h3>

ns3::LteRlcSm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcTm

<h3>Config Paths</h3>

ns3::LteRlcTm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2097152</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
</ul>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteRlcUm

<h3>Config Paths</h3>

ns3::LteRlcUm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10240</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::LteRlc</h3>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.<br>%Callback signature: ns3::LteRlc::NotifyTxTracedCallback
</li>
<li><b>RxPDU</b>: PDU received.<br>%Callback signature: ns3::LteRlc::ReceiveTracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteSignalingRadioBearerInfo

<h3>Config Paths</h3>

ns3::LteSignalingRadioBearerInfo is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SrbIdentity</b>: The id of this Signaling Radio Bearer
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>LteRlc</b>: RLC instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteRlc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LtePdcp></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteSpectrumPhy

<h3>Config Paths</h3>

ns3::LteSpectrumPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/UlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/UlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/UlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/DlSpectrumPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/UlSpectrumPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataErrorModelEnabled</b>: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtrlErrorModelEnabled</b>: Activate/Deactivate the error model of control (PCFICH-PDCCH decodification) [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxStart</b>: Trace fired when a new transmission is started<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DlPhyReception</b>: DL reception PHY layer statistics.<br>%Callback signature: ns3::PhyReceptionStatParameters::TracedCallback
</li>
<li><b>UlPhyReception</b>: DL reception PHY layer statistics.<br>%Callback signature: ns3::PhyReceptionStatParameters::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 584 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteStatsCalculator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeComponentCarrierManager

<h3>Config Paths</h3>

ns3::LteUeComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeMac

<h3>Config Paths</h3>

ns3::LteUeMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUeMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUeMac"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeNetDevice

<h3>Config Paths</h3>

ns3::LteUeNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>EpcUeNas</b>: The NAS associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::EpcUeNas></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteUeRrc</b>: The RRC associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeRrc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LteUeComponentCarrierManager</b>: The ComponentCarrierManager associated to this UeNetDevice
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteUeComponentCarrierManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ComponentCarrierMapUe</b>: List of all component Carrier.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ComponentCarrierUe></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>Imsi</b>: International Mobile Subscriber Identity assigned to this UE
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:262143</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this UE is associated with, i.e., giving the UE access to cells which belong to this particular CSG. This restriction only applies to initial cell selection and EPC-enabled simulation. This does not revoke the UE's access to non-CSG cells. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::LteNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 30000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUePhy

<h3>Config Paths</h3>

ns3::LteUePhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>TxPower</b>: Transmission power in dBm
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 9</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxMode1Gain</b>: Transmission mode 1 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TxMode2Gain</b>: Transmission mode 2 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TxMode3Gain</b>: Transmission mode 3 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -2.8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TxMode4Gain</b>: Transmission mode 4 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TxMode5Gain</b>: Transmission mode 5 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TxMode6Gain</b>: Transmission mode 6 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TxMode7Gain</b>: Transmission mode 7 gain in dB
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RsrpSinrSamplePeriod</b>: The sampling period for reporting RSRP-SINR stats (default value 1)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSpectrumPhy></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>RsrqUeMeasThreshold</b>: Receive threshold for PSS on RSRQ [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UeMeasurementsFilterPeriod</b>: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnableUplinkPowerControl</b>: If true, Uplink Power Control will be enabled.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ReportCurrentCellRsrpSinr</b>: RSRP and SINR statistics.<br>%Callback signature: ns3::LteUePhy::RsrpSinrTracedCallback
</li>
<li><b>UlPhyTransmission</b>: DL transmission PHY layer statistics.<br>%Callback signature: ns3::PhyTransmissionStatParameters::TracedCallback
</li>
<li><b>ReportUeMeasurements</b>: Report UE measurements RSRP (dBm) and RSRQ (dB).<br>%Callback signature: ns3::LteUePhy::RsrpRsrqTracedCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every UE PHY state transition<br>%Callback signature: ns3::LteUePhy::StateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 736 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUePowerControl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ClosedLoop</b>: If true Closed Loop mode will be active, otherwise Open Loop
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AccumulationEnabled</b>: If true TCP accumulation mode will be active, otherwise absolute mode will be active
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Alpha</b>: Value of Alpha parameter
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Pcmax</b>: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 23</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pcmin</b>: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -40</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PoNominalPusch</b>: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -32768:32767</li>
    <li>Initial value: -80</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>PoUePusch</b>: P_O_UE_PUSCH   INT(-8...7), Default value 0
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -32768:32767</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>PsrsOffset</b>: P_SRS_OFFSET   INT(0...15), Default value 7
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int16_t -32768:32767</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ReportPuschTxPower</b>: Report PUSCH TxPower in dBm<br>%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback
</li>
<li><b>ReportPucchTxPower</b>: Report PUCCH TxPower in dBm<br>%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback
</li>
<li><b>ReportSrsTxPower</b>: Report SRS TxPower in dBm<br>%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback
</li>
</ul>
<b>Size</b> of this type is 288 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeRrc

<h3>Config Paths</h3>

ns3::LteUeRrc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRadioBearerMap</b>: List of UE RadioBearerInfo for Data Radio Bearers by LCID.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteDataRadioBearerInfo></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CellId</b>: Serving cell identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>T300</b>: Timer for the RRC Connection Establishment procedure (i.e., the procedure is deemed as failed if it takes longer than this)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MibReceived</b>: trace fired upon reception of Master Information Block<br>%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback
</li>
<li><b>Sib1Received</b>: trace fired upon reception of System Information Block Type 1<br>%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback
</li>
<li><b>Sib2Received</b>: trace fired upon reception of System Information Block Type 2<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>StateTransition</b>: trace fired upon every UE RRC state transition<br>%Callback signature: ns3::LteUeRrc::StateTracedCallback
</li>
<li><b>InitialCellSelectionEndOk</b>: trace fired upon successful initial cell selection procedure<br>%Callback signature: ns3::LteUeRrc::CellSelectionTracedCallback
</li>
<li><b>InitialCellSelectionEndError</b>: trace fired upon failed initial cell selection procedure<br>%Callback signature: ns3::LteUeRrc::CellSelectionTracedCallback
</li>
<li><b>RandomAccessSuccessful</b>: trace fired upon successful completion of the random access procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>RandomAccessError</b>: trace fired upon failure of the random access procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>ConnectionEstablished</b>: trace fired upon successful RRC connection establishment<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>ConnectionTimeout</b>: trace fired upon timeout RRC connection establishment because of T300<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure<br>%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback
</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>HandoverEndError</b>: trace fired upon failure of a handover procedure<br>%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback
</li>
<li><b>SCarrierConfigured</b>: trace fired after configuring secondary carriers<br>%Callback signature: ns3::LteUeRrc::SCarrierConfiguredTracedCallback
</li>
</ul>
<b>Size</b> of this type is 1184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeRrcProtocolIdeal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::LteUeRrcProtocolReal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MacHeaderType

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MacLow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 18446744073709551615 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MacStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: DlMacStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UlOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UlMacStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ManagementMessageType

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MapScheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MatrixPropagationLossModel

<h3>Config Paths</h3>

ns3::MatrixPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DefaultLoss</b>: The default value for propagation loss, dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.79769e+308</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshInformationElementVector

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshL2RoutingProtocol

<h3>Config Paths</h3>

ns3::MeshL2RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshPointDevice

<h3>Config Paths</h3>

ns3::MeshPointDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RoutingProtocol</b>: The mesh routing protocol used by this mesh point.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::MeshL2RoutingProtocol></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshStack

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MeshWifiInterfaceMac

<h3>Config Paths</h3>

ns3::MeshWifiInterfaceMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::MeshWifiInterfaceMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::MeshWifiInterfaceMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BeaconInterval</b>: Beacon Interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RandomStart</b>: Window when beacon generating starts (uniform random) in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BeaconGeneration</b>: Enable/Disable Beaconing.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 480 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAddBaRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAddBaResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAssocRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 616 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtAssocResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 800 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtBeaconHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 920 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtDelBaHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtProbeRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 600 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtProbeResponseHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 920 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MgtReassocRequestHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 624 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MinstrelHtWifiManager

<h3>Config Paths</h3>

ns3::MinstrelHtWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::MinstrelHtWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UpdateStatistics</b>: The interval between updating statistics table 
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LookAroundRate</b>: The percentage to try other rates (for legacy Minstrel)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:100</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EWMA</b>: EWMA level
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:100</li>
    <li>Initial value: 75</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SampleColumn</b>: The number of columns used for sampling
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1200</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UseVhtOnly</b>: Use only VHT MCSs (and not HT) when VHT is available
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PrintStats</b>: Control the printing of the statistics table
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MinstrelWifiManager

<h3>Config Paths</h3>

ns3::MinstrelWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::MinstrelWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UpdateStatistics</b>: The interval between updating statistics table 
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LookAroundRate</b>: the percentage to try other rates
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EWMA</b>: EWMA level
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 75</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SampleColumn</b>: The number of columns used for sampling
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1200</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PrintStats</b>: Print statistics table
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PrintSamples</b>: Print samples table
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MobilityBuildingInfo

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MobilityModel

<h3>Config Paths</h3>

ns3::MobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MpduAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MqQueueDisc

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 904 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MsduAggregator

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::MultiModelSpectrumChannel

<h3>Config Paths</h3>

ns3::MultiModelSpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::MultiModelSpectrumChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss<br>%Callback signature: ns3::SpectrumChannel::GainTracedCallback
</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. <br>%Callback signature: ns3::SpectrumChannel::LossTracedCallback
</li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.<br>%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback
</li>
</ul>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NakagamiPropagationLossModel

<h3>Config Paths</h3>

ns3::NakagamiPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Distance1</b>: Beginning of the second distance field. Default is 80m.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Distance2</b>: Beginning of the third distance field. Default is 200m.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>m0</b>: m0 for distances smaller than Distance1. Default is 1.5.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>m1</b>: m1 for distances smaller than Distance2. Default is 0.75.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.75</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>m2</b>: m2 for distances greater than Distance2. Default is 0.75.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.75</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErlangRv</b>: Access to the underlying ErlangRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErlangRandomVariable></li>
    <li>Initial value: ns3::ErlangRandomVariable</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GammaRv</b>: Access to the underlying GammaRandomVariable
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::GammaRandomVariable></li>
    <li>Initial value: ns3::GammaRandomVariable</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NdiscCache

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>UnresolvedQueueSize</b>: Size of the queue for packets pending an NA reply.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDevice

<h3>Config Paths</h3>

ns3::NetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NetDeviceQueueInterface

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NistErrorRateModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Node

<h3>Config Paths</h3>

ns3::Node is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DeviceList</b>: The list of devices associated to this Node.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::NetDevice></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>ApplicationList</b>: The list of applications associated to this Node.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Application></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>Id</b>: The id (unique integer) of this Node.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>SystemId</b>: The systemId of this node: a unique integer used for parallel simulations.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NodeListPriv

<h3>Config Paths</h3>

ns3::NodeListPriv is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>""</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NodeList</b>: The list of all nodes created during the simulation.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Node></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NonCommunicatingNetDevice

<h3>Config Paths</h3>

ns3::NonCommunicatingNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::NonCommunicatingNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Object></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NoOpComponentCarrierManager

<h3>Config Paths</h3>

ns3::NoOpComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NoOpHandoverAlgorithm

<h3>Config Paths</h3>

ns3::NoOpHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::NoOpHandoverAlgorithm"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::NoOpHandoverAlgorithm"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NormalRandomVariable

<h3>Config Paths</h3>

ns3::NormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalVelocity"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalDirection"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalPitch"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::NormalRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mean</b>: The mean value for the normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Variance</b>: The variance value for the normal distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bound</b>: The bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+307</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::NullMessageSimulatorImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>SchedulerTune</b>: Null Message scheduler tuning parameter
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0.01:1</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Object

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ObjectBase

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OcbWifiMac

<h3>Config Paths</h3>

ns3::OcbWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::OcbWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::OcbWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/MacEntities/[i]"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OhBuildingsPropagationLossModel

<h3>Config Paths</h3>

ns3::OhBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::BuildingsPropagationLossModel</h3>
<ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OkumuraHataPropagationLossModel

<h3>Config Paths</h3>

ns3::OkumuraHataPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2.16e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Environment</b>: Environment Scenario
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Urban</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CitySize</b>: Dimension of the city
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Large</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::olsr::MessageHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::olsr::PacketHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::olsr::RoutingProtocol

<h3>Config Paths</h3>

ns3::olsr::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::olsr::RoutingProtocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>HelloInterval</b>: HELLO messages emission interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TcInterval</b>: TC messages emission interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MidInterval</b>: MID messages emission interval.  Normally it is equal to TcInterval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HnaInterval</b>: HNA messages emission interval.  Normally it is equal to TcInterval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Willingness</b>: Willingness of a node to carry and forward traffic for other nodes.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: Receive OLSR packet.<br>%Callback signature: ns3::olsr::RoutingProtocol::PacketTxRxTracedCallback
</li>
<li><b>Tx</b>: Send OLSR packet.<br>%Callback signature: ns3::olsr::RoutingProtocol::PacketTxRxTracedCallback
</li>
<li><b>RoutingTableChanged</b>: The OLSR routing table has changed.<br>%Callback signature: ns3::olsr::RoutingProtocol::TableChangeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 968 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OnoeWifiManager

<h3>Config Paths</h3>

ns3::OnoeWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::OnoeWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RaiseThreshold</b>: Attempt to raise the rate if we hit that threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AddCreditThreshold</b>: Add credit threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OnOffApplication

<h3>Config Paths</h3>

ns3::OnOffApplication is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRate</b>: The data rate in on state.
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 500000bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSize</b>: The size of packets sent in on state
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 512</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Remote</b>: The address of the destination
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>OnTime</b>: A RandomVariableStream used to pick the duration of the 'On' state.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>OffTime</b>: A RandomVariableStream used to pick the duration of the 'Off' state.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Protocol</b>: The type of protocol to use. This should be a subclass of ns3::SocketFactory
  <ul>
    <li>Set with class:  \ref TypeIdValue</li>
    <li>Underlying type:  \ref TypeId</li>
    <li>Initial value: ns3::UdpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 288 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OrbisTopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::OutdoorPositionAllocator

<h3>Config Paths</h3>

ns3::OutdoorPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxAttempts</b>: Maximum number of attempts for the rejection sampling before giving up.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketBurst

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketFilter

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The packet that serve as the output for this probe<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>OutputBytes</b>: The number of bytes in the packet<br>%Callback signature: ns3::Packet::SizeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSink

<h3>Config Paths</h3>

ns3::PacketSink is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSink"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Local</b>: The Address on which to Bind the rx socket.
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.
  <ul>
    <li>Set with class:  \ref TypeIdValue</li>
    <li>Underlying type:  \ref TypeId</li>
    <li>Initial value: ns3::UdpSocketFactory</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RcvBufSize</b>: PacketSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop packet due to receive buffer overflow<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketClient

<h3>Config Paths</h3>

ns3::PacketSocketClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSize</b>: Size of packets generated (bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Priority</b>: Priority assigned to the packets generated.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A packet has been sent<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketFactory

<h3>Config Paths</h3>

ns3::PacketSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::PacketSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketServer

<h3>Config Paths</h3>

ns3::PacketSocketServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketServer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::AddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PacketSocketTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ParabolicAntennaModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Beamwidth</b>: The 3dB beamwidth (degrees)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:180</li>
    <li>Initial value: 60</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -360:360</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxAttenuation</b>: The maximum attenuation (dB) of the antenna radiation pattern.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ParetoRandomVariable

<h3>Config Paths</h3>

ns3::ParetoRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ParetoRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mean</b>: The mean parameter for the Pareto distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Scale</b>: The scale parameter for the Pareto distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Shape</b>: The shape parameter for the Pareto distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream (if non-zero).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ParfWifiManager

<h3>Config Paths</h3>

ns3::ParfWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ParfWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AttemptThreshold</b>: The minimum number of transmission attempts to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new power or rate.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PowerChange</b>: The transmission power has change<br>%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback
</li>
<li><b>RateChange</b>: The transmission rate has change<br>%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 312 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PbbPacket

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PcapFileWrapper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>CaptureSize</b>: Maximum length of captured packets (cf. pcap snaplen)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NanosecMode</b>: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 608 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PdcpTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PfFfMacScheduler

<h3>Config Paths</h3>

ns3::PfFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PfifoFastQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc.
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 904 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhyRxStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlRxOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: DlRxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UlRxOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UlRxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhyStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlRsrpSinrFilename</b>: Name of the file where the RSRP/SINR statistics will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: DlRsrpSinrStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UlSinrFilename</b>: Name of the file where the UE SINR statistics will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UlSinrStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UlInterferenceFilename</b>: Name of the file where the interference statistics will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UlInterferenceStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PhyTxStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DlTxOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: DlTxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UlTxOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UlTxPhyStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PieQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>A</b>: Value of alpha
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>B</b>: Value of beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Tupdate</b>: Time period to calculate drop probability
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +29999999.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Supdate</b>: Start time of the update timer
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 25p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDelayReference</b>: Desired queue delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +20000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxBurstAllowance</b>: Current max burst allowance in seconds before random drop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1072 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ping6

<h3>Config Paths</h3>

ns3::Ping6 is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Ping6"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteIpv6</b>: The Ipv6Address of the outbound packets
  <ul>
    <li>Set with class:  \ref Ipv6AddressValue</li>
    <li>Underlying type:  \ref Ipv6Address</li>
    <li>Initial value: ::</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LocalIpv6</b>: Local Ipv6Address of the sender
  <ul>
    <li>Set with class:  \ref Ipv6AddressValue</li>
    <li>Underlying type:  \ref Ipv6Address</li>
    <li>Initial value: ::</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSize</b>: Size of packets generated
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 248 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointChannel

<h3>Config Paths</h3>

ns3::PointToPointChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::PointToPointChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::PointToPointChannel"</li>
<li>"/ChannelList/[i]/$ns3::PointToPointChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Delay</b>: Propagation delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxRxPointToPoint</b>: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.<br>%Callback signature: ns3::PointToPointChannel::TxRxAnimationCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointEpcHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>S1uLinkDataRate</b>: The data rate to be used for the next S1-U link to be created
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>S1uLinkDelay</b>: The delay to be used for the next S1-U link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>S1uLinkMtu</b>: The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 2000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>X2LinkDataRate</b>: The data rate to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 10000000000bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>X2LinkDelay</b>: The delay to be used for the next X2 link to be created
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>X2LinkMtu</b>: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 3000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>S1uLinkPcapPrefix</b>: Prefix for Pcap generated by S1-U link
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: s1-u</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>X2LinkPcapPrefix</b>: Prefix for Pcap generated by X2 link
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: x2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>X2LinkEnablePcap</b>: Enable Pcap for X2 link
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>S1uLinkEnablePcap</b>: Enable Pcap for X2 link
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointNetDevice

<h3>Config Paths</h3>

ns3::PointToPointNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Address</b>: The MAC address of this device.
  <ul>
    <li>Set with class:  \ref Mac48AddressValue</li>
    <li>Underlying type:  \ref Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DataRate</b>: The default data rate for point to point links
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 32768bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InterframeGap</b>: The time to wait between packet (frame) transmissions
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PointToPointRemoteChannel

<h3>Config Paths</h3>

ns3::PointToPointRemoteChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::PointToPointChannel/$ns3::PointToPointRemoteChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::PointToPointRemoteChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::PointToPointChannel/$ns3::PointToPointRemoteChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::PointToPointRemoteChannel"</li>
<li>"/ChannelList/[i]/$ns3::PointToPointChannel/$ns3::PointToPointRemoteChannel"</li>
<li>"/ChannelList/[i]/$ns3::PointToPointRemoteChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::PointToPointChannel</h3>
<ul>
<li><b>Delay</b>: Propagation delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::PointToPointChannel</h3>
<ul>
<li><b>TxRxPointToPoint</b>: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.<br>%Callback signature: ns3::PointToPointChannel::TxRxAnimationCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PositionAllocator

<h3>Config Paths</h3>

ns3::PositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PppHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PrioQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Priomap</b>: The priority to band mapping.
  <ul>
    <li>Set with class:  \ref PriomapValue</li>
    <li>Underlying type:  \ref Priomap</li>
    <li>Initial value: 1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 936 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Probe

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::producer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>PayloadSize</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PropagationDelayModel

<h3>Config Paths</h3>

ns3::PropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PropagationLossModel

<h3>Config Paths</h3>

ns3::PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::PssFfMacScheduler

<h3>Config Paths</h3>

ns3::PssFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PssFdSchedulerType</b>: FD scheduler in PSS (default value is PFsch)
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: PFsch</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>nMux</b>: The number of UE selected by TD scheduler (default value is 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QosTxop

<h3>Config Paths</h3>

ns3::QosTxop is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/Txop/$ns3::QosTxop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/VO_Txop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/VI_Txop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/BE_Txop"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/BK_Txop"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Txop</h3>
<ul>
<li><b>MinCw</b>: The minimum value of the contention window.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxCw</b>: The maximum value of the contention window.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Aifsn</b>: The AIFSN: the default value conforms to non-QOS.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxopLimit</b>: The TXOP limit: the default value conforms to non-QoS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Queue</b>: The WifiMacQueue object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiMacQueue></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>BackoffTrace</b>: Trace source for backoff values<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CwTrace</b>: Trace source for contention window values<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>TxopTrace</b>: Trace source for txop start and duration times<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
</ul>
<b>Size</b> of this type is 448 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<Packet>

<h3>Config Paths</h3>

ns3::Queue<Packet> is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice/Queue"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<QueueDiscItem>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Queue<WifiMacQueueItem>

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueBase

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 904 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueDiscClass

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::QueueLimits

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RadioBearerStatsCalculator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>StartTime</b>: Start time of the on going epoch.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EpochDuration</b>: Epoch duration.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +250000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DlRlcOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: DlRlcStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UlRlcOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UlRlcStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>DlPdcpOutputFilename</b>: Name of the file where the downlink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: DlPdcpStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>UlPdcpOutputFilename</b>: Name of the file where the uplink results will be saved.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UlPdcpStats.txt</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 936 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RadioEnvironmentMapHelper

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ChannelPath</b>: The path to the channel for which the Radio Environment Map is to be generated
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: /ChannelList/0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>OutputFile</b>: the filename to which the Radio Environment Map is saved
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: rem.out</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>XMin</b>: The min x coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>YMin</b>: The min y coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>XMax</b>: The max x coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>YMax</b>: The max y coordinate of the map.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>XRes</b>: The resolution (number of points) of the map along the x axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 2:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>YRes</b>: The resolution (number of points) of the map along the y axis.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 2:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Z</b>: The value of the z coordinate for which the map is to be generated
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopWhenDone</b>: If true, Simulator::Stop () will be called as soon as the REM has been generated
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NoisePower</b>: the power of the measuring instrument noise, in Watts. Default to a kT of -174 dBm with a noise figure of 9 dB and a bandwidth of 25 LTE Resource Blocks
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.423e-13</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPointsPerIteration</b>: Maximum number of REM points to be calculated per iteration. Every point consumes approximately 5KB of memory.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 20000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Earfcn</b>: E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bandwidth</b>: Transmission Bandwidth Configuration (in number of RBs) over which the SINR will be calculated
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UseDataChannel</b>: If true, REM will be generated for PDSCH and for PDCCH otherwise 
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RbId</b>: Resource block Id, for which REM will be generated,default value is -1, what means REM will be averaged from all RBs
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 688 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RadiotapHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Radvd

<h3>Config Paths</h3>

ns3::Radvd is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Radvd"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>AdvertisementJitter</b>: Uniform variable to provide jitter between min and max values of AdvInterval
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UniformRandomVariable></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomBoxPositionAllocator

<h3>Config Paths</h3>

ns3::RandomBoxPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomBuildingPositionAllocator

<h3>Config Paths</h3>

ns3::RandomBuildingPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBuildingPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>WithReplacement</b>: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomDirection2dMobilityModel

<h3>Config Paths</h3>

ns3::RandomDirection2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: The 2d bounding area
  <ul>
    <li>Set with class:  \ref RectangleValue</li>
    <li>Underlying type:  \ref Rectangle</li>
    <li>Initial value: -100|100|-100|100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Speed</b>: A random variable to control the speed (m/s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=1.0|Max=2.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pause</b>: A random variable to control the pause (s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=2.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomDiscPositionAllocator

<h3>Config Paths</h3>

ns3::RandomDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Theta</b>: A random variable which represents the angle (gradients) of a position in a random disc.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.2830]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rho</b>: A random variable which represents the radius of a position in a random disc.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=200.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>X</b>: The x coordinate of the center of the random position disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Y</b>: The y coordinate of the center of the random position disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomPropagationDelayModel

<h3>Config Paths</h3>

ns3::RandomPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variable</b>: The random variable which generates random delays (s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomPropagationLossModel

<h3>Config Paths</h3>

ns3::RandomPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variable</b>: The random variable used to pick a loss every time CalcRxPower is invoked.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomRectanglePositionAllocator

<h3>Config Paths</h3>

ns3::RandomRectanglePositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random rectangle.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random rectangle.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomRoomPositionAllocator

<h3>Config Paths</h3>

ns3::RandomRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomVariableStream

<h3>Config Paths</h3>

ns3::RandomVariableStream is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWalk2dMobilityModel

<h3>Config Paths</h3>

ns3::RandomWalk2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.
  <ul>
    <li>Set with class:  \ref RectangleValue</li>
    <li>Underlying type:  \ref Rectangle</li>
    <li>Initial value: 0|100|0|100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Time</b>: Change current direction and speed after moving for this delay.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Distance</b>: Change current direction and speed after moving for this distance.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Distance</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Direction</b>: A random variable used to pick the direction (radians).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283184]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Speed</b>: A random variable used to pick the speed (m/s).
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=2.0|Max=4.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RandomWaypointMobilityModel

<h3>Config Paths</h3>

ns3::RandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Speed</b>: A random variable used to pick the speed of a random waypoint model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.3|Max=0.7]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pause</b>: A random variable used to pick the pause of a random waypoint model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=2.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PositionAllocator</b>: The position model used to pick a destination point.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PositionAllocator></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RangePropagationLossModel

<h3>Config Paths</h3>

ns3::RangePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxRange</b>: Maximum Transmission Range (meters)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 250</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RateErrorModel

<h3>Config Paths</h3>

ns3::RateErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ErrorUnit</b>: The error unit
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ERROR_UNIT_BYTE</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErrorRate</b>: The error rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RanVar</b>: The decision variable attached to this error model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RealtimeSimulatorImpl

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>SynchronizationMode</b>: What to do if the simulation cannot keep up with real time.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: BestEffort</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>HardLimit</b>: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ReceiveListErrorModel

<h3>Config Paths</h3>

ns3::ReceiveListErrorModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::ErrorModel</h3>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RedQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MeanPktSize</b>: Average of packet size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IdlePktSize</b>: Average packet size used during idle times. Used when m_cautions = 3
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Wait</b>: True for waiting between dropped packets
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Gentle</b>: True to increases dropping probability slowly when average queue exceeds maxthresh
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ARED</b>: True to enable ARED
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AdaptMaxP</b>: True to adapt m_curMaxP
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FengAdaptive</b>: True to enable Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NLRED</b>: True to enable Nonlinear RED
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinTh</b>: Minimum average length threshold in packets/bytes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxTh</b>: Maximum average length threshold in packets/bytes
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 25p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>QW</b>: Queue weight related to the exponential weighted moving average (EWMA)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.002</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LInterm</b>: The maximum probability of dropping a packet
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TargetDelay</b>: Target average queuing delay in ARED
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: Time interval to update m_curMaxP
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Top</b>: Upper bound for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bottom</b>: Lower bound for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Alpha</b>: Increment parameter for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Beta</b>: Decrement parameter for m_curMaxP in ARED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.9</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FengAlpha</b>: Decrement parameter for m_curMaxP in Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FengBeta</b>: Increment parameter for m_curMaxP in Feng's Adaptive RED
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>LastSet</b>: Store the last time m_curMaxP was updated
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rtt</b>: Round Trip Time to be considered while automatically setting m_bottom
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Ns1Compat</b>: NS-1 compatibility
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkBandwidth</b>: The RED link bandwidth
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 1500000bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkDelay</b>: The RED link delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +20000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UseHardDrop</b>: True to always drop packets above max threshold
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RegularWifiMac

<h3>Config Paths</h3>

ns3::RegularWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 360 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RemSpectrumPhy

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Rip

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TimeoutDelay</b>: The delay to invalidate a route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +180000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +120000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SplitHorizon</b>: Split Horizon strategy.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: PoisonReverse</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkDownValue</b>: Value for link down in count to infinity.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 328 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNg

<h3>Config Paths</h3>

ns3::RipNg is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::RipNg"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TimeoutDelay</b>: The delay to invalidate a route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +180000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +120000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SplitHorizon</b>: Split Horizon strategy.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: PoisonReverse</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkDownValue</b>: Value for link down in count to infinity.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNgHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipNgRte

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RipRte

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RlcTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RngReq

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RngRsp

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RocketfuelTopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RraaWifiManager

<h3>Config Paths</h3>

ns3::RraaWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::RraaWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Basic</b>: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Timeout</b>: Timeout for the RRAA BASIC loss estimation block (s)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameLength</b>: The data frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1420</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckFrameLength</b>: The ACK frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Alpha</b>: Constant for calculating the MTL threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Beta</b>: Constant for calculating the ORI threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Tau</b>: Constant for calculating the EWND size.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.012</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)<br>%Callback signature: ns3::TracedValueCallback::Uint64
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 376 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RrComponentCarrierManager

<h3>Config Paths</h3>

ns3::RrComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RrFfMacScheduler

<h3>Config Paths</h3>

ns3::RrFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RrpaaWifiManager

<h3>Config Paths</h3>

ns3::RrpaaWifiManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::RrpaaWifiManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Basic</b>: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Timeout</b>: Timeout for the RRAA-BASIC loss estimation block (s).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameLength</b>: The data frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1420</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckFrameLength</b>: The ACK frame length (in bytes) used for calculating mode TxTime.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Alpha</b>: Constant for calculating the MTL threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 1.25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Beta</b>: Constant for calculating the ORI threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Tau</b>: Constant for calculating the EWND size.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.015</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Gamma</b>: Constant for Probabilistic Decision Table decrements.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Delta</b>: Constant for Probabilistic Decision Table increments.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 1:1.79769e+308</li>
    <li>Initial value: 1.0905</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RateChange</b>: The transmission rate has change.<br>%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback
</li>
<li><b>PowerChange</b>: The transmission power has change.<br>%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiRemoteStationManager</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 416 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttEstimator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttEstimator1

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxMultiplier</b>: Maximum RTO Multiplier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialEstimation</b>: Initial RTT estimation
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinRTO</b>: Minimum retransmit timeout value
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FastRetxTimer</b>: Timeout defining how frequent FasterRetransmission timeouts should be checked
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttMeanDeviation

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Gain used in estimating the RTT, must be 0 <= alpha <= 1
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Beta</b>: Gain used in estimating the RTT variation, must be 0 <= beta <= 1
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RttEstimator</h3>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RttMeanDeviation1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::RttEstimator1</h3>
<ul>
<li><b>MaxMultiplier</b>: Maximum RTO Multiplier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialEstimation</b>: Initial RTT estimation
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinRTO</b>: Minimum retransmit timeout value
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FastRetxTimer</b>: Timeout defining how frequent FasterRetransmission timeouts should be checked
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +5000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::RvBatteryModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RvBatteryModelPeriodicEnergyUpdateInterval</b>: RV battery model sampling interval.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RvBatteryModelLowBatteryThreshold</b>: Low battery threshold.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RvBatteryModelOpenCircuitVoltage</b>: RV battery model open circuit voltage.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RvBatteryModelCutoffVoltage</b>: RV battery model cutoff voltage.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RvBatteryModelAlphaValue</b>: RV battery model alpha value.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 35220</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RvBatteryModelBetaValue</b>: RV battery model beta value.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.637</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RvBatteryModelNumOfTerms</b>: The number of terms of the infinite sum for estimating battery level.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RvBatteryModelBatteryLevel</b>: RV battery model battery level.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
<li><b>RvBatteryModelBatteryLifetime</b>: RV battery model battery lifetime.<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
</ul>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SameRoomPositionAllocator

<h3>Config Paths</h3>

ns3::SameRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::SameRoomPositionAllocator"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Scheduler

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SeqTsHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SequentialRandomVariable

<h3>Config Paths</h3>

ns3::SequentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::SequentialRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Min</b>: The first value of the sequence.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Max</b>: One more than the last value of the sequence.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Increment</b>: The sequence random variable increment.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::RandomVariableStream></li>
    <li>Initial value: ns3::ConstantRandomVariable[Constant=1]</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Consecutive</b>: The number of times each member of the sequence is repeated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ServiceFlowManager

<h3>Config Paths</h3>

ns3::ServiceFlowManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/ServiceFlowManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/ServiceFlowManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ShannonSpectrumErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleChannel

<h3>Config Paths</h3>

ns3::SimpleChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SimpleChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SimpleChannel"</li>
<li>"/ChannelList/[i]/$ns3::SimpleChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Delay</b>: Transmission delay through the channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleDeviceEnergyModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleFrameCaptureModel

<h3>Config Paths</h3>

ns3::SimpleFrameCaptureModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/FrameCaptureModel/$ns3::SimpleFrameCaptureModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/FrameCaptureModel/$ns3::SimpleFrameCaptureModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Margin</b>: Reception is switched if the newly arrived frame has a power higher than this value above the frame currently being received (expressed in dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleNetDevice

<h3>Config Paths</h3>

ns3::SimpleNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ErrorModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PointToPointMode</b>: The device is configured in Point to Point mode
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<Packet>></li>
    <li>Initial value: ns3::DropTailQueue<Packet></li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DataRate</b>: The default data rate for point to point links. Zero means infinite
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 0bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleOfdmWimaxPhy

<h3>Config Paths</h3>

ns3::SimpleOfdmWimaxPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy/$ns3::SimpleOfdmWimaxPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPower</b>: Transmission power (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 30</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>G</b>: This is the ratio of CP time to useful time.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.25</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Nfft</b>: FFT size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 256:1024</li>
    <li>Initial value: 256</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TraceFilePath</b>: Path to the directory containing SNR to block error rate files
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WimaxPhy</h3>
<ul>
<li><b>Channel</b>: Wimax channel
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameDuration</b>: The frame duration in seconds.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Frequency</b>: The central frequency in KHz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1000000:11000000</li>
    <li>Initial value: 5000000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bandwidth</b>: The channel bandwidth in Hz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 5000000:30000000</li>
    <li>Initial value: 10000000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::PacketBurst::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimpleUeComponentCarrierManager

<h3>Config Paths</h3>

ns3::SimpleUeComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 216 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SimulatorImpl

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SingleModelSpectrumChannel

<h3>Config Paths</h3>

ns3::SingleModelSpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::SingleModelSpectrumChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::SpectrumChannel</h3>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss<br>%Callback signature: ns3::SpectrumChannel::GainTracedCallback
</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. <br>%Callback signature: ns3::SpectrumChannel::LossTracedCallback
</li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.<br>%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanFrag1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanFragN

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanHc1

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanIphc

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanIpv6

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanNetDevice

<h3>Config Paths</h3>

ns3::SixLowPanNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Rfc6282</b>: Use RFC6282 (IPHC) if true, RFC4944 (HC1) otherwise.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>OmitUdpChecksum</b>: Omit the UDP checksum in IPHC compression.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FragmentReassemblyListSize</b>: The maximum size of the reassembly buffer (in packets). Zero meaning infinite.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressionThreshold</b>: The minimum MAC layer payload size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ForceEtherType</b>: Force a specific EtherType in L2 frames.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EtherType</b>: The specific EtherType to be used in L2 frames.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: Send - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.<br>%Callback signature: ns3::SixLowPanNetDevice::RxTxTracedCallback
</li>
<li><b>Rx</b>: Receive - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.<br>%Callback signature: ns3::SixLowPanNetDevice::RxTxTracedCallback
</li>
<li><b>Drop</b>: Drop - DropReason, packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.<br>%Callback signature: ns3::SixLowPanNetDevice::DropTracedCallback
</li>
</ul>
<b>Size</b> of this type is 248 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanNhcExtension

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 272 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SixLowPanUdpNhcExtension

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SllHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SnrTag

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Snr</b>: The snr of the last packet received
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Socket

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketFactory

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketIpTtlTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketIpv6HopLimitTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SocketSetDontFragmentTag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumAnalyzer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Resolution</b>: The length of the time interval over which the power spectral density of incoming signals is averaged
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NoisePowerSpectralDensity</b>: The power spectral density of the measuring instrument noise, in Watt/Hz. Mostly useful to make spectrograms look more similar to those obtained by real devices. Defaults to the value for thermal noise at 300K.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 4.14e-21</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>AveragePowerSpectralDensityReport</b>: Trace fired whenever a new value for the average Power Spectral Density is calculated<br>%Callback signature: ns3::SpectrumValue::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 136 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumChannel

<h3>Config Paths</h3>

ns3::SpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. 
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss<br>%Callback signature: ns3::SpectrumChannel::GainTracedCallback
</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. <br>%Callback signature: ns3::SpectrumChannel::LossTracedCallback
</li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.<br>%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumErrorModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumPhy

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumPropagationLossModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SpectrumWifiPhy

<h3>Config Paths</h3>

ns3::SpectrumWifiPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/$ns3::SpectrumWifiPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/$ns3::SpectrumWifiPhy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DisableWifiReception</b>: Prevent Wi-Fi frame sync from ever happening
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>Frequency</b>: The operating center frequency (MHz)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelWidth</b>: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 5:160</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelNumber</b>: If set to non-zero defined value, will control Frequency and ChannelWidth assignment
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:196</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnergyDetectionThreshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -96</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>CcaMode1Threshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -99</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerEnd</b>: Maximum available transmission level (dbm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerStart</b>: Minimum available transmission level (dbm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>State</b>: The state of the PHY layer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhyStateHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +250000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antennas</b>: The number of antennas on the device.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShortGuardEnabled</b>: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GuardInterval</b>: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time +400.0ns:+3200.0ns</li>
    <li>Initial value: +3200.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LdpcEnabled</b>: Whether or not LDPC is enabled (not supported yet!).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>STBCEnabled</b>: Whether or not STBC is enabled (not supported yet!).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GreenfieldEnabled</b>: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FrameCaptureModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>SignalArrival</b>: Signal arrival<br>%Callback signature: ns3::SpectrumWifiPhy::SignalArrivalCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames<br>%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback
</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted<br>%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 672 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SSLinkManager

<h3>Config Paths</h3>

ns3::SSLinkManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/LinkManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/LinkManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SSManager

<h3>Config Paths</h3>

ns3::SSManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/SSManager"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/SSManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SSScheduler

<h3>Config Paths</h3>

ns3::SSScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/SSScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/SSScheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::StaWifiMac

<h3>Config Paths</h3>

ns3::StaWifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac/$ns3::StaWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::StaWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac/$ns3::StaWifiMac"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>ProbeRequestTimeout</b>: The duration to actively probe the channel.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WaitBeaconTimeout</b>: The duration to dwell on a channel while passively scanning for beacon
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +120000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AssocRequestTimeout</b>: The interval between two consecutive association request attempts.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxMissedBeacons</b>: Number of beacons which much be consecutively missed before we attempt to restart association.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ActiveProbing</b>: If true, we send probe requests. If false, we don't.NOTE: if more than one STA in your simulation is using active probing, you should enable it at a different simulation time for each STA, otherwise all the STAs will start sending probes at the same time resulting in collisions. See bug 1060 for more info.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::InfrastructureWifiMac</h3>
<ul>
<li><b>PcfSupported</b>: This Boolean attribute is set to enable PCF support at this STA
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:11426</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:64</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Txop</b>: The Txop object.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Txop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QosTxop></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Assoc</b>: Associated with an access point.<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>DeAssoc</b>: Association with an access point lost.<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>BeaconArrival</b>: Time of beacons arrival from associated AP<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::RegularWifiMac</h3>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.<br>%Callback signature: ns3::WifiMacHeader::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WifiMac</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 568 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SteadyStateRandomWaypointMobilityModel

<h3>Config Paths</h3>

ns3::SteadyStateRandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::SteadyStateRandomWaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MinSpeed</b>: Minimum speed value, [m/s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSpeed</b>: Maximum speed value, [m/s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinPause</b>: Minimum pause value, [s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPause</b>: Maximum pause value, [s]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinX</b>: Minimum X value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxX</b>: Maximum X value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinY</b>: Minimum Y value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxY</b>: Maximum Y value of traveling region, [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Z</b>: Z value of traveling region (fixed), [m]
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 296 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::SubscriberStationNetDevice

<h3>Config Paths</h3>

ns3::SubscriberStationNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>BasicConnection</b>: Basic connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PrimaryConnection</b>: Primary connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LostDlMapInterval</b>: Time since last received DL-MAP message before downlink synchronization is considered lost. Maximum is 600ms
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LostUlMapInterval</b>: Time since last received UL-MAP before uplink synchronization is considered lost, maximum is 600.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxDcdInterval</b>: Maximum time between transmission of DCD messages. Maximum is 10s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxUcdInterval</b>: Maximum time between transmission of UCD messages. Maximum is 10s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT1</b>: Wait for DCD timeout. Maximum is 5*maxDcdInterval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT2</b>: Wait for broadcast ranging timeout, i.e., wait for initial ranging opportunity. Maximum is 5*Ranging interval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT3</b>: ranging Response reception timeout following the transmission of a ranging request. Maximum is 200ms
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT7</b>: wait for DSA/DSC/DSD Response timeout. Maximum is 1s
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT12</b>: Wait for UCD descriptor.Maximum is 5*MaxUcdInterval
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT20</b>: Time the SS searches for preambles on a given channel. Minimum is 2 MAC frames
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IntervalT21</b>: time the SS searches for (decodable) DL-MAP on a given channel
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxContentionRangingRetries</b>: Number of retries on contention Ranging Requests
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:16</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SSScheduler</b>: The ss scheduler attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SSScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LinkManager</b>: The ss link manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::SSLinkManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Classifier</b>: The ss classifier attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::IpcsClassifier></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:1500</li>
    <li>Initial value: 1400</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RTG</b>: receive/transmit transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TTG</b>: transmit/receive transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnectionManager</b>: The connection manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ConnectionManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BurstProfileManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialRangingConnection</b>: Initial ranging connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BroadcastConnection</b>: Broadcast connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>SSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>SSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::WimaxNetDevice</h3>
<ul>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 800 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Synchronizer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Tag

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TapBridge

<h3>Config Paths</h3>

ns3::TapBridge is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::TapBridge"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeviceName</b>: The name of the tap device to create.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Gateway</b>: The IP address of the default gateway to assign to the host machine, when in ConfigureLocal mode.
  <ul>
    <li>Set with class:  \ref Ipv4AddressValue</li>
    <li>Underlying type:  \ref Ipv4Address</li>
    <li>Initial value: 255.255.255.255</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpAddress</b>: The IP address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered IP address of the simulated device.
  <ul>
    <li>Set with class:  \ref Ipv4AddressValue</li>
    <li>Underlying type:  \ref Ipv4Address</li>
    <li>Initial value: 255.255.255.255</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MacAddress</b>: The MAC address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
  <ul>
    <li>Set with class:  \ref Mac48AddressValue</li>
    <li>Underlying type:  \ref Mac48Address</li>
    <li>Initial value: ff:ff:ff:ff:ff:ff</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Netmask</b>: The network mask to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
  <ul>
    <li>Set with class:  \ref Ipv4MaskValue</li>
    <li>Underlying type:  \ref Ipv4Mask</li>
    <li>Initial value: 255.255.255.255</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Start</b>: The simulation time at which to spin up the tap device read thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: The simulation time at which to tear down the tap device read thread.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mode</b>: The operating and configuration mode to use.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: UseLocal</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 240 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TbfQueueDisc

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 1000p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Burst</b>: Size of the first bucket in bytes
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 125000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Mtu</b>: Size of the second bucket in bytes. If null, it is initialized to the MTU of the attached NetDevice (if any)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Rate</b>: Rate at which tokens enter the first bucket in bps or Bps.
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 1000000bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>PeakRate</b>: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 0bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 64</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InternalQueueList</b>: The list of internal queues.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Queue<QueueDiscItem>></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketFilterList</b>: The list of packet filters.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PacketFilter></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueDiscClassList</b>: The list of queue disc classes.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDiscClass></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TokensInFirstBucket</b>: Number of First Bucket Tokens in bytes<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>TokensInSecondBucket</b>: Number of Second Bucket Tokens in bytes<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueDisc</h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc<br>%Callback signature: ns3::QueueDiscItem::TracedCallback
</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 1008 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpBic

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FastConvergence</b>: Turn on/off fast convergence.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Beta</b>: Beta for multiplicative decrease
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 0.8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxIncr</b>: Limit on increment allowed during binary search
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LowWnd</b>: Threshold window size (in segments) for engaging BIC response
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 14</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SmoothPart</b>: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BinarySearchCoefficient</b>: Inverse of the coefficient for the binary search. Default 4, as in Linux
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 2:255</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpClassicRecovery

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpCongestionOps

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHighSpeed

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHtcp

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>DefaultBackoff</b>: The default AIMD backoff factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ThroughputRatio</b>: Threshold value for updating beta
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DeltaL</b>: Delta_L parameter in increase function
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpHybla

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RRTT</b>: Reference RTT
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +50000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rho</b>: Rho parameter of Hybla<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpIllinois

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AlphaMin</b>: Minimum alpha threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AlphaMax</b>: Maximum alpha threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AlphaBase</b>: Alpha base threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BetaMin</b>: Minimum beta threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BetaMax</b>: Maximum beta threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BetaBase</b>: Beta base threshold
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WinThresh</b>: Window threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Theta</b>: Theta threshold
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpL4Protocol

<h3>Config Paths</h3>

ns3::TcpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RttEstimatorType</b>: Type of RttEstimator objects.
  <ul>
    <li>Set with class:  \ref TypeIdValue</li>
    <li>Underlying type:  \ref TypeId</li>
    <li>Initial value: ns3::RttMeanDeviation</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SocketType</b>: Socket type of TCP objects.
  <ul>
    <li>Set with class:  \ref TypeIdValue</li>
    <li>Underlying type:  \ref TypeId</li>
    <li>Initial value: ns3::TcpNewReno</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RecoveryType</b>: Recovery type of TCP objects.
  <ul>
    <li>Set with class:  \ref TypeIdValue</li>
    <li>Underlying type:  \ref TypeId</li>
    <li>Initial value: ns3::TcpClassicRecovery</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SocketList</b>: The list of sockets associated to this protocol.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpSocketBase></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLedbat

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>TargetDelay</b>: Targeted Queue Delay
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +100000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BaseHistoryLen</b>: Number of Base delay samples
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NoiseFilterLen</b>: Number of Current delay samples
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Gain</b>: Offset Gain
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SSParam</b>: Possibility of Slow Start
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: yes</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MinCwnd</b>: Minimum cWnd for Ledbat
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpLp

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpNewReno

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOption

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionEnd

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionMSS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionNOP

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionSack

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionSackPermitted

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionTS

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionUnknown

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpOptionWinScale

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpPrrRecovery

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>ReductionBound</b>: Type of Reduction Bound
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: SSRB</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRecoveryOps

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpRxBuffer

<h3>Config Paths</h3>

ns3::TcpRxBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/RxBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>NextRxSequence</b>: Next sequence number expected (RCV.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpScalable

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>AIFactor</b>: Additive Increase Factor
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MDFactor</b>: Multiplicative Decrease Factor
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.125</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +6000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketBase

<h3>Config Paths</h3>

ns3::TcpSocketBase is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 120</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxWindowSize</b>: Max size of advertised window
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref CallbackValue</li>
    <li>Underlying type:  \ref Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref CallbackValue</li>
    <li>Underlying type:  \ref Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WindowScaling</b>: Enable or disable Window Scaling option
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sack</b>: Enable or disable Sack option
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Timestamp</b>: Enable or disable Timestamp option
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinRto</b>: Minimum retransmit timeout value
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxBuffer</b>: TCP Tx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpTxBuffer></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>RxBuffer</b>: TCP Rx buffer
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::TcpRxBuffer></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>ReTxThreshold</b>: Threshold for fast retransmit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LimitedTransmit</b>: Enable limited transmit
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EcnMode</b>: Determines the mode of ECN
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: NoEcn</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::TcpSocket</h3>
<ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4294967295</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DataRetries</b>: Number of data retransmission attempts
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 6</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +6000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RTO</b>: Retransmission timeout<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>State</b>: TCP state<br>%Callback signature: ns3::TcpStatesTracedValueCallback
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TcpSocketState::TcpCongStatesTracedValueCallback
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TcpSocketState::EcnStatesTracedValueCallback
</li>
<li><b>AdvWND</b>: Advertised Window Size<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>RWND</b>: Remote side's flow control window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>HighestRxAck</b>: Highest ack received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>Tx</b>: Send tcp packet to IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol<br>%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback
</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE <br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
</ul>
<b>Size</b> of this type is 1080 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketFactory

<h3>Config Paths</h3>

ns3::TcpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpSocketState

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>EnablePacing</b>: Enable Pacing
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPacingRate</b>: Set Max Pacing Rate
  <ul>
    <li>Set with class:  \ref DataRateValue</li>
    <li>Underlying type:  \ref DataRate</li>
    <li>Initial value: 4000000000bps</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>CongestionWindow</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's inflated congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>CongState</b>: TCP Congestion machine state<br>%Callback signature: ns3::TracedValueCallback::TcpCongState
</li>
<li><b>EcnState</b>: Trace ECN state change of socket<br>%Callback signature: ns3::TracedValueCallback::EcnState
</li>
<li><b>HighestSequence</b>: Highest sequence number received from peer<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)<br>%Callback signature: ns3::TracedValueCallback::SequenceNumber32
</li>
<li><b>BytesInFlight</b>: The TCP connection's congestion window<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>RTT</b>: Last RTT sample<br>%Callback signature: ns3::TracedValueCallback::Time
</li>
</ul>
<b>Size</b> of this type is 304 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpTxBuffer

<h3>Config Paths</h3>

ns3::TcpTxBuffer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/TxBuffer"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>UnackSequence</b>: First unacknowledged sequence number (SND.UNA)<br>%Callback signature: ns3::SequenceNumber32TracedValueCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpVegas

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Lower bound of packets in network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Beta</b>: Upper bound of packets in network
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Gamma</b>: Limit on increase
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpVeno

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Beta</b>: Threshold for congestion detection
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpWestwood

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>FilterType</b>: Use this to choose no filter or Tustin's approximation filter
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Tustin</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ProtocolType</b>: Use this to let the code run as Westwood or WestwoodPlus
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Westwood</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>EstimatedBW</b>: The estimated bandwidth<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TcpYeah

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: Maximum backlog allowed at the bottleneck queue
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Gamma</b>: Fraction of queue to be removed per RTT
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Delta</b>: Log minimum fraction of cwnd to be removed on loss
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 3</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Epsilon</b>: Log maximum fraction to be removed on early decongestion
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: Maximum delta from base
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rho</b>: Minimum # of consecutive RTT to consider competition on loss
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 16</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Zeta</b>: Minimum # of state switches to reset m_renoCount
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StcpAiFactor</b>: STCP additive increase factor
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TdBetFfMacScheduler

<h3>Config Paths</h3>

ns3::TdBetFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TdMtFfMacScheduler

<h3>Config Paths</h3>

ns3::TdMtFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TdTbfqFfMacScheduler

<h3>Config Paths</h3>

ns3::TdTbfqFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -625000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 625000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1368 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpClient

<h3>Config Paths</h3>

ns3::ThreeGppHttpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. timing and HTTP request size.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ThreeGppHttpVariables></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteServerAddress</b>: The address of the destination server.
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteServerPort</b>: The destination port of the outbound packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionEstablished</b>: Connection to the destination web server has been established.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>ConnectionClosed</b>: Connection to the destination web server is closed.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>Tx</b>: General trace for sending a packet of any kind.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxMainObjectRequest</b>: Sent a request for a main object.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxEmbeddedObjectRequest</b>: Sent a request for an embedded object.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxMainObjectPacket</b>: A packet of main object has been received.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxMainObject</b>: Received a whole main object. Header is included.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>RxEmbeddedObjectPacket</b>: A packet of embedded object has been received.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxEmbeddedObject</b>: Received a whole embedded object. Header is included.<br>%Callback signature: ns3::ThreeGppHttpClient::TracedCallback
</li>
<li><b>Rx</b>: General trace for receiving a packet of any kind.<br>%Callback signature: ns3::Packet::PacketAddressTracedCallback
</li>
<li><b>RxDelay</b>: General trace of delay for receiving a complete object.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>RxRtt</b>: General trace of round trip delay time for receiving a complete object.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.<br>%Callback signature: ns3::Application::StateTransitionCallback
</li>
</ul>
<b>Size</b> of this type is 472 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpServer

<h3>Config Paths</h3>

ns3::ThreeGppHttpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. processing and object generation delays.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ThreeGppHttpVariables></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LocalAddress</b>: The local address of the server, i.e., the address on which to bind the Rx socket.
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LocalPort</b>: Port on which the application listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 80</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mtu</b>: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>ConnectionEstablished</b>: Connection to a remote web client has been established.<br>%Callback signature: ns3::HttpServer::ConnectionEstablishedCallback
</li>
<li><b>MainObject</b>: A main object has been generated.<br>%Callback signature: ns3::HttpServer::HttpObjectCallback
</li>
<li><b>EmbeddedObject</b>: An embedded object has been generated.<br>%Callback signature: ns3::HttpServer::HttpObjectCallback
</li>
<li><b>Tx</b>: A packet has been sent.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: A packet has been received.<br>%Callback signature: ns3::Packet::PacketAddressTracedCallback
</li>
<li><b>RxDelay</b>: A packet has been received with delay information.<br>%Callback signature: ns3::Application::DelayAddressCallback
</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.<br>%Callback signature: ns3::Application::StateTransitionCallback
</li>
</ul>
<b>Size</b> of this type is 280 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeGppHttpVariables

<h3>Config Paths</h3>

ns3::ThreeGppHttpVariables is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient/Variables"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer/Variables"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RequestSize</b>: The constant size of HTTP request packet (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 328</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MainObjectGenerationDelay</b>: The constant time needed by HTTP server to generate a main object as a response.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MainObjectSizeMean</b>: The mean of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10710</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MainObjectSizeStdDev</b>: The standard deviation of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 25032</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MainObjectSizeMin</b>: The minimum value of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 22:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MainObjectSizeMax</b>: The maximum value of main object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2000000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EmbeddedObjectGenerationDelay</b>: The constant time needed by HTTP server to generate an embedded object as a response.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>EmbeddedObjectSizeMean</b>: The mean of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7758</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>EmbeddedObjectSizeStdDev</b>: The standard deviation of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 126168</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>EmbeddedObjectSizeMin</b>: The minimum value of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 22:4294967295</li>
    <li>Initial value: 50</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EmbeddedObjectSizeMax</b>: The maximum value of embedded object sizes (in bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2000000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NumOfEmbeddedObjectsMax</b>: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 55</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>NumOfEmbeddedObjectsShape</b>: The shape parameter of Pareto distribution for the number of embedded objects per web page.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>NumOfEmbeddedObjectsScale</b>: The scale parameter of Pareto distribution for the number of embedded objects per web page.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ReadingTimeMean</b>: The mean of reading time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +30000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>ParsingTimeMean</b>: The mean of parsing time.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +130000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>LowMtuSize</b>: The lower MTU size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 536</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HighMtuSize</b>: The higher MTU size.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1460</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HighMtuProbability</b>: The probability that higher MTU size is used.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0.76</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ThreeLogDistancePropagationLossModel

<h3>Config Paths</h3>

ns3::ThreeLogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Distance0</b>: Beginning of the first (near) distance field
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Distance1</b>: Beginning of the second (middle) distance field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 200</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Distance2</b>: Beginning of the third (far) distance field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Exponent0</b>: The exponent for the first field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.9</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Exponent1</b>: The exponent for the second field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Exponent2</b>: The exponent for the third field.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ReferenceLoss</b>: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 46.6777</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimeProbe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The double valued (units of seconds) probe output<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TimeSeriesAdaptor

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The current simulation time versus the current value converted to a double<br>%Callback signature: ns3::TimeSeriesAdaptor::OutputTracedCallback
</li>
</ul>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TopologyReader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TraceFadingLossModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>TraceFilename</b>: Name of file to load a trace from.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TraceLength</b>: The total length of the fading trace (default value 10 s.)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>SamplesNum</b>: The number of samples the trace is made of (default 10000)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>WindowSize</b>: The size of the window for the fading trace (default value 0.5 s.)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RbNum</b>: The number of RB the trace is made of (default 100)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RngStreamSetSize</b>: The number of RNG streams reserved for the fading model. The maximum number of streams that are needed for an LTE FDD scenario is 2 * numUEs * numeNBs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint64_t 0:18446744073709551615</li>
    <li>Initial value: 200000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 248 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TrafficControlLayer

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RootQueueDiscList</b>: The list of root queue discs associated to this Traffic Control layer.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::QueueDisc></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 112 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Trailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TriangularRandomVariable

<h3>Config Paths</h3>

ns3::TriangularRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::TriangularRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mean</b>: The mean value for the triangular distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TtaFfMacScheduler

<h3>Config Paths</h3>

ns3::TtaFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::FfMacScheduler</h3>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: ALL_UL_CQI</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 1344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TvSpectrumTransmitter

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>TvType</b>: The type of TV transmitter/modulation to be used.
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: 8vsb</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StartFrequency</b>: The lower end frequency (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 5e+08</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelBandwidth</b>: The bandwidth (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 6e+06</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasePsd</b>: The base power spectral density (in dBm/Hz) of the TV transmitter's transmitted spectrum. Base PSD is the maximum PSD of the spectrum excluding pilots. For analog and COFDM transmitters this is the maximum PSD, but for 8-VSB transmitters this is the maximum PSD of the main signal spectrum (flat-top segment) since the pilot actually has the maximum PSD overall.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antenna</b>: The AntennaModel to be used. Allows classes inherited from ns3::AntennaModel. Defaults to ns3::IsotropicAntennaModel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::AntennaModel></li>
    <li>Initial value: ns3::IsotropicAntennaModel</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StartingTime</b>: The time point after the simulation begins in which the TV transmitter will begin transmitting.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TransmitDuration</b>: The duration of time that the TV transmitter will transmit for.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::TwoRayGroundPropagationLossModel

<h3>Config Paths</h3>

ns3::TwoRayGroundPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 5.15e+09</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SystemLoss</b>: The system loss
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m)
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HeightAboveZ</b>: The height of the antenna (m) above the node's Z coordinate
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Txop

<h3>Config Paths</h3>

ns3::Txop is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/Txop"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MinCw</b>: The minimum value of the contention window.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 15</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxCw</b>: The maximum value of the contention window.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Aifsn</b>: The AIFSN: the default value conforms to non-QOS.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxopLimit</b>: The TXOP limit: the default value conforms to non-QoS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Queue</b>: The WifiMacQueue object
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiMacQueue></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 232 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanChannel

<h3>Config Paths</h3>

ns3::UanChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PropagationModel</b>: A pointer to the propagation model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPropModel></li>
    <li>Initial value: ns3::UanPropModelIdeal</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NoiseModel</b>: A pointer to the model of the channel ambient noise.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanNoiseModel></li>
    <li>Initial value: ns3::UanNoiseModelDefault</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderCommon

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcAck

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcCts

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcCtsGlobal

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcData

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 24 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanHeaderRcRts

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMac

<h3>Config Paths</h3>

ns3::UanMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacAloha

<h3>Config Paths</h3>

ns3::UanMacAloha is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacAloha"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacCw

<h3>Config Paths</h3>

ns3::UanMacCw is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacCw"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CW</b>: The MAC parameter CW.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SlotTime</b>: Time slot duration for MAC backoff.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +20000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Enqueue</b>: A packet arrived at the MAC for transmission.<br>%Callback signature: ns3::UanMacCw::QueueTracedCallback
</li>
<li><b>Dequeue</b>: A was passed down to the PHY from the MAC.<br>%Callback signature: ns3::UanMacCw::QueueTracedCallback
</li>
<li><b>RX</b>: A packet was destined for this MAC and was received.<br>%Callback signature: ns3::UanMac::PacketModeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 248 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacRc

<h3>Config Paths</h3>

ns3::UanMacRc is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacRc"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RetryRate</b>: Number of retry attempts per second (of RTS/GWPING).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.2</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxFrames</b>: Maximum number of frames to include in a single RTS.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>QueueLimit</b>: Maximum packets to queue at MAC.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SIFS</b>: Spacing to give between frames (this should match gateway).
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NumberOfRates</b>: Number of rate divisions supported by each PHY.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RetryStep</b>: Retry rate increment.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropDelay</b>: Maximum possible propagation delay to gateway.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Enqueue</b>: A  (data) packet arrived at MAC for transmission.<br>%Callback signature: ns3::UanMacRc::QueueTracedCallback
</li>
<li><b>Dequeue</b>: A  (data) packet was passed down to PHY from MAC.<br>%Callback signature: ns3::UanMacRc::QueueTracedCallback
</li>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.<br>%Callback signature: ns3::UanMac::PacketModeTracedCallback
</li>
</ul>
<b>Size</b> of this type is 320 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanMacRcGw

<h3>Config Paths</h3>

ns3::UanMacRcGw is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacRcGw"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxReservations</b>: Maximum number of reservations to accept per cycle.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NumberOfRates</b>: Number of rates per Phy layer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1023</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropDelay</b>: Maximum propagation delay between gateway and non-gateway nodes.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SIFS</b>: Spacing between frames to account for timing error and processing delay.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +200000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NumberOfNodes</b>: Number of non-gateway nodes in this gateway's neighborhood.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RetryStep</b>: Retry rate increment.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.01</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TotalRate</b>: Total available channel rate in bps (for a single channel, without splitting reservation channel).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4096</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RateStep</b>: Increments available for rate assignment in bps.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameSize</b>: Size of data frames in bytes.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.<br>%Callback signature: ns3::UanMac::PacketModeTracedCallback
</li>
<li><b>Cycle</b>: Trace cycle statistics.<br>%Callback signature: ns3::UanMacRcGw::CycleCallback
</li>
</ul>
<b>Size</b> of this type is 400 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanNetDevice

<h3>Config Paths</h3>

ns3::UanNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mac</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Transducer</b>: The Transducer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanTransducer></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: Received payload from the MAC layer.<br>%Callback signature: ns3::UanNetDevice::RxTxTracedCallback
</li>
<li><b>Tx</b>: Send payload to the MAC layer.<br>%Callback signature: ns3::UanNetDevice::RxTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 144 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanNoiseModel

<h3>Config Paths</h3>

ns3::UanNoiseModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/NoiseModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/NoiseModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/NoiseModel"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/NoiseModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanNoiseModelDefault

<h3>Config Paths</h3>

ns3::UanNoiseModelDefault is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Wind</b>: Wind speed in m/s.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Shipping</b>: Shipping contribution to noise between 0 and 1.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double 0:1</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 48 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhy

<h3>Config Paths</h3>

ns3::UanPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 128 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinr

<h3>Config Paths</h3>

ns3::UanPhyCalcSinr is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinrDefault

<h3>Config Paths</h3>

ns3::UanPhyCalcSinrDefault is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrDefault"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinrDual

<h3>Config Paths</h3>

ns3::UanPhyCalcSinrDual is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrDual"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrDual"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrDual"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyCalcSinrFhFsk

<h3>Config Paths</h3>

ns3::UanPhyCalcSinrFhFsk is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrFhFsk"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrFhFsk"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrFhFsk"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NumberOfHops</b>: Number of frequencies in hopping pattern.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 13</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyDual

<h3>Config Paths</h3>

ns3::UanPhyDual is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CcaThresholdPhy1</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy1.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CcaThresholdPhy2</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy2.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerPhy1</b>: Transmission output power in dB of Phy1.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 190</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerPhy2</b>: Transmission output power in dB of Phy2.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 190</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SupportedModesPhy1</b>: List of modes supported by Phy1.
  <ul>
    <li>Set with class:  \ref UanModesListValue</li>
    <li>Underlying type:  \ref UanModesList</li>
    <li>Initial value: 3|0|1|1|</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SupportedModesPhy2</b>: List of modes supported by Phy2.
  <ul>
    <li>Set with class:  \ref UanModesListValue</li>
    <li>Underlying type:  \ref UanModesList</li>
    <li>Initial value: 3|0|1|1|</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PerModelPhy1</b>: Functor to calculate PER based on SINR and TxMode for Phy1.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyPer></li>
    <li>Initial value: ns3::UanPhyPerGenDefault</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PerModelPhy2</b>: Functor to calculate PER based on SINR and TxMode for Phy2.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyPer></li>
    <li>Initial value: ns3::UanPhyPerGenDefault</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SinrModelPhy1</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy1.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyCalcSinr></li>
    <li>Initial value: ns3::UanPhyCalcSinrDual</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SinrModelPhy2</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy2.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyCalcSinr></li>
    <li>Initial value: ns3::UanPhyCalcSinrDual</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RxOk</b>: A packet was received successfully.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>RxError</b>: A packet was received unsuccessfully.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>Tx</b>: Packet transmission beginning.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::UanPhy</h3>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 208 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyGen

<h3>Config Paths</h3>

ns3::UanPhyGen is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CcaThreshold</b>: Aggregate energy of incoming signals to move to CCA Busy state dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxThreshold</b>: Required SNR for signal acquisition in dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 10</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPower</b>: Transmission output power in dB.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 190</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SupportedModes</b>: List of modes supported by this PHY.
  <ul>
    <li>Set with class:  \ref UanModesListValue</li>
    <li>Underlying type:  \ref UanModesList</li>
    <li>Initial value: 3|0|1|1|</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PerModel</b>: Functor to calculate PER based on SINR and TxMode.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyPer></li>
    <li>Initial value: ns3::UanPhyPerGenDefault</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SinrModel</b>: Functor to calculate SINR based on pkt arrivals and modes.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UanPhyCalcSinr></li>
    <li>Initial value: ns3::UanPhyCalcSinrDefault</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>RxOk</b>: A packet was received successfully.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>RxError</b>: A packet was received unsuccessfully.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
<li><b>Tx</b>: Packet transmission beginning.<br>%Callback signature: ns3::UanPhy::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::UanPhy</h3>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 464 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPer

<h3>Config Paths</h3>

ns3::UanPhyPer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPerCommonModes

<h3>Config Paths</h3>

ns3::UanPhyPerCommonModes is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerCommonModes"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerCommonModes"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerCommonModes"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPerGenDefault

<h3>Config Paths</h3>

ns3::UanPhyPerGenDefault is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerGenDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerGenDefault"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerGenDefault"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Threshold</b>: SINR cutoff for good packet reception.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 8</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPhyPerUmodem

<h3>Config Paths</h3>

ns3::UanPhyPerUmodem is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerUmodem"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerUmodem"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerUmodem"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPropModel

<h3>Config Paths</h3>

ns3::UanPropModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/PropagationModel"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/PropagationModel"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPropModelIdeal

<h3>Config Paths</h3>

ns3::UanPropModelIdeal is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel/$ns3::UanPropModelIdeal"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanPropModelThorp

<h3>Config Paths</h3>

ns3::UanPropModelThorp is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel/$ns3::UanPropModelThorp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"</li>
<li>"/ChannelList/[i]/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SpreadCoef</b>: Spreading coefficient used in calculation of Thorp's approximation.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanTransducer

<h3>Config Paths</h3>

ns3::UanTransducer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Transducer"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UanTransducerHd

<h3>Config Paths</h3>

ns3::UanTransducerHd is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Transducer/$ns3::UanTransducerHd"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RxGainDb</b>: Gain in Db added to incoming signal at receiver.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Ucd

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpClient

<h3>Config Paths</h3>

ns3::UdpClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSize</b>: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 12:65507</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoClient

<h3>Config Paths</h3>

ns3::UdpEchoClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSize</b>: Size of echo data in outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoClient1

<h3>Config Paths</h3>

ns3::UdpEchoClient1 is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoClient1"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: The time to wait between packets
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketSize</b>: Size of echo data in outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Tx</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoServer

<h3>Config Paths</h3>

ns3::UdpEchoServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 9</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpEchoServer1

<h3>Config Paths</h3>

ns3::UdpEchoServer1 is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoServer1"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 9</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 184 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpL4Protocol

<h3>Config Paths</h3>

ns3::UdpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpL4Protocol"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>SocketList</b>: The list of sockets associated to this protocol.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::UdpSocketImpl></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::IpL4Protocol</h3>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t 0:255</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 96 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpServer

<h3>Config Paths</h3>

ns3::UdpServer is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpServer"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PacketWindowSize</b>: The size of the window used to compute the packet loss. This value should be a multiple of 8.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 8:256</li>
    <li>Initial value: 32</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: A packet has been received<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>RxWithAddresses</b>: A packet has been received<br>%Callback signature: ns3::Packet::TwoAddressTracedCallback
</li>
</ul>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocket

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocketFactory

<h3>Config Paths</h3>

ns3::UdpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpSocketFactory"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpSocketImpl

<h3>Config Paths</h3>

ns3::UdpSocketImpl is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::UdpL4Protocol/SocketList/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.
  <ul>
    <li>Set with class:  \ref CallbackValue</li>
    <li>Underlying type:  \ref Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.
  <ul>
    <li>Set with class:  \ref CallbackValue</li>
    <li>Underlying type:  \ref Callback</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::UdpSocket</h3>
<ul>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 131072</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int32_t -2147483648:2147483647</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Drop</b>: Drop UDP packet due to receive buffer overflow<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 352 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UdpTraceClient

<h3>Config Paths</h3>

ns3::UdpTraceClient is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::UdpTraceClient"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets
  <ul>
    <li>Set with class:  \ref AddressValue</li>
    <li>Underlying type:  \ref Address</li>
    <li>Initial value: 00-00-00</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemotePort</b>: The destination port of the outbound packets
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 100</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPacketSize</b>: The maximum size of a packet (including the SeqTsHeader, 12 bytes).
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TraceFilename</b>: Name of file to load a trace from. By default, uses a hardcoded trace.
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: </li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>TraceLoop</b>: Loops through the trace file, starting again once it is over.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 200 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UeManager

<h3>Config Paths</h3>

ns3::UeManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>DataRadioBearerMap</b>: List of UE DataRadioBearerInfo by DRBID.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteDataRadioBearerInfo></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::LteSignalingRadioBearerInfo></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>StateTransition</b>: fired upon every UE state transition seen by the UeManager at the eNB RRC<br>%Callback signature: ns3::UeManager::StateTracedCallback
</li>
</ul>
<b>Size</b> of this type is 344 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger16Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint16_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint16
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger32Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint32_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::Uinteger8Probe

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Probe</h3>
<ul>
<li><b>Start</b>: Time data collection starts
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::DataCollectionObject</h3>
<ul>
<li><b>Name</b>: Object's name
  <ul>
    <li>Set with class:  \ref StringValue</li>
    <li>Underlying type: </li>
    <li>Initial value: unnamed</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Enabled</b>: Object's enabled status
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: true</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Output</b>: The uint8_t that serves as output for this probe<br>%Callback signature: ns3::TracedValueCallback::Uint8
</li>
</ul>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UlMap

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UniformDiscPositionAllocator

<h3>Config Paths</h3>

ns3::UniformDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::UniformDiscPositionAllocator"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>rho</b>: The radius of the disc
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>X</b>: The x coordinate of the center of the  disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Y</b>: The y coordinate of the center of the  disc.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 64 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UniformRandomVariable

<h3>Config Paths</h3>

ns3::UniformRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac/BeaconJitter"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::ApWifiMac/BeaconJitter"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac/BeaconJitter"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::ApWifiMac/BeaconJitter"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::Radvd/AdvertisementJitter"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::UniformRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::aodv::RoutingProtocol/UniformRv"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkScheduler

<h3>Config Paths</h3>

ns3::UplinkScheduler is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 88 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkSchedulerMBQoS

<h3>Config Paths</h3>

ns3::UplinkSchedulerMBQoS is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerMBQoS"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerMBQoS"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>WindowInterval</b>: The time to wait to reset window
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 160 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkSchedulerRtps

<h3>Config Paths</h3>

ns3::UplinkSchedulerRtps is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerRtps"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerRtps"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::UplinkSchedulerSimple

<h3>Config Paths</h3>

ns3::UplinkSchedulerSimple is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerSimple"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerSimple"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 104 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::V4Ping

<h3>Config Paths</h3>

ns3::V4Ping is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::V4Ping"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Remote</b>: The address of the machine we want to ping.
  <ul>
    <li>Set with class:  \ref Ipv4AddressValue</li>
    <li>Underlying type:  \ref Ipv4Address</li>
    <li>Initial value: 102.102.102.102</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Verbose</b>: Produce usual output.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Interval</b>: Wait  interval  seconds between sending each packet.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Size</b>: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 16:4294967295</li>
    <li>Initial value: 56</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Application</h3>
<ul>
<li><b>StartTime</b>: Time at which the application will start
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>StopTime</b>: Time at which the application will stop
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +0.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rtt</b>: The rtt calculated by the ping.<br>%Callback signature: ns3::Time::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 456 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::VendorSpecificActionHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::VirtualNetDevice

<h3>Config Paths</h3>

ns3::VirtualNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::VirtualNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 1500</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::VsaManager

<h3>Config Paths</h3>

ns3::VsaManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/VsaManager"</li>
</ul>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WallClockSynchronizer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WaveformGenerator

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>Period</b>: the period (=1/frequency)
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +1000000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DutyCycle</b>: the duty cycle of the generator, i.e., the fraction of the period that is occupied by a signal
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.5</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TxStart</b>: Trace fired when a new transmission is started<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WaveMacLow

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 984 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WaveNetDevice

<h3>Config Paths</h3>

ns3::WaveNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:2296</li>
    <li>Initial value: 2296</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Channel</b>: The channel attached to this device
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>PhyEntities</b>: The PHY entities attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhy></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MacEntities</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::ObjectPtrContainerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::OcbWifiMac></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelScheduler</b>: The channel scheduler attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelScheduler></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelManager</b>: The channel manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelCoordinator</b>: The channel coordinator attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ChannelCoordinator></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>VsaManager</b>: The VSA manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::VsaManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WaypointMobilityModel

<h3>Config Paths</h3>

ns3::WaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::WaypointMobilityModel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>NextWaypoint</b>: The next waypoint used to determine position.
  <ul>
    <li>Set with class:  \ref WaypointValue</li>
    <li>Underlying type:  \ref Waypoint</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>WaypointsLeft</b>: The number of waypoints remaining.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>LazyNotify</b>: Only call NotifyCourseChange when position is calculated.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialPositionIsWaypoint</b>: Calling SetPosition with no waypoints creates a waypoint.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>Position</b>: The current position of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Velocity</b>: The current velocity of the mobility model.
  <ul>
    <li>Set with class:  \ref Vector3DValue</li>
    <li>Underlying type:  \ref Vector3D</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::MobilityModel</h3>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed<br>%Callback signature: ns3::MobilityModel::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WeibullRandomVariable

<h3>Config Paths</h3>

ns3::WeibullRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::WeibullRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Scale</b>: The scale parameter for the Weibull distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Shape</b>: The shape parameter for the Weibull distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiInformationElementVector

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 40 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMac

<h3>Config Paths</h3>

ns3::WifiMac is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +75000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +281000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +107000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Sifs</b>: The value of the SIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +16000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +60000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Slot</b>: The duration of a Slot.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +9000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Pifs</b>: The value of the PIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +25000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Rifs</b>: The value of the RIFS constant.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +2000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +3333.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>Ssid</b>: The ssid we want to belong to.
  <ul>
    <li>Set with class:  \ref SsidValue</li>
    <li>Underlying type:  \ref Ssid</li>
    <li>Initial value: default</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 120 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacQueue

<h3>Config Paths</h3>

ns3::WifiMacQueue is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/Txop/Queue"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxDelay</b>: If a packet stays longer than this delay in the queue, it is dropped.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +500000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>DropPolicy</b>: Upon enqueue with full queue, drop oldest (DropOldest) or newest (DropNewest) packet
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: DropNewest</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>MaxSize</b>: The max queue size
  <ul>
    <li>Set with class:  \ref QueueSizeValue</li>
    <li>Underlying type:  \ref QueueSize</li>
    <li>Initial value: 100p</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::Queue<WifiMacQueueItem></h3>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.<br>%Callback signature: ns3::WifiMacQueueItem::TracedCallback
</li>
</ul>
<h3>TraceSources defined in parent class ns3::QueueBase</h3>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue<br>%Callback signature: ns3::TracedValueCallback::Uint32
</li>
</ul>
<b>Size</b> of this type is 256 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiMacTrailer

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 8 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiNetDevice

<h3>Config Paths</h3>

ns3::WifiNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 1:2296</li>
    <li>Initial value: 2296</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Channel</b>: The channel attached to this device
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::Channel></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Mac</b>: The MAC layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiMac></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RemoteStationManager</b>: The station manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiRemoteStationManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 152 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiPhy

<h3>Config Paths</h3>

ns3::WifiPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Frequency</b>: The operating center frequency (MHz)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelWidth</b>: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 5:160</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelNumber</b>: If set to non-zero defined value, will control Frequency and ChannelWidth assignment
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:196</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnergyDetectionThreshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -96</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>CcaMode1Threshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -99</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerEnd</b>: Maximum available transmission level (dbm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerStart</b>: Minimum available transmission level (dbm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>State</b>: The state of the PHY layer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhyStateHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +250000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antennas</b>: The number of antennas on the device.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShortGuardEnabled</b>: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GuardInterval</b>: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time +400.0ns:+3200.0ns</li>
    <li>Initial value: +3200.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LdpcEnabled</b>: Whether or not LDPC is enabled (not supported yet!).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>STBCEnabled</b>: Whether or not STBC is enabled (not supported yet!).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GreenfieldEnabled</b>: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FrameCaptureModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames<br>%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback
</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted<br>%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 592 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiPhyStateHelper

<h3>Config Paths</h3>

ns3::WifiPhyStateHelper is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/State"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/State"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>TraceSources</h3>
<ul>
<li><b>State</b>: The state of the PHY layer<br>%Callback signature: ns3::WifiPhyStateHelper::StateTracedCallback
</li>
<li><b>RxOk</b>: A packet has been received successfully.<br>%Callback signature: ns3::WifiPhyStateHelper::RxOkTracedCallback
</li>
<li><b>RxError</b>: A packet has been received unsuccessfully.<br>%Callback signature: ns3::WifiPhyStateHelper::RxEndErrorTracedCallback
</li>
<li><b>Tx</b>: Packet transmission is starting.<br>%Callback signature: ns3::WifiPhyStateHelper::TxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 224 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiRadioEnergyModel

Introspection did not find any typical Config paths.<br>
<h3>Attributes</h3>
<ul>
<li><b>IdleCurrentA</b>: The default radio Idle current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>CcaBusyCurrentA</b>: The default radio CCA Busy State current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxCurrentA</b>: The radio Tx current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.38</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxCurrentA</b>: The radio Rx current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.313</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SwitchingCurrentA</b>: The default radio Channel Switch current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.273</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>SleepCurrentA</b>: The radio Sleep current in Ampere.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0.033</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxCurrentModel</b>: A pointer to the attached tx current model.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiTxCurrentModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.<br>%Callback signature: ns3::TracedValueCallback::Double
</li>
</ul>
<b>Size</b> of this type is 192 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiRemoteStationManager

<h3>Config Paths</h3>

ns3::WifiRemoteStationManager is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 4</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 65535</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.
  <ul>
    <li>Set with class:  \ref WifiModeValue</li>
    <li>Underlying type:  \ref WifiMode</li>
    <li>Initial value: Invalid-WifiMode</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Initial value: Cts-To-Self</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts<br>%Callback signature: ns3::Mac48Address::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 264 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiSpectrumPhyInterface

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 56 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WifiTxCurrentModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxChannel

<h3>Config Paths</h3>

ns3::WimaxChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Channel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::WimaxChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::WimaxChannel"</li>
<li>"/ChannelList/[i]/$ns3::WimaxChannel"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxConnection

<h3>Config Paths</h3>

ns3::WimaxConnection is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/InitialRangingConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BroadcastConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/BasicConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/PrimaryConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/BasicConnection"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/PrimaryConnection"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Type</b>: Connection type
  <ul>
    <li>Set with class:  \ref ns3::EnumValue</li>
    <li>Underlying type: </li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
<li><b>TxQueue</b>: Transmit queue
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxMacQueue></li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxMacQueue

<h3>Config Paths</h3>

ns3::WimaxMacQueue is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/InitialRangingConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BroadcastConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/BasicConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/PrimaryConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/BasicConnection/TxQueue"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/PrimaryConnection/TxQueue"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>MaxSize</b>: Maximum size
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1024</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Enqueue</b>: Enqueue trace<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Dequeue</b>: Dequeue trace<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>Drop</b>: Drop trace<br>%Callback signature: ns3::Packet::TracedCallback
</li>
</ul>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxMacToMacHeader

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 16 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxNetDevice

<h3>Config Paths</h3>

ns3::WimaxNetDevice is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:1500</li>
    <li>Initial value: 1400</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Phy</b>: The PHY layer attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxPhy></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Channel</b>: The channel attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RTG</b>: receive/transmit transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TTG</b>: transmit/receive transition gap.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:120</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ConnectionManager</b>: The connection manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::ConnectionManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BurstProfileManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::BandwidthManager></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>InitialRangingConnection</b>: Initial ranging connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>BroadcastConnection</b>: Broadcast connection
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxConnection></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>TraceSources</h3>
<ul>
<li><b>Rx</b>: Receive trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
<li><b>Tx</b>: Transmit trace<br>%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 376 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::WimaxPhy

<h3>Config Paths</h3>

ns3::WimaxPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Channel</b>: Wimax channel
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WimaxChannel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameDuration</b>: The frame duration in seconds.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +10000000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Frequency</b>: The central frequency in KHz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 1000000:11000000</li>
    <li>Initial value: 5000000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Bandwidth</b>: The channel bandwidth in Hz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 5000000:30000000</li>
    <li>Initial value: 10000000</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 176 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::YansErrorRateModel

Introspection did not find any typical Config paths.<br>
No Attributes are defined for this type.<br>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 32 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::YansWifiChannel

<h3>Config Paths</h3>

ns3::YansWifiChannel is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationLossModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>PropagationDelayModel</b>: A pointer to the propagation delay model attached to this channel.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::PropagationDelayModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::Channel</h3>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Flags: <span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::YansWifiPhy

<h3>Config Paths</h3>

ns3::YansWifiPhy is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/$ns3::YansWifiPhy"</li>
</ul>
No Attributes are defined for this type.<br>
<h3>Attributes defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>Frequency</b>: The operating center frequency (MHz)
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 0:65535</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelWidth</b>: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint16_t 5:160</li>
    <li>Initial value: 20</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelNumber</b>: If set to non-zero defined value, will control Frequency and ChannelWidth assignment
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:196</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>EnergyDetectionThreshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -96</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>CcaMode1Threshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: -99</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxGain</b>: Transmission gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxGain</b>: Reception gain (dB).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 0:255</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerEnd</b>: Maximum available transmission level (dbm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>TxPowerStart</b>: Minimum available transmission level (dbm).
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 16.0206</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 7</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span></li>
  </ul> 
<li><b>State</b>: The state of the PHY layer.
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::WifiPhyStateHelper></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time --9223372036854775808.0ns:+9223372036854775807.0ns</li>
    <li>Initial value: +250000.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antennas</b>: The number of antennas on the device.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::UintegerValue</li>
    <li>Underlying type: uint8_t 1:8</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShortGuardEnabled</b>: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GuardInterval</b>: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.
  <ul>
    <li>Set with class:  \ref ns3::TimeValue</li>
    <li>Underlying type:  \ref Time +400.0ns:+3200.0ns</li>
    <li>Initial value: +3200.0ns</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>LdpcEnabled</b>: Whether or not LDPC is enabled (not supported yet!).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>STBCEnabled</b>: Whether or not STBC is enabled (not supported yet!).
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>GreenfieldEnabled</b>: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model
  <ul>
    <li>Set with class:  \ref ns3::PointerValue</li>
    <li>Underlying type:  \ref ns3::Ptr<  \ref ns3::FrameCaptureModel></li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<h3>TraceSources defined in parent class ns3::WifiPhy</h3>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception<br>%Callback signature: ns3::Packet::TracedCallback
</li>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames<br>%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback
</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted<br>%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback
</li>
</ul>
<b>Size</b> of this type is 600 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ZetaRandomVariable

<h3>Config Paths</h3>

ns3::ZetaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZetaRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>Alpha</b>: The alpha value for the zeta distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 3.14</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 72 bytes (on a 64-bit architecture).
*/

/*!

\class ns3::ZipfRandomVariable

<h3>Config Paths</h3>

ns3::ZipfRandomVariable is accessible through the following paths with Config::Set and Config::Connect:
<ul>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZipfRandomVariable"</li>
<li>"/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"</li>
<li>"/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"</li>
</ul>
<h3>Attributes</h3>
<ul>
<li><b>N</b>: The n value for the Zipf distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: uint32_t 0:4294967295</li>
    <li>Initial value: 1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Alpha</b>: The alpha value for the Zipf distribution returned by this RNG stream.
  <ul>
    <li>Set with class:  \ref ns3::DoubleValue</li>
    <li>Underlying type: double -1.79769e+308:1.79769e+308</li>
    <li>Initial value: 0</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
<h3>Attributes defined in parent class ns3::RandomVariableStream</h3>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  <ul>
    <li>Set with class:  \ref ns3::IntegerValue</li>
    <li>Underlying type: int64_t -9223372036854775808:9223372036854775807</li>
    <li>Initial value: -1</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values
  <ul>
    <li>Set with class:  \ref BooleanValue</li>
    <li>Underlying type: bool</li>
    <li>Initial value: false</li>
    <li>Flags: <span class="mlabel">construct </span><span class="mlabel">write </span><span class="mlabel">read </span></li>
  </ul> 
</ul>
No TraceSources are defined for this type.<br>
<b>Size</b> of this type is 80 bytes (on a 64-bit architecture).
*/

/*!
\page AttributeList All Attributes

This is a list of all \ref attribute by class.  For more information see the \ref attribute section of this API documentation and the Attributes sections in the Tutorial and Manual.

<b>ns3::RandomVariableStream</b><br>
<ul>
<li><b>Stream</b>: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.</li>
<li><b>Antithetic</b>: Set this RNG stream to generate antithetic values</li>
</ul>
<b>ns3::UniformRandomVariable</b><br>
<ul>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.</li>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::ConstantRandomVariable</b><br>
<ul>
<li><b>Constant</b>: The constant value returned by this RNG stream.</li>
</ul>
<b>ns3::SequentialRandomVariable</b><br>
<ul>
<li><b>Min</b>: The first value of the sequence.</li>
<li><b>Max</b>: One more than the last value of the sequence.</li>
<li><b>Increment</b>: The sequence random variable increment.</li>
<li><b>Consecutive</b>: The number of times each member of the sequence is repeated.</li>
</ul>
<b>ns3::ExponentialRandomVariable</b><br>
<ul>
<li><b>Mean</b>: The mean of the values returned by this RNG stream.</li>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::ParetoRandomVariable</b><br>
<ul>
<li><b>Mean</b>: The mean parameter for the Pareto distribution returned by this RNG stream.</li>
<li><b>Scale</b>: The scale parameter for the Pareto distribution returned by this RNG stream.</li>
<li><b>Shape</b>: The shape parameter for the Pareto distribution returned by this RNG stream.</li>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream (if non-zero).</li>
</ul>
<b>ns3::WeibullRandomVariable</b><br>
<ul>
<li><b>Scale</b>: The scale parameter for the Weibull distribution returned by this RNG stream.</li>
<li><b>Shape</b>: The shape parameter for the Weibull distribution returned by this RNG stream.</li>
<li><b>Bound</b>: The upper bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::NormalRandomVariable</b><br>
<ul>
<li><b>Mean</b>: The mean value for the normal distribution returned by this RNG stream.</li>
<li><b>Variance</b>: The variance value for the normal distribution returned by this RNG stream.</li>
<li><b>Bound</b>: The bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::LogNormalRandomVariable</b><br>
<ul>
<li><b>Mu</b>: The mu value for the log-normal distribution returned by this RNG stream.</li>
<li><b>Sigma</b>: The sigma value for the log-normal distribution returned by this RNG stream.</li>
</ul>
<b>ns3::GammaRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the gamma distribution returned by this RNG stream.</li>
<li><b>Beta</b>: The beta value for the gamma distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ErlangRandomVariable</b><br>
<ul>
<li><b>K</b>: The k value for the Erlang distribution returned by this RNG stream.</li>
<li><b>Lambda</b>: The lambda value for the Erlang distribution returned by this RNG stream.</li>
</ul>
<b>ns3::TriangularRandomVariable</b><br>
<ul>
<li><b>Mean</b>: The mean value for the triangular distribution returned by this RNG stream.</li>
<li><b>Min</b>: The lower bound on the values returned by this RNG stream.</li>
<li><b>Max</b>: The upper bound on the values returned by this RNG stream.</li>
</ul>
<b>ns3::ZipfRandomVariable</b><br>
<ul>
<li><b>N</b>: The n value for the Zipf distribution returned by this RNG stream.</li>
<li><b>Alpha</b>: The alpha value for the Zipf distribution returned by this RNG stream.</li>
</ul>
<b>ns3::ZetaRandomVariable</b><br>
<ul>
<li><b>Alpha</b>: The alpha value for the zeta distribution returned by this RNG stream.</li>
</ul>
<b>ns3::RealtimeSimulatorImpl</b><br>
<ul>
<li><b>SynchronizationMode</b>: What to do if the simulation cannot keep up with real time.</li>
<li><b>HardLimit</b>: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)</li>
</ul>
<b>ns3::DataCollectionObject</b><br>
<ul>
<li><b>Name</b>: Object's name</li>
<li><b>Enabled</b>: Object's enabled status</li>
</ul>
<b>ns3::Probe</b><br>
<ul>
<li><b>Start</b>: Time data collection starts</li>
<li><b>Stop</b>: Time when data collection stops.  The special time value of 0 disables this attribute</li>
</ul>
<b>ns3::Application</b><br>
<ul>
<li><b>StartTime</b>: Time at which the application will start</li>
<li><b>StopTime</b>: Time at which the application will stop</li>
</ul>
<b>ns3::Channel</b><br>
<ul>
<li><b>Id</b>: The id (unique integer) of this Channel.</li>
</ul>
<b>ns3::ChannelListPriv</b><br>
<ul>
<li><b>ChannelList</b>: The list of all channels created during the simulation.</li>
</ul>
<b>ns3::Node</b><br>
<ul>
<li><b>DeviceList</b>: The list of devices associated to this Node.</li>
<li><b>ApplicationList</b>: The list of applications associated to this Node.</li>
<li><b>Id</b>: The id (unique integer) of this Node.</li>
<li><b>SystemId</b>: The systemId of this node: a unique integer used for parallel simulations.</li>
</ul>
<b>ns3::NodeListPriv</b><br>
<ul>
<li><b>NodeList</b>: The list of all nodes created during the simulation.</li>
</ul>
<b>ns3::QueueBase</b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::DynamicQueueLimits</b><br>
<ul>
<li><b>HoldTime</b>: The DQL algorithm hold time</li>
<li><b>MaxLimit</b>: Maximum limit</li>
<li><b>MinLimit</b>: Minimum limit</li>
</ul>
<b>ns3::SimpleChannel</b><br>
<ul>
<li><b>Delay</b>: Transmission delay through the channel</li>
</ul>
<b>ns3::ErrorModel</b><br>
<ul>
<li><b>IsEnabled</b>: Whether this ErrorModel is enabled or not.</li>
</ul>
<b>ns3::RateErrorModel</b><br>
<ul>
<li><b>ErrorUnit</b>: The error unit</li>
<li><b>ErrorRate</b>: The error rate.</li>
<li><b>RanVar</b>: The decision variable attached to this error model.</li>
</ul>
<b>ns3::BurstErrorModel</b><br>
<ul>
<li><b>ErrorRate</b>: The burst error event.</li>
<li><b>BurstStart</b>: The decision variable attached to this error model.</li>
<li><b>BurstSize</b>: The number of packets being corrupted at one drop.</li>
</ul>
<b>ns3::PacketSocket</b><br>
<ul>
<li><b>RcvBufSize</b>: PacketSocket maximum receive buffer size (bytes)</li>
</ul>
<b>ns3::PcapFileWrapper</b><br>
<ul>
<li><b>CaptureSize</b>: Maximum length of captured packets (cf. pcap snaplen)</li>
<li><b>NanosecMode</b>: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).</li>
</ul>
<b>ns3::SimpleNetDevice</b><br>
<ul>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>PointToPointMode</b>: The device is configured in Point to Point mode</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
<li><b>DataRate</b>: The default data rate for point to point links. Zero means infinite</li>
</ul>
<b>ns3::PacketSocketClient</b><br>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send (zero means infinite)</li>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>PacketSize</b>: Size of packets generated (bytes).</li>
<li><b>Priority</b>: Priority assigned to the packets generated.</li>
</ul>
<b>ns3::VirtualNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
</ul>
<b>ns3::FdNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>Start</b>: The simulation time at which to spin up the device thread.</li>
<li><b>Stop</b>: The simulation time at which to tear down the device thread.</li>
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.</li>
<li><b>RxQueueSize</b>: Maximum size of the read queue.  This value limits number of packets that have been read from the network into a memory buffer but have not yet been processed by the simulator.</li>
</ul>
<b>ns3::CsmaNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>EncapsulationMode</b>: The link-layer encapsulation type to use.</li>
<li><b>SendEnable</b>: Enable or disable the transmitter section of the device.</li>
<li><b>ReceiveEnable</b>: Enable or disable the receiver section of the device.</li>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
</ul>
<b>ns3::CsmaChannel</b><br>
<ul>
<li><b>DataRate</b>: The transmission data rate to be provided to devices connected to the channel</li>
<li><b>Delay</b>: Transmission delay through the channel</li>
</ul>
<b>ns3::ConfigStore</b><br>
<ul>
<li><b>Mode</b>: Configuration mode</li>
<li><b>Filename</b>: The file where the configuration should be saved to or loaded from.</li>
<li><b>FileFormat</b>: Type of file format</li>
</ul>
<b>ns3::BasicEnergySource</b><br>
<ul>
<li><b>BasicEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.</li>
<li><b>BasicEnergySupplyVoltageV</b>: Initial supply voltage for basic energy source.</li>
<li><b>BasicEnergyLowBatteryThreshold</b>: Low battery threshold for basic energy source.</li>
<li><b>BasicEnergyHighBatteryThreshold</b>: High battery threshold for basic energy source.</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
</ul>
<b>ns3::LiIonEnergySource</b><br>
<ul>
<li><b>LiIonEnergySourceInitialEnergyJ</b>: Initial energy stored in basic energy source.</li>
<li><b>LiIonEnergyLowBatteryThreshold</b>: Low battery threshold for LiIon energy source.</li>
<li><b>InitialCellVoltage</b>: Initial (maximum) voltage of the cell (fully charged).</li>
<li><b>NominalCellVoltage</b>: Nominal voltage of the cell.</li>
<li><b>ExpCellVoltage</b>: Cell voltage at the end of the exponential zone.</li>
<li><b>RatedCapacity</b>: Rated capacity of the cell.</li>
<li><b>NomCapacity</b>: Cell capacity at the end of the nominal zone.</li>
<li><b>ExpCapacity</b>: Cell Capacity at the end of the exponential zone.</li>
<li><b>InternalResistance</b>: Internal resistance of the cell</li>
<li><b>TypCurrent</b>: Typical discharge current used to fit the curves</li>
<li><b>ThresholdVoltage</b>: Minimum threshold voltage to consider the battery depleted.</li>
<li><b>PeriodicEnergyUpdateInterval</b>: Time between two consecutive periodic energy updates.</li>
</ul>
<b>ns3::RvBatteryModel</b><br>
<ul>
<li><b>RvBatteryModelPeriodicEnergyUpdateInterval</b>: RV battery model sampling interval.</li>
<li><b>RvBatteryModelLowBatteryThreshold</b>: Low battery threshold.</li>
<li><b>RvBatteryModelOpenCircuitVoltage</b>: RV battery model open circuit voltage.</li>
<li><b>RvBatteryModelCutoffVoltage</b>: RV battery model cutoff voltage.</li>
<li><b>RvBatteryModelAlphaValue</b>: RV battery model alpha value.</li>
<li><b>RvBatteryModelBetaValue</b>: RV battery model beta value.</li>
<li><b>RvBatteryModelNumOfTerms</b>: The number of terms of the infinite sum for estimating battery level.</li>
</ul>
<b>ns3::BasicEnergyHarvester</b><br>
<ul>
<li><b>PeriodicHarvestedPowerUpdateInterval</b>: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s</li>
<li><b>HarvestablePower</b>: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts</li>
</ul>
<b>ns3::MobilityModel</b><br>
<ul>
<li><b>Position</b>: The current position of the mobility model.</li>
<li><b>Velocity</b>: The current velocity of the mobility model.</li>
</ul>
<b>ns3::GaussMarkovMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>TimeStep</b>: Change current direction and speed after moving for this time.</li>
<li><b>Alpha</b>: A constant representing the tunable parameter in the Gauss-Markov model.</li>
<li><b>MeanVelocity</b>: A random variable used to assign the average velocity.</li>
<li><b>MeanDirection</b>: A random variable used to assign the average direction.</li>
<li><b>MeanPitch</b>: A random variable used to assign the average pitch.</li>
<li><b>NormalVelocity</b>: A gaussian random variable used to calculate the next velocity value.</li>
<li><b>NormalDirection</b>: A gaussian random variable used to calculate the next direction value.</li>
<li><b>NormalPitch</b>: A gaussian random variable used to calculate the next pitch value.</li>
</ul>
<b>ns3::HierarchicalMobilityModel</b><br>
<ul>
<li><b>Child</b>: The child mobility model.</li>
<li><b>Parent</b>: The parent mobility model.</li>
</ul>
<b>ns3::GridPositionAllocator</b><br>
<ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.</li>
<li><b>MinX</b>: The x coordinate where the grid starts.</li>
<li><b>MinY</b>: The y coordinate where the grid starts.</li>
<li><b>DeltaX</b>: The x space between objects.</li>
<li><b>DeltaY</b>: The y space between objects.</li>
<li><b>LayoutType</b>: The type of layout.</li>
</ul>
<b>ns3::RandomRectanglePositionAllocator</b><br>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random rectangle.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random rectangle.</li>
</ul>
<b>ns3::RandomBoxPositionAllocator</b><br>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.</li>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.</li>
</ul>
<b>ns3::RandomDiscPositionAllocator</b><br>
<ul>
<li><b>Theta</b>: A random variable which represents the angle (gradients) of a position in a random disc.</li>
<li><b>Rho</b>: A random variable which represents the radius of a position in a random disc.</li>
<li><b>X</b>: The x coordinate of the center of the random position disc.</li>
<li><b>Y</b>: The y coordinate of the center of the random position disc.</li>
</ul>
<b>ns3::UniformDiscPositionAllocator</b><br>
<ul>
<li><b>rho</b>: The radius of the disc</li>
<li><b>X</b>: The x coordinate of the center of the  disc.</li>
<li><b>Y</b>: The y coordinate of the center of the  disc.</li>
</ul>
<b>ns3::RandomDirection2dMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: The 2d bounding area</li>
<li><b>Speed</b>: A random variable to control the speed (m/s).</li>
<li><b>Pause</b>: A random variable to control the pause (s).</li>
</ul>
<b>ns3::RandomWalk2dMobilityModel</b><br>
<ul>
<li><b>Bounds</b>: Bounds of the area to cruise.</li>
<li><b>Time</b>: Change current direction and speed after moving for this delay.</li>
<li><b>Distance</b>: Change current direction and speed after moving for this distance.</li>
<li><b>Mode</b>: The mode indicates the condition used to change the current speed and direction</li>
<li><b>Direction</b>: A random variable used to pick the direction (radians).</li>
<li><b>Speed</b>: A random variable used to pick the speed (m/s).</li>
</ul>
<b>ns3::RandomWaypointMobilityModel</b><br>
<ul>
<li><b>Speed</b>: A random variable used to pick the speed of a random waypoint model.</li>
<li><b>Pause</b>: A random variable used to pick the pause of a random waypoint model.</li>
<li><b>PositionAllocator</b>: The position model used to pick a destination point.</li>
</ul>
<b>ns3::SteadyStateRandomWaypointMobilityModel</b><br>
<ul>
<li><b>MinSpeed</b>: Minimum speed value, [m/s]</li>
<li><b>MaxSpeed</b>: Maximum speed value, [m/s]</li>
<li><b>MinPause</b>: Minimum pause value, [s]</li>
<li><b>MaxPause</b>: Maximum pause value, [s]</li>
<li><b>MinX</b>: Minimum X value of traveling region, [m]</li>
<li><b>MaxX</b>: Maximum X value of traveling region, [m]</li>
<li><b>MinY</b>: Minimum Y value of traveling region, [m]</li>
<li><b>MaxY</b>: Maximum Y value of traveling region, [m]</li>
<li><b>Z</b>: Z value of traveling region (fixed), [m]</li>
</ul>
<b>ns3::WaypointMobilityModel</b><br>
<ul>
<li><b>NextWaypoint</b>: The next waypoint used to determine position.</li>
<li><b>WaypointsLeft</b>: The number of waypoints remaining.</li>
<li><b>LazyNotify</b>: Only call NotifyCourseChange when position is calculated.</li>
<li><b>InitialPositionIsWaypoint</b>: Calling SetPosition with no waypoints creates a waypoint.</li>
</ul>
<b>ns3::UanChannel</b><br>
<ul>
<li><b>PropagationModel</b>: A pointer to the propagation model.</li>
<li><b>NoiseModel</b>: A pointer to the model of the channel ambient noise.</li>
</ul>
<b>ns3::UanPhyGen</b><br>
<ul>
<li><b>CcaThreshold</b>: Aggregate energy of incoming signals to move to CCA Busy state dB.</li>
<li><b>RxThreshold</b>: Required SNR for signal acquisition in dB.</li>
<li><b>TxPower</b>: Transmission output power in dB.</li>
<li><b>SupportedModes</b>: List of modes supported by this PHY.</li>
<li><b>PerModel</b>: Functor to calculate PER based on SINR and TxMode.</li>
<li><b>SinrModel</b>: Functor to calculate SINR based on pkt arrivals and modes.</li>
</ul>
<b>ns3::UanPhyPerGenDefault</b><br>
<ul>
<li><b>Threshold</b>: SINR cutoff for good packet reception.</li>
</ul>
<b>ns3::UanPhyCalcSinrFhFsk</b><br>
<ul>
<li><b>NumberOfHops</b>: Number of frequencies in hopping pattern.</li>
</ul>
<b>ns3::UanTransducerHd</b><br>
<ul>
<li><b>RxGainDb</b>: Gain in Db added to incoming signal at receiver.</li>
</ul>
<b>ns3::UanNetDevice</b><br>
<ul>
<li><b>Channel</b>: The channel attached to this device.</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>Mac</b>: The MAC layer attached to this device.</li>
<li><b>Transducer</b>: The Transducer attached to this device.</li>
</ul>
<b>ns3::UanNoiseModelDefault</b><br>
<ul>
<li><b>Wind</b>: Wind speed in m/s.</li>
<li><b>Shipping</b>: Shipping contribution to noise between 0 and 1.</li>
</ul>
<b>ns3::UanMacCw</b><br>
<ul>
<li><b>CW</b>: The MAC parameter CW.</li>
<li><b>SlotTime</b>: Time slot duration for MAC backoff.</li>
</ul>
<b>ns3::UanPropModelThorp</b><br>
<ul>
<li><b>SpreadCoef</b>: Spreading coefficient used in calculation of Thorp's approximation.</li>
</ul>
<b>ns3::UanPhyDual</b><br>
<ul>
<li><b>CcaThresholdPhy1</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy1.</li>
<li><b>CcaThresholdPhy2</b>: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy2.</li>
<li><b>TxPowerPhy1</b>: Transmission output power in dB of Phy1.</li>
<li><b>TxPowerPhy2</b>: Transmission output power in dB of Phy2.</li>
<li><b>SupportedModesPhy1</b>: List of modes supported by Phy1.</li>
<li><b>SupportedModesPhy2</b>: List of modes supported by Phy2.</li>
<li><b>PerModelPhy1</b>: Functor to calculate PER based on SINR and TxMode for Phy1.</li>
<li><b>PerModelPhy2</b>: Functor to calculate PER based on SINR and TxMode for Phy2.</li>
<li><b>SinrModelPhy1</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy1.</li>
<li><b>SinrModelPhy2</b>: Functor to calculate SINR based on pkt arrivals and modes for Phy2.</li>
</ul>
<b>ns3::UanMacRc</b><br>
<ul>
<li><b>RetryRate</b>: Number of retry attempts per second (of RTS/GWPING).</li>
<li><b>MaxFrames</b>: Maximum number of frames to include in a single RTS.</li>
<li><b>QueueLimit</b>: Maximum packets to queue at MAC.</li>
<li><b>SIFS</b>: Spacing to give between frames (this should match gateway).</li>
<li><b>NumberOfRates</b>: Number of rate divisions supported by each PHY.</li>
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.</li>
<li><b>RetryStep</b>: Retry rate increment.</li>
<li><b>MaxPropDelay</b>: Maximum possible propagation delay to gateway.</li>
</ul>
<b>ns3::UanMacRcGw</b><br>
<ul>
<li><b>MaxReservations</b>: Maximum number of reservations to accept per cycle.</li>
<li><b>NumberOfRates</b>: Number of rates per Phy layer.</li>
<li><b>MaxPropDelay</b>: Maximum propagation delay between gateway and non-gateway nodes.</li>
<li><b>SIFS</b>: Spacing between frames to account for timing error and processing delay.</li>
<li><b>NumberOfNodes</b>: Number of non-gateway nodes in this gateway's neighborhood.</li>
<li><b>MinRetryRate</b>: Smallest allowed RTS retry rate.</li>
<li><b>RetryStep</b>: Retry rate increment.</li>
<li><b>TotalRate</b>: Total available channel rate in bps (for a single channel, without splitting reservation channel).</li>
<li><b>RateStep</b>: Increments available for rate assignment in bps.</li>
<li><b>FrameSize</b>: Size of data frames in bytes.</li>
</ul>
<b>ns3::AcousticModemEnergyModel</b><br>
<ul>
<li><b>TxPowerW</b>: The modem Tx power in Watts</li>
<li><b>RxPowerW</b>: The modem Rx power in Watts</li>
<li><b>IdlePowerW</b>: The modem Idle power in Watts</li>
<li><b>SleepPowerW</b>: The modem Sleep power in Watts</li>
</ul>
<b>ns3::RandomPropagationDelayModel</b><br>
<ul>
<li><b>Variable</b>: The random variable which generates random delays (s).</li>
</ul>
<b>ns3::ConstantSpeedPropagationDelayModel</b><br>
<ul>
<li><b>Speed</b>: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.</li>
</ul>
<b>ns3::RandomPropagationLossModel</b><br>
<ul>
<li><b>Variable</b>: The random variable used to pick a loss every time CalcRxPower is invoked.</li>
</ul>
<b>ns3::FriisPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).</li>
<li><b>SystemLoss</b>: The system loss</li>
<li><b>MinLoss</b>: The minimum value (dB) of the total loss, used at short ranges. Note: </li>
</ul>
<b>ns3::TwoRayGroundPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).</li>
<li><b>SystemLoss</b>: The system loss</li>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m)</li>
<li><b>HeightAboveZ</b>: The height of the antenna (m) above the node's Z coordinate</li>
</ul>
<b>ns3::LogDistancePropagationLossModel</b><br>
<ul>
<li><b>Exponent</b>: The exponent of the Path Loss propagation model</li>
<li><b>ReferenceDistance</b>: The distance at which the reference loss is calculated (m)</li>
<li><b>ReferenceLoss</b>: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)</li>
</ul>
<b>ns3::ThreeLogDistancePropagationLossModel</b><br>
<ul>
<li><b>Distance0</b>: Beginning of the first (near) distance field</li>
<li><b>Distance1</b>: Beginning of the second (middle) distance field.</li>
<li><b>Distance2</b>: Beginning of the third (far) distance field.</li>
<li><b>Exponent0</b>: The exponent for the first field.</li>
<li><b>Exponent1</b>: The exponent for the second field.</li>
<li><b>Exponent2</b>: The exponent for the third field.</li>
<li><b>ReferenceLoss</b>: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)</li>
</ul>
<b>ns3::NakagamiPropagationLossModel</b><br>
<ul>
<li><b>Distance1</b>: Beginning of the second distance field. Default is 80m.</li>
<li><b>Distance2</b>: Beginning of the third distance field. Default is 200m.</li>
<li><b>m0</b>: m0 for distances smaller than Distance1. Default is 1.5.</li>
<li><b>m1</b>: m1 for distances smaller than Distance2. Default is 0.75.</li>
<li><b>m2</b>: m2 for distances greater than Distance2. Default is 0.75.</li>
<li><b>ErlangRv</b>: Access to the underlying ErlangRandomVariable</li>
<li><b>GammaRv</b>: Access to the underlying GammaRandomVariable</li>
</ul>
<b>ns3::FixedRssLossModel</b><br>
<ul>
<li><b>Rss</b>: The fixed receiver Rss.</li>
</ul>
<b>ns3::MatrixPropagationLossModel</b><br>
<ul>
<li><b>DefaultLoss</b>: The default value for propagation loss, dB.</li>
</ul>
<b>ns3::RangePropagationLossModel</b><br>
<ul>
<li><b>MaxRange</b>: Maximum Transmission Range (meters)</li>
</ul>
<b>ns3::JakesProcess</b><br>
<ul>
<li><b>DopplerFrequencyHz</b>: Corresponding doppler frequency[Hz]</li>
<li><b>NumberOfOscillators</b>: The number of oscillators</li>
</ul>
<b>ns3::Cost231PropagationLossModel</b><br>
<ul>
<li><b>Lambda</b>: The wavelength  (default is 2.3 GHz at 300 000 km/s).</li>
<li><b>Frequency</b>: The Frequency  (default is 2.3 GHz).</li>
<li><b>BSAntennaHeight</b>: BS Antenna Height (default is 50m).</li>
<li><b>SSAntennaHeight</b>: SS Antenna Height (default is 3m).</li>
<li><b>MinDistance</b>: The distance under which the propagation model refuses to give results (m) </li>
</ul>
<b>ns3::OkumuraHataPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>CitySize</b>: Dimension of the city</li>
</ul>
<b>ns3::ItuR1411LosPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The propagation frequency in Hz</li>
</ul>
<b>ns3::ItuR1411NlosOverRooftopPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters</li>
<li><b>StreetsOrientation</b>: The orientation of streets in degrees [0,90] with respect to the direction of propagation</li>
<li><b>StreetsWidth</b>: The width of streets</li>
<li><b>BuildingsExtend</b>: The distance over which the buildings extend</li>
<li><b>BuildingSeparation</b>: The separation between buildings</li>
</ul>
<b>ns3::Building</b><br>
<ul>
<li><b>NRoomsX</b>: The number of rooms in the X axis.</li>
<li><b>NRoomsY</b>: The number of rooms in the Y axis.</li>
<li><b>NFloors</b>: The number of floors of this building.</li>
<li><b>Id</b>: The id (unique integer) of this Building.</li>
<li><b>Boundaries</b>: The boundaries of this Building as a value of type ns3::Box</li>
<li><b>Type</b>: The type of building</li>
<li><b>ExternalWallsType</b>: The type of material of which the external walls are made</li>
</ul>
<b>ns3::BuildingListPriv</b><br>
<ul>
<li><b>BuildingList</b>: The list of all buildings created during the simulation.</li>
</ul>
<b>ns3::ItuR1238PropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
</ul>
<b>ns3::BuildingsPropagationLossModel</b><br>
<ul>
<li><b>ShadowSigmaOutdoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes</li>
<li><b>ShadowSigmaIndoor</b>: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes </li>
<li><b>ShadowSigmaExtWalls</b>: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls </li>
<li><b>InternalWallLoss</b>: Additional loss for each internal wall [dB]</li>
</ul>
<b>ns3::HybridBuildingsPropagationLossModel</b><br>
<ul>
<li><b>Frequency</b>: The Frequency  (default is 2.106 GHz).</li>
<li><b>Los2NlosThr</b>:  Threshold from LoS to NLoS in ITU 1411 [m].</li>
<li><b>Environment</b>: Environment Scenario</li>
<li><b>CitySize</b>: Dimension of the city</li>
<li><b>RooftopLevel</b>: The height of the rooftop level in meters</li>
</ul>
<b>ns3::RandomBuildingPositionAllocator</b><br>
<ul>
<li><b>WithReplacement</b>: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.</li>
</ul>
<b>ns3::OutdoorPositionAllocator</b><br>
<ul>
<li><b>X</b>: A random variable which represents the x coordinate of a position in a random box.</li>
<li><b>Y</b>: A random variable which represents the y coordinate of a position in a random box.</li>
<li><b>Z</b>: A random variable which represents the z coordinate of a position in a random box.</li>
<li><b>MaxAttempts</b>: Maximum number of attempts for the rejection sampling before giving up.</li>
</ul>
<b>ns3::GridBuildingAllocator</b><br>
<ul>
<li><b>GridWidth</b>: The number of objects laid out on a line.</li>
<li><b>MinX</b>: The x coordinate where the grid starts.</li>
<li><b>MinY</b>: The y coordinate where the grid starts.</li>
<li><b>LengthX</b>:  the length of the wall of each building along the X axis.</li>
<li><b>LengthY</b>:  the length of the wall of each building along the X axis.</li>
<li><b>DeltaX</b>: The x space between buildings.</li>
<li><b>DeltaY</b>: The y space between buildings.</li>
<li><b>Height</b>: The height of the building (roof level)</li>
<li><b>LayoutType</b>: The type of layout.</li>
</ul>
<b>ns3::TrafficControlLayer</b><br>
<ul>
<li><b>RootQueueDiscList</b>: The list of root queue discs associated to this Traffic Control layer.</li>
</ul>
<b>ns3::QueueDiscClass</b><br>
<ul>
<li><b>QueueDisc</b>: The queue disc attached to the class</li>
</ul>
<b>ns3::QueueDisc</b><br>
<ul>
<li><b>Quota</b>: The maximum number of packets dequeued in a qdisc run</li>
<li><b>InternalQueueList</b>: The list of internal queues.</li>
<li><b>PacketFilterList</b>: The list of packet filters.</li>
<li><b>QueueDiscClassList</b>: The list of queue disc classes.</li>
</ul>
<b>ns3::PfifoFastQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc.</li>
</ul>
<b>ns3::FifoQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
</ul>
<b>ns3::RedQueueDisc</b><br>
<ul>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>IdlePktSize</b>: Average packet size used during idle times. Used when m_cautions = 3</li>
<li><b>Wait</b>: True for waiting between dropped packets</li>
<li><b>Gentle</b>: True to increases dropping probability slowly when average queue exceeds maxthresh</li>
<li><b>ARED</b>: True to enable ARED</li>
<li><b>AdaptMaxP</b>: True to adapt m_curMaxP</li>
<li><b>FengAdaptive</b>: True to enable Feng's Adaptive RED</li>
<li><b>NLRED</b>: True to enable Nonlinear RED</li>
<li><b>MinTh</b>: Minimum average length threshold in packets/bytes</li>
<li><b>MaxTh</b>: Maximum average length threshold in packets/bytes</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>QW</b>: Queue weight related to the exponential weighted moving average (EWMA)</li>
<li><b>LInterm</b>: The maximum probability of dropping a packet</li>
<li><b>TargetDelay</b>: Target average queuing delay in ARED</li>
<li><b>Interval</b>: Time interval to update m_curMaxP</li>
<li><b>Top</b>: Upper bound for m_curMaxP in ARED</li>
<li><b>Bottom</b>: Lower bound for m_curMaxP in ARED</li>
<li><b>Alpha</b>: Increment parameter for m_curMaxP in ARED</li>
<li><b>Beta</b>: Decrement parameter for m_curMaxP in ARED</li>
<li><b>FengAlpha</b>: Decrement parameter for m_curMaxP in Feng's Adaptive RED</li>
<li><b>FengBeta</b>: Increment parameter for m_curMaxP in Feng's Adaptive RED</li>
<li><b>LastSet</b>: Store the last time m_curMaxP was updated</li>
<li><b>Rtt</b>: Round Trip Time to be considered while automatically setting m_bottom</li>
<li><b>Ns1Compat</b>: NS-1 compatibility</li>
<li><b>LinkBandwidth</b>: The RED link bandwidth</li>
<li><b>LinkDelay</b>: The RED link delay</li>
<li><b>UseEcn</b>: True to use ECN (packets are marked instead of being dropped)</li>
<li><b>UseHardDrop</b>: True to always drop packets above max threshold</li>
</ul>
<b>ns3::CoDelQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The maximum number of packets/bytes accepted by this queue disc.</li>
<li><b>MinBytes</b>: The CoDel algorithm minbytes parameter.</li>
<li><b>Interval</b>: The CoDel algorithm interval</li>
<li><b>Target</b>: The CoDel algorithm target queue delay</li>
</ul>
<b>ns3::FqCoDelQueueDisc</b><br>
<ul>
<li><b>Interval</b>: The CoDel algorithm interval for each FQCoDel queue</li>
<li><b>Target</b>: The CoDel algorithm target queue delay for each FQCoDel queue</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>Flows</b>: The number of queues into which the incoming packets are classified</li>
<li><b>DropBatchSize</b>: The maximum number of packets dropped from the fat flow</li>
<li><b>Perturbation</b>: The salt used as an additional input to the hash function used to classify packets</li>
</ul>
<b>ns3::PieQueueDisc</b><br>
<ul>
<li><b>MeanPktSize</b>: Average of packet size</li>
<li><b>A</b>: Value of alpha</li>
<li><b>B</b>: Value of beta</li>
<li><b>Tupdate</b>: Time period to calculate drop probability</li>
<li><b>Supdate</b>: Start time of the update timer</li>
<li><b>MaxSize</b>: The maximum number of packets accepted by this queue disc</li>
<li><b>DequeueThreshold</b>: Minimum queue size in bytes before dequeue rate is measured</li>
<li><b>QueueDelayReference</b>: Desired queue delay</li>
<li><b>MaxBurstAllowance</b>: Current max burst allowance in seconds before random drop</li>
</ul>
<b>ns3::PrioQueueDisc</b><br>
<ul>
<li><b>Priomap</b>: The priority to band mapping.</li>
</ul>
<b>ns3::TbfQueueDisc</b><br>
<ul>
<li><b>MaxSize</b>: The max queue size</li>
<li><b>Burst</b>: Size of the first bucket in bytes</li>
<li><b>Mtu</b>: Size of the second bucket in bytes. If null, it is initialized to the MTU of the attached NetDevice (if any)</li>
<li><b>Rate</b>: Rate at which tokens enter the first bucket in bps or Bps.</li>
<li><b>PeakRate</b>: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket</li>
</ul>
<b>ns3::NullMessageSimulatorImpl</b><br>
<ul>
<li><b>SchedulerTune</b>: Null Message scheduler tuning parameter</li>
</ul>
<b>ns3::PointToPointNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>DataRate</b>: The default data rate for point to point links</li>
<li><b>ReceiveErrorModel</b>: The receiver error model used to simulate packet loss</li>
<li><b>InterframeGap</b>: The time to wait between packet (frame) transmissions</li>
<li><b>TxQueue</b>: A queue to use as the transmit queue in the device.</li>
</ul>
<b>ns3::PointToPointChannel</b><br>
<ul>
<li><b>Delay</b>: Propagation delay through the channel</li>
</ul>
<b>ns3::BridgeNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>EnableLearning</b>: Enable the learning mode of the Learning Bridge</li>
<li><b>ExpirationTime</b>: Time it takes for learned MAC state entry to expire.</li>
</ul>
<b>ns3::IpL4Protocol</b><br>
<ul>
<li><b>ProtocolNumber</b>: The IP protocol number.</li>
</ul>
<b>ns3::Ipv4Interface</b><br>
<ul>
<li><b>ArpCache</b>: The arp cache for this ipv4 interface</li>
</ul>
<b>ns3::Ipv4L3Protocol</b><br>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.</li>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.</li>
<li><b>InterfaceList</b>: The set of Ipv4 interfaces associated to this Ipv4 stack.</li>
</ul>
<b>ns3::Ipv4</b><br>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future Ipv4 devices.</li>
<li><b>WeakEsModel</b>: RFC1122 term for whether host accepts datagram with a dest. address on another interface</li>
</ul>
<b>ns3::UdpL4Protocol</b><br>
<ul>
<li><b>SocketList</b>: The list of sockets associated to this protocol.</li>
</ul>
<b>ns3::RttMeanDeviation</b><br>
<ul>
<li><b>Alpha</b>: Gain used in estimating the RTT, must be 0 <= alpha <= 1</li>
<li><b>Beta</b>: Gain used in estimating the RTT variation, must be 0 <= beta <= 1</li>
</ul>
<b>ns3::RttEstimator</b><br>
<ul>
<li><b>InitialEstimation</b>: Initial RTT estimate</li>
</ul>
<b>ns3::TcpL4Protocol</b><br>
<ul>
<li><b>RttEstimatorType</b>: Type of RttEstimator objects.</li>
<li><b>SocketType</b>: Socket type of TCP objects.</li>
<li><b>RecoveryType</b>: Recovery type of TCP objects.</li>
<li><b>SocketList</b>: The list of sockets associated to this protocol.</li>
</ul>
<b>ns3::ArpCache</b><br>
<ul>
<li><b>AliveTimeout</b>: When this timeout expires, the matching cache entry needs refreshing</li>
<li><b>DeadTimeout</b>: When this timeout expires, a new attempt to resolve the matching entry is made</li>
<li><b>WaitReplyTimeout</b>: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead</li>
<li><b>MaxRetries</b>: Number of retransmissions of ArpRequest before marking dead</li>
<li><b>PendingQueueSize</b>: The size of the queue for packets pending an arp reply.</li>
</ul>
<b>ns3::ArpL3Protocol</b><br>
<ul>
<li><b>CacheList</b>: The list of ARP caches</li>
<li><b>RequestJitter</b>: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter</li>
</ul>
<b>ns3::UdpSocketImpl</b><br>
<ul>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.</li>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.</li>
</ul>
<b>ns3::UdpSocket</b><br>
<ul>
<li><b>RcvBufSize</b>: UdpSocket maximum receive buffer size (bytes)</li>
<li><b>IpTtl</b>: socket-specific TTL for unicast IP packets (if non-zero)</li>
<li><b>IpMulticastTtl</b>: socket-specific TTL for multicast IP packets (if non-zero)</li>
<li><b>IpMulticastIf</b>: interface index for outgoing multicast on this socket; -1 indicates to use default interface</li>
<li><b>IpMulticastLoop</b>: whether outgoing multicast sent also to loopback interface</li>
<li><b>MtuDiscover</b>: If enabled, every outgoing ip packet will have the DF flag set.</li>
</ul>
<b>ns3::Ipv4RawSocketImpl</b><br>
<ul>
<li><b>Protocol</b>: Protocol number to match.</li>
<li><b>IcmpFilter</b>: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.</li>
<li><b>IpHeaderInclude</b>: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).</li>
</ul>
<b>ns3::NdiscCache</b><br>
<ul>
<li><b>UnresolvedQueueSize</b>: Size of the queue for packets pending an NA reply.</li>
</ul>
<b>ns3::Ipv6L3Protocol</b><br>
<ul>
<li><b>DefaultTtl</b>: The TTL value set by default on all outgoing packets generated on this node.</li>
<li><b>DefaultTclass</b>: The TCLASS value set by default on all outgoing packets generated on this node.</li>
<li><b>InterfaceList</b>: The set of IPv6 interfaces associated to this IPv6 stack.</li>
<li><b>SendIcmpv6Redirect</b>: Send the ICMPv6 Redirect when appropriate.</li>
<li><b>StrongEndSystemModel</b>: Reject packets for an address not configured on the interface they're coming from (RFC1222).</li>
</ul>
<b>ns3::Ipv6</b><br>
<ul>
<li><b>IpForward</b>: Globally enable or disable IP forwarding for all current and future IPv6 devices.</li>
<li><b>MtuDiscover</b>: If disabled, every interface will have its MTU set to 1280 bytes.</li>
</ul>
<b>ns3::Ipv6RawSocketImpl</b><br>
<ul>
<li><b>Protocol</b>: Protocol number to match.</li>
</ul>
<b>ns3::Ipv6Extension</b><br>
<ul>
<li><b>ExtensionNumber</b>: The IPv6 extension number.</li>
</ul>
<b>ns3::Ipv6ExtensionRoutingDemux</b><br>
<ul>
<li><b>RoutingExtensions</b>: The set of IPv6 Routing extensions registered with this demux.</li>
</ul>
<b>ns3::Ipv6ExtensionDemux</b><br>
<ul>
<li><b>Extensions</b>: The set of IPv6 extensions registered with this demux.</li>
</ul>
<b>ns3::Ipv6Option</b><br>
<ul>
<li><b>OptionNumber</b>: The IPv6 option number.</li>
</ul>
<b>ns3::Ipv6OptionDemux</b><br>
<ul>
<li><b>Options</b>: The set of IPv6 options registered with this demux.</li>
</ul>
<b>ns3::Icmpv6L4Protocol</b><br>
<ul>
<li><b>DAD</b>: Always do DAD check.</li>
<li><b>SolicitationJitter</b>: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter</li>
<li><b>MaxMulticastSolicit</b>: Neighbor Discovery node constants: max multicast solicitations.</li>
<li><b>MaxUnicastSolicit</b>: Neighbor Discovery node constants: max unicast solicitations.</li>
<li><b>ReachableTime</b>: Neighbor Discovery node constants: reachable time.</li>
<li><b>RetransmissionTime</b>: Neighbor Discovery node constants: retransmission timer.</li>
<li><b>DelayFirstProbe</b>: Neighbor Discovery node constants: delay for the first probe.</li>
</ul>
<b>ns3::TcpSocketBase</b><br>
<ul>
<li><b>MaxSegLifetime</b>: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state</li>
<li><b>MaxWindowSize</b>: Max size of advertised window</li>
<li><b>IcmpCallback</b>: Callback invoked whenever an icmp error is received on this socket.</li>
<li><b>IcmpCallback6</b>: Callback invoked whenever an icmpv6 error is received on this socket.</li>
<li><b>WindowScaling</b>: Enable or disable Window Scaling option</li>
<li><b>Sack</b>: Enable or disable Sack option</li>
<li><b>Timestamp</b>: Enable or disable Timestamp option</li>
<li><b>MinRto</b>: Minimum retransmit timeout value</li>
<li><b>ClockGranularity</b>: Clock Granularity used in RTO calculations</li>
<li><b>TxBuffer</b>: TCP Tx buffer</li>
<li><b>RxBuffer</b>: TCP Rx buffer</li>
<li><b>ReTxThreshold</b>: Threshold for fast retransmit</li>
<li><b>LimitedTransmit</b>: Enable limited transmit</li>
<li><b>EcnMode</b>: Determines the mode of ECN</li>
</ul>
<b>ns3::TcpSocket</b><br>
<ul>
<li><b>SndBufSize</b>: TcpSocket maximum transmit buffer size (bytes)</li>
<li><b>RcvBufSize</b>: TcpSocket maximum receive buffer size (bytes)</li>
<li><b>SegmentSize</b>: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)</li>
<li><b>InitialSlowStartThreshold</b>: TCP initial slow start threshold (bytes)</li>
<li><b>InitialCwnd</b>: TCP initial congestion window size (segments)</li>
<li><b>ConnTimeout</b>: TCP retransmission timeout when opening connection (seconds)</li>
<li><b>ConnCount</b>: Number of connection attempts (SYN retransmissions) before returning failure</li>
<li><b>DataRetries</b>: Number of data retransmission attempts</li>
<li><b>DelAckTimeout</b>: Timeout value for TCP delayed acks, in seconds</li>
<li><b>DelAckCount</b>: Number of packets to wait before sending a TCP ack</li>
<li><b>TcpNoDelay</b>: Set to true to disable Nagle's algorithm</li>
<li><b>PersistTimeout</b>: Persist timeout to probe for rx window</li>
</ul>
<b>ns3::TcpSocketState</b><br>
<ul>
<li><b>EnablePacing</b>: Enable Pacing</li>
<li><b>MaxPacingRate</b>: Set Max Pacing Rate</li>
</ul>
<b>ns3::TcpHybla</b><br>
<ul>
<li><b>RRTT</b>: Reference RTT</li>
</ul>
<b>ns3::TcpVegas</b><br>
<ul>
<li><b>Alpha</b>: Lower bound of packets in network</li>
<li><b>Beta</b>: Upper bound of packets in network</li>
<li><b>Gamma</b>: Limit on increase</li>
</ul>
<b>ns3::TcpWestwood</b><br>
<ul>
<li><b>FilterType</b>: Use this to choose no filter or Tustin's approximation filter</li>
<li><b>ProtocolType</b>: Use this to let the code run as Westwood or WestwoodPlus</li>
</ul>
<b>ns3::TcpScalable</b><br>
<ul>
<li><b>AIFactor</b>: Additive Increase Factor</li>
<li><b>MDFactor</b>: Multiplicative Decrease Factor</li>
</ul>
<b>ns3::TcpVeno</b><br>
<ul>
<li><b>Beta</b>: Threshold for congestion detection</li>
</ul>
<b>ns3::TcpBic</b><br>
<ul>
<li><b>FastConvergence</b>: Turn on/off fast convergence.</li>
<li><b>Beta</b>: Beta for multiplicative decrease</li>
<li><b>MaxIncr</b>: Limit on increment allowed during binary search</li>
<li><b>LowWnd</b>: Threshold window size (in segments) for engaging BIC response</li>
<li><b>SmoothPart</b>: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.</li>
<li><b>BinarySearchCoefficient</b>: Inverse of the coefficient for the binary search. Default 4, as in Linux</li>
</ul>
<b>ns3::TcpYeah</b><br>
<ul>
<li><b>Alpha</b>: Maximum backlog allowed at the bottleneck queue</li>
<li><b>Gamma</b>: Fraction of queue to be removed per RTT</li>
<li><b>Delta</b>: Log minimum fraction of cwnd to be removed on loss</li>
<li><b>Epsilon</b>: Log maximum fraction to be removed on early decongestion</li>
<li><b>Phy</b>: Maximum delta from base</li>
<li><b>Rho</b>: Minimum # of consecutive RTT to consider competition on loss</li>
<li><b>Zeta</b>: Minimum # of state switches to reset m_renoCount</li>
<li><b>StcpAiFactor</b>: STCP additive increase factor</li>
</ul>
<b>ns3::TcpLedbat</b><br>
<ul>
<li><b>TargetDelay</b>: Targeted Queue Delay</li>
<li><b>BaseHistoryLen</b>: Number of Base delay samples</li>
<li><b>NoiseFilterLen</b>: Number of Current delay samples</li>
<li><b>Gain</b>: Offset Gain</li>
<li><b>SSParam</b>: Possibility of Slow Start</li>
<li><b>MinCwnd</b>: Minimum cWnd for Ledbat</li>
</ul>
<b>ns3::TcpIllinois</b><br>
<ul>
<li><b>AlphaMin</b>: Minimum alpha threshold</li>
<li><b>AlphaMax</b>: Maximum alpha threshold</li>
<li><b>AlphaBase</b>: Alpha base threshold</li>
<li><b>BetaMin</b>: Minimum beta threshold</li>
<li><b>BetaMax</b>: Maximum beta threshold</li>
<li><b>BetaBase</b>: Beta base threshold</li>
<li><b>WinThresh</b>: Window threshold</li>
<li><b>Theta</b>: Theta threshold</li>
</ul>
<b>ns3::TcpHtcp</b><br>
<ul>
<li><b>DefaultBackoff</b>: The default AIMD backoff factor</li>
<li><b>ThroughputRatio</b>: Threshold value for updating beta</li>
<li><b>DeltaL</b>: Delta_L parameter in increase function</li>
</ul>
<b>ns3::TcpPrrRecovery</b><br>
<ul>
<li><b>ReductionBound</b>: Type of Reduction Bound</li>
</ul>
<b>ns3::Ipv4GlobalRouting</b><br>
<ul>
<li><b>RandomEcmpRouting</b>: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently</li>
<li><b>RespondToInterfaceEvents</b>: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)</li>
</ul>
<b>ns3::Ipv6PmtuCache</b><br>
<ul>
<li><b>CacheExpiryTime</b>: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.</li>
</ul>
<b>ns3::RipNg</b><br>
<ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.</li>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).</li>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.</li>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.</li>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.</li>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.</li>
<li><b>SplitHorizon</b>: Split Horizon strategy.</li>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.</li>
</ul>
<b>ns3::Rip</b><br>
<ul>
<li><b>UnsolicitedRoutingUpdate</b>: The time between two Unsolicited Routing Updates.</li>
<li><b>StartupDelay</b>: Maximum random delay for protocol startup (send route requests).</li>
<li><b>TimeoutDelay</b>: The delay to invalidate a route.</li>
<li><b>GarbageCollectionDelay</b>: The delay to delete an expired route.</li>
<li><b>MinTriggeredCooldown</b>: Min cooldown delay after a Triggered Update.</li>
<li><b>MaxTriggeredCooldown</b>: Max cooldown delay after a Triggered Update.</li>
<li><b>SplitHorizon</b>: Split Horizon strategy.</li>
<li><b>LinkDownValue</b>: Value for link down in count to infinity.</li>
</ul>
<b>ns3::itp</b><br>
<ul>
<li><b>consumer</b>: Consumer</li>
</ul>
<b>ns3::producer</b><br>
<ul>
<li><b>PayloadSize</b>: The destination port of the outbound packets</li>
</ul>
<b>ns3::consumer</b><br>
<ul>
<li><b>RetxTimer</b>: Timeout defining how frequent retransmission timeouts should be checked</li>
</ul>
<b>ns3::RttEstimator1</b><br>
<ul>
<li><b>MaxMultiplier</b>: Maximum RTO Multiplier</li>
<li><b>InitialEstimation</b>: Initial RTT estimation</li>
<li><b>MinRTO</b>: Minimum retransmit timeout value</li>
<li><b>FastRetxTimer</b>: Timeout defining how frequent FasterRetransmission timeouts should be checked</li>
</ul>
<b>ns3::ItpCache</b><br>
<ul>
<li><b>PayloadSize</b>: The destination port of the outbound packets</li>
</ul>
<b>ns3::TapBridge</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>DeviceName</b>: The name of the tap device to create.</li>
<li><b>Gateway</b>: The IP address of the default gateway to assign to the host machine, when in ConfigureLocal mode.</li>
<li><b>IpAddress</b>: The IP address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered IP address of the simulated device.</li>
<li><b>MacAddress</b>: The MAC address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.</li>
<li><b>Netmask</b>: The network mask to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.</li>
<li><b>Start</b>: The simulation time at which to spin up the tap device read thread.</li>
<li><b>Stop</b>: The simulation time at which to tear down the tap device read thread.</li>
<li><b>Mode</b>: The operating and configuration mode to use.</li>
</ul>
<b>ns3::SixLowPanNetDevice</b><br>
<ul>
<li><b>Rfc6282</b>: Use RFC6282 (IPHC) if true, RFC4944 (HC1) otherwise.</li>
<li><b>OmitUdpChecksum</b>: Omit the UDP checksum in IPHC compression.</li>
<li><b>FragmentReassemblyListSize</b>: The maximum size of the reassembly buffer (in packets). Zero meaning infinite.</li>
<li><b>FragmentExpirationTimeout</b>: When this timeout expires, the fragments will be cleared from the buffer.</li>
<li><b>CompressionThreshold</b>: The minimum MAC layer payload size.</li>
<li><b>ForceEtherType</b>: Force a specific EtherType in L2 frames.</li>
<li><b>EtherType</b>: The specific EtherType to be used in L2 frames.</li>
</ul>
<b>ns3::olsr::RoutingProtocol</b><br>
<ul>
<li><b>HelloInterval</b>: HELLO messages emission interval.</li>
<li><b>TcInterval</b>: TC messages emission interval.</li>
<li><b>MidInterval</b>: MID messages emission interval.  Normally it is equal to TcInterval.</li>
<li><b>HnaInterval</b>: HNA messages emission interval.  Normally it is equal to TcInterval.</li>
<li><b>Willingness</b>: Willingness of a node to carry and forward traffic for other nodes.</li>
</ul>
<b>ns3::WimaxNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>Channel</b>: The channel attached to this device.</li>
<li><b>RTG</b>: receive/transmit transition gap.</li>
<li><b>TTG</b>: transmit/receive transition gap.</li>
<li><b>ConnectionManager</b>: The connection manager attached to this device.</li>
<li><b>BurstProfileManager</b>: The burst profile manager attached to this device.</li>
<li><b>BandwidthManager</b>: The bandwidth manager attached to this device.</li>
<li><b>InitialRangingConnection</b>: Initial ranging connection</li>
<li><b>BroadcastConnection</b>: Broadcast connection</li>
</ul>
<b>ns3::BaseStationNetDevice</b><br>
<ul>
<li><b>BSScheduler</b>: Downlink Scheduler for BS</li>
<li><b>InitialRangInterval</b>: Time between Initial Ranging regions assigned by the BS. Maximum is 2s</li>
<li><b>DcdInterval</b>: Time between transmission of DCD messages. Maximum value is 10s.</li>
<li><b>UcdInterval</b>: Time between transmission of UCD messages. Maximum value is 10s.</li>
<li><b>IntervalT8</b>: Wait for DSA/DSC Acknowledge timeout. Maximum 300ms.</li>
<li><b>RangReqOppSize</b>: The ranging opportunity size in symbols</li>
<li><b>BwReqOppSize</b>: The bandwidth request opportunity size in symbols</li>
<li><b>MaxRangCorrectionRetries</b>: Number of retries on contention Ranging Requests</li>
<li><b>SSManager</b>: The ss manager attached to this device.</li>
<li><b>Scheduler</b>: The BS scheduler attached to this device.</li>
<li><b>LinkManager</b>: The link manager attached to this device.</li>
<li><b>UplinkScheduler</b>: The uplink scheduler attached to this device.</li>
<li><b>BsIpcsPacketClassifier</b>: The uplink IP packet classifier attached to this device.</li>
<li><b>ServiceFlowManager</b>: The service flow manager attached to this device.</li>
</ul>
<b>ns3::SubscriberStationNetDevice</b><br>
<ul>
<li><b>BasicConnection</b>: Basic connection</li>
<li><b>PrimaryConnection</b>: Primary connection</li>
<li><b>LostDlMapInterval</b>: Time since last received DL-MAP message before downlink synchronization is considered lost. Maximum is 600ms</li>
<li><b>LostUlMapInterval</b>: Time since last received UL-MAP before uplink synchronization is considered lost, maximum is 600.</li>
<li><b>MaxDcdInterval</b>: Maximum time between transmission of DCD messages. Maximum is 10s</li>
<li><b>MaxUcdInterval</b>: Maximum time between transmission of UCD messages. Maximum is 10s</li>
<li><b>IntervalT1</b>: Wait for DCD timeout. Maximum is 5*maxDcdInterval</li>
<li><b>IntervalT2</b>: Wait for broadcast ranging timeout, i.e., wait for initial ranging opportunity. Maximum is 5*Ranging interval</li>
<li><b>IntervalT3</b>: ranging Response reception timeout following the transmission of a ranging request. Maximum is 200ms</li>
<li><b>IntervalT7</b>: wait for DSA/DSC/DSD Response timeout. Maximum is 1s</li>
<li><b>IntervalT12</b>: Wait for UCD descriptor.Maximum is 5*MaxUcdInterval</li>
<li><b>IntervalT20</b>: Time the SS searches for preambles on a given channel. Minimum is 2 MAC frames</li>
<li><b>IntervalT21</b>: time the SS searches for (decodable) DL-MAP on a given channel</li>
<li><b>MaxContentionRangingRetries</b>: Number of retries on contention Ranging Requests</li>
<li><b>SSScheduler</b>: The ss scheduler attached to this device.</li>
<li><b>LinkManager</b>: The ss link manager attached to this device.</li>
<li><b>Classifier</b>: The ss classifier attached to this device.</li>
</ul>
<b>ns3::WimaxPhy</b><br>
<ul>
<li><b>Channel</b>: Wimax channel</li>
<li><b>FrameDuration</b>: The frame duration in seconds.</li>
<li><b>Frequency</b>: The central frequency in KHz.</li>
<li><b>Bandwidth</b>: The channel bandwidth in Hz.</li>
</ul>
<b>ns3::WimaxConnection</b><br>
<ul>
<li><b>Type</b>: Connection type</li>
<li><b>TxQueue</b>: Transmit queue</li>
</ul>
<b>ns3::SimpleOfdmWimaxPhy</b><br>
<ul>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.</li>
<li><b>TxPower</b>: Transmission power (dB).</li>
<li><b>G</b>: This is the ratio of CP time to useful time.</li>
<li><b>TxGain</b>: Transmission gain (dB).</li>
<li><b>RxGain</b>: Reception gain (dB).</li>
<li><b>Nfft</b>: FFT size</li>
<li><b>TraceFilePath</b>: Path to the directory containing SNR to block error rate files</li>
</ul>
<b>ns3::UplinkSchedulerMBQoS</b><br>
<ul>
<li><b>WindowInterval</b>: The time to wait to reset window</li>
</ul>
<b>ns3::WimaxMacQueue</b><br>
<ul>
<li><b>MaxSize</b>: Maximum size</li>
</ul>
<b>ns3::Ping6</b><br>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send</li>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>RemoteIpv6</b>: The Ipv6Address of the outbound packets</li>
<li><b>LocalIpv6</b>: Local Ipv6Address of the sender</li>
<li><b>PacketSize</b>: Size of packets generated</li>
</ul>
<b>ns3::Radvd</b><br>
<ul>
<li><b>AdvertisementJitter</b>: Uniform variable to provide jitter between min and max values of AdvInterval</li>
</ul>
<b>ns3::V4Ping</b><br>
<ul>
<li><b>Remote</b>: The address of the machine we want to ping.</li>
<li><b>Verbose</b>: Produce usual output.</li>
<li><b>Interval</b>: Wait  interval  seconds between sending each packet.</li>
<li><b>Size</b>: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.</li>
</ul>
<b>ns3::DhcpServer</b><br>
<ul>
<li><b>LeaseTime</b>: Lease for which address will be leased.</li>
<li><b>RenewTime</b>: Time after which client should renew.</li>
<li><b>RebindTime</b>: Time after which client should rebind.</li>
<li><b>PoolAddresses</b>: Pool of addresses to provide on request.</li>
<li><b>FirstAddress</b>: The First valid address that can be given.</li>
<li><b>LastAddress</b>: The Last valid address that can be given.</li>
<li><b>PoolMask</b>: Mask of the pool of addresses.</li>
<li><b>Gateway</b>: Address of default gateway</li>
</ul>
<b>ns3::DhcpClient</b><br>
<ul>
<li><b>RTRS</b>: Time for retransmission of Discover message</li>
<li><b>Collect</b>: Time for which offer collection starts</li>
<li><b>ReRequest</b>: Time after which request will be resent to next server</li>
<li><b>Transactions</b>: The possible value of transaction numbers </li>
</ul>
<b>ns3::FlowMonitor</b><br>
<ul>
<li><b>MaxPerHopDelay</b>: The maximum per-hop delay that should be considered.  Packets still not received after this delay are to be considered lost.</li>
<li><b>StartTime</b>: The time when the monitoring starts.</li>
<li><b>DelayBinWidth</b>: The width used in the delay histogram.</li>
<li><b>JitterBinWidth</b>: The width used in the jitter histogram.</li>
<li><b>PacketSizeBinWidth</b>: The width used in the packetSize histogram.</li>
<li><b>FlowInterruptionsBinWidth</b>: The width used in the flowInterruptions histogram.</li>
<li><b>FlowInterruptionsMinTime</b>: The minimum inter-arrival time that is considered a flow interruption.</li>
</ul>
<b>ns3::dsdv::RoutingProtocol</b><br>
<ul>
<li><b>PeriodicUpdateInterval</b>: Periodic interval between exchange of full routing tables among nodes. </li>
<li><b>SettlingTime</b>: Minimum time an update is to be stored in adv table before sending outin case of change in metric (in seconds)</li>
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.</li>
<li><b>MaxQueuedPacketsPerDst</b>: Maximum number of packets that we allow per destination to buffer.</li>
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)</li>
<li><b>EnableBuffering</b>: Enables buffering of data packets if no route to destination is available</li>
<li><b>EnableWST</b>: Enables Weighted Settling Time for the updates before advertising</li>
<li><b>Holdtimes</b>: Times the forwarding Interval to purge the route.</li>
<li><b>WeightedFactor</b>: WeightedFactor for the settling time if Weighted Settling Time is enabled</li>
<li><b>EnableRouteAggregation</b>: Enables Weighted Settling Time for the updates before advertising</li>
<li><b>RouteAggregationTime</b>: Time to aggregate updates before sending them out (in seconds)</li>
</ul>
<b>ns3::BulkSendApplication</b><br>
<ul>
<li><b>SendSize</b>: The amount of data to send each time.</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.</li>
<li><b>Protocol</b>: The type of protocol to use.</li>
</ul>
<b>ns3::OnOffApplication</b><br>
<ul>
<li><b>DataRate</b>: The data rate in on state.</li>
<li><b>PacketSize</b>: The size of packets sent in on state</li>
<li><b>Remote</b>: The address of the destination</li>
<li><b>OnTime</b>: A RandomVariableStream used to pick the duration of the 'On' state.</li>
<li><b>OffTime</b>: A RandomVariableStream used to pick the duration of the 'Off' state.</li>
<li><b>MaxBytes</b>: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.</li>
<li><b>Protocol</b>: The type of protocol to use. This should be a subclass of ns3::SocketFactory</li>
</ul>
<b>ns3::PacketSink</b><br>
<ul>
<li><b>Local</b>: The Address on which to Bind the rx socket.</li>
<li><b>Protocol</b>: The type id of the protocol to use for the rx socket.</li>
</ul>
<b>ns3::UdpClient</b><br>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send</li>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
<li><b>PacketSize</b>: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.</li>
</ul>
<b>ns3::UdpServer</b><br>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
<li><b>PacketWindowSize</b>: The size of the window used to compute the packet loss. This value should be a multiple of 8.</li>
</ul>
<b>ns3::UdpTraceClient</b><br>
<ul>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
<li><b>MaxPacketSize</b>: The maximum size of a packet (including the SeqTsHeader, 12 bytes).</li>
<li><b>TraceFilename</b>: Name of file to load a trace from. By default, uses a hardcoded trace.</li>
<li><b>TraceLoop</b>: Loops through the trace file, starting again once it is over.</li>
</ul>
<b>ns3::UdpEchoClient</b><br>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send</li>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
<li><b>PacketSize</b>: Size of echo data in outbound packets</li>
</ul>
<b>ns3::UdpEchoServer</b><br>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
</ul>
<b>ns3::ThreeGppHttpClient</b><br>
<ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. timing and HTTP request size.</li>
<li><b>RemoteServerAddress</b>: The address of the destination server.</li>
<li><b>RemoteServerPort</b>: The destination port of the outbound packets.</li>
</ul>
<b>ns3::ThreeGppHttpServer</b><br>
<ul>
<li><b>Variables</b>: Variable collection, which is used to control e.g. processing and object generation delays.</li>
<li><b>LocalAddress</b>: The local address of the server, i.e., the address on which to bind the Rx socket.</li>
<li><b>LocalPort</b>: Port on which the application listen for incoming packets.</li>
<li><b>Mtu</b>: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.</li>
</ul>
<b>ns3::ThreeGppHttpVariables</b><br>
<ul>
<li><b>RequestSize</b>: The constant size of HTTP request packet (in bytes).</li>
<li><b>MainObjectGenerationDelay</b>: The constant time needed by HTTP server to generate a main object as a response.</li>
<li><b>MainObjectSizeMean</b>: The mean of main object sizes (in bytes).</li>
<li><b>MainObjectSizeStdDev</b>: The standard deviation of main object sizes (in bytes).</li>
<li><b>MainObjectSizeMin</b>: The minimum value of main object sizes (in bytes).</li>
<li><b>MainObjectSizeMax</b>: The maximum value of main object sizes (in bytes).</li>
<li><b>EmbeddedObjectGenerationDelay</b>: The constant time needed by HTTP server to generate an embedded object as a response.</li>
<li><b>EmbeddedObjectSizeMean</b>: The mean of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeStdDev</b>: The standard deviation of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeMin</b>: The minimum value of embedded object sizes (in bytes).</li>
<li><b>EmbeddedObjectSizeMax</b>: The maximum value of embedded object sizes (in bytes).</li>
<li><b>NumOfEmbeddedObjectsMax</b>: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.</li>
<li><b>NumOfEmbeddedObjectsShape</b>: The shape parameter of Pareto distribution for the number of embedded objects per web page.</li>
<li><b>NumOfEmbeddedObjectsScale</b>: The scale parameter of Pareto distribution for the number of embedded objects per web page.</li>
<li><b>ReadingTimeMean</b>: The mean of reading time.</li>
<li><b>ParsingTimeMean</b>: The mean of parsing time.</li>
<li><b>LowMtuSize</b>: The lower MTU size.</li>
<li><b>HighMtuSize</b>: The higher MTU size.</li>
<li><b>HighMtuProbability</b>: The probability that higher MTU size is used.</li>
</ul>
<b>ns3::ItpSource</b><br>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send</li>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
<li><b>PacketSize</b>: Size of echo data in outbound packets</li>
</ul>
<b>ns3::ItpSink</b><br>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
</ul>
<b>ns3::UdpEchoClient1</b><br>
<ul>
<li><b>MaxPackets</b>: The maximum number of packets the application will send</li>
<li><b>Interval</b>: The time to wait between packets</li>
<li><b>RemoteAddress</b>: The destination Address of the outbound packets</li>
<li><b>RemotePort</b>: The destination port of the outbound packets</li>
<li><b>PacketSize</b>: Size of echo data in outbound packets</li>
</ul>
<b>ns3::UdpEchoServer1</b><br>
<ul>
<li><b>Port</b>: Port on which we listen for incoming packets.</li>
</ul>
<b>ns3::IsotropicAntennaModel</b><br>
<ul>
<li><b>Gain</b>: The gain of the antenna in dB</li>
</ul>
<b>ns3::CosineAntennaModel</b><br>
<ul>
<li><b>Beamwidth</b>: The 3dB beamwidth (degrees)</li>
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis</li>
<li><b>MaxGain</b>: The gain (dB) at the antenna boresight (the direction of maximum gain)</li>
</ul>
<b>ns3::ParabolicAntennaModel</b><br>
<ul>
<li><b>Beamwidth</b>: The 3dB beamwidth (degrees)</li>
<li><b>Orientation</b>: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis</li>
<li><b>MaxAttenuation</b>: The maximum attenuation (dB) of the antenna radiation pattern.</li>
</ul>
<b>ns3::ConstantSpectrumPropagationLossModel</b><br>
<ul>
<li><b>Loss</b>: Path loss (dB) between transmitter and receiver</li>
</ul>
<b>ns3::SpectrumChannel</b><br>
<ul>
<li><b>MaxLossDb</b>: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. </li>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.</li>
</ul>
<b>ns3::WaveformGenerator</b><br>
<ul>
<li><b>Period</b>: the period (=1/frequency)</li>
<li><b>DutyCycle</b>: the duty cycle of the generator, i.e., the fraction of the period that is occupied by a signal</li>
</ul>
<b>ns3::SpectrumAnalyzer</b><br>
<ul>
<li><b>Resolution</b>: The length of the time interval over which the power spectral density of incoming signals is averaged</li>
<li><b>NoisePowerSpectralDensity</b>: The power spectral density of the measuring instrument noise, in Watt/Hz. Mostly useful to make spectrograms look more similar to those obtained by real devices. Defaults to the value for thermal noise at 300K.</li>
</ul>
<b>ns3::AlohaNoackNetDevice</b><br>
<ul>
<li><b>Address</b>: The MAC address of this device.</li>
<li><b>Queue</b>: packets being transmitted get queued here</li>
<li><b>Mtu</b>: The Maximum Transmission Unit</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
</ul>
<b>ns3::HalfDuplexIdealPhy</b><br>
<ul>
<li><b>Rate</b>: The PHY rate used by this device</li>
</ul>
<b>ns3::NonCommunicatingNetDevice</b><br>
<ul>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
</ul>
<b>ns3::TvSpectrumTransmitter</b><br>
<ul>
<li><b>TvType</b>: The type of TV transmitter/modulation to be used.</li>
<li><b>StartFrequency</b>: The lower end frequency (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.</li>
<li><b>ChannelBandwidth</b>: The bandwidth (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.</li>
<li><b>BasePsd</b>: The base power spectral density (in dBm/Hz) of the TV transmitter's transmitted spectrum. Base PSD is the maximum PSD of the spectrum excluding pilots. For analog and COFDM transmitters this is the maximum PSD, but for 8-VSB transmitters this is the maximum PSD of the main signal spectrum (flat-top segment) since the pilot actually has the maximum PSD overall.</li>
<li><b>Antenna</b>: The AntennaModel to be used. Allows classes inherited from ns3::AntennaModel. Defaults to ns3::IsotropicAntennaModel.</li>
<li><b>StartingTime</b>: The time point after the simulation begins in which the TV transmitter will begin transmitting.</li>
<li><b>TransmitDuration</b>: The duration of time that the TV transmitter will transmit for.</li>
</ul>
<b>ns3::LteSpectrumPhy</b><br>
<ul>
<li><b>DataErrorModelEnabled</b>: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].</li>
<li><b>CtrlErrorModelEnabled</b>: Activate/Deactivate the error model of control (PCFICH-PDCCH decodification) [by default is active].</li>
</ul>
<b>ns3::LteEnbPhy</b><br>
<ul>
<li><b>TxPower</b>: Transmission power in dBm</li>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.  According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an ideal receiver with the same overall gain and bandwidth when the receivers are connected to sources at the standard noise temperature T0."  In this model, we consider T0 = 290K.</li>
<li><b>MacToChannelDelay</b>: The delay in TTI units that occurs between a scheduling decision in the MAC and the actual start of the transmission by the PHY. This is intended to be used to model the latency of real PHY and MAC implementations.</li>
<li><b>UeSinrSamplePeriod</b>: The sampling period for reporting UEs' SINR stats.</li>
<li><b>InterferenceSamplePeriod</b>: The sampling period for reporting interference stats</li>
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy</li>
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy</li>
</ul>
<b>ns3::LteUePhy</b><br>
<ul>
<li><b>TxPower</b>: Transmission power in dBm</li>
<li><b>NoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.</li>
<li><b>TxMode1Gain</b>: Transmission mode 1 gain in dB</li>
<li><b>TxMode2Gain</b>: Transmission mode 2 gain in dB</li>
<li><b>TxMode3Gain</b>: Transmission mode 3 gain in dB</li>
<li><b>TxMode4Gain</b>: Transmission mode 4 gain in dB</li>
<li><b>TxMode5Gain</b>: Transmission mode 5 gain in dB</li>
<li><b>TxMode6Gain</b>: Transmission mode 6 gain in dB</li>
<li><b>TxMode7Gain</b>: Transmission mode 7 gain in dB</li>
<li><b>RsrpSinrSamplePeriod</b>: The sampling period for reporting RSRP-SINR stats (default value 1)</li>
<li><b>DlSpectrumPhy</b>: The downlink LteSpectrumPhy associated to this LtePhy</li>
<li><b>UlSpectrumPhy</b>: The uplink LteSpectrumPhy associated to this LtePhy</li>
<li><b>RsrqUeMeasThreshold</b>: Receive threshold for PSS on RSRQ [dB]</li>
<li><b>UeMeasurementsFilterPeriod</b>: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.</li>
<li><b>EnableUplinkPowerControl</b>: If true, Uplink Power Control will be enabled.</li>
</ul>
<b>ns3::LteAmc</b><br>
<ul>
<li><b>Ber</b>: The requested BER in assigning MCS (default is 0.00005).</li>
<li><b>AmcModel</b>: AMC model used to assign CQI</li>
</ul>
<b>ns3::UeManager</b><br>
<ul>
<li><b>DataRadioBearerMap</b>: List of UE DataRadioBearerInfo by DRBID.</li>
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0</li>
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1</li>
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier</li>
</ul>
<b>ns3::LteEnbRrc</b><br>
<ul>
<li><b>UeMap</b>: List of UeManager by C-RNTI.</li>
<li><b>DefaultTransmissionMode</b>: The default UEs' transmission mode (0: SISO)</li>
<li><b>EpsBearerToRlcMapping</b>: Specify which type of RLC will be used for each type of EPS bearer. </li>
<li><b>SystemInformationPeriodicity</b>: The interval for sending system information (Time value)</li>
<li><b>SrsPeriodicity</b>: The SRS periodicity in milliseconds</li>
<li><b>ConnectionRequestTimeoutDuration</b>: After a RA attempt, if no RRC CONNECTION REQUEST is received before this time, the UE context is destroyed. Must account for reception of RAR and transmission of RRC CONNECTION REQUEST over UL GRANT.</li>
<li><b>ConnectionSetupTimeoutDuration</b>: After accepting connection request, if no RRC CONNECTION SETUP COMPLETE is received before this time, the UE context is destroyed. Must account for the UE's reception of RRC CONNECTION SETUP and transmission of RRC CONNECTION SETUP COMPLETE.</li>
<li><b>ConnectionRejectedTimeoutDuration</b>: Time to wait between sending a RRC CONNECTION REJECT and destroying the UE context</li>
<li><b>HandoverJoiningTimeoutDuration</b>: After accepting a handover request, if no RRC CONNECTION RECONFIGURATION COMPLETE is received before this time, the UE context is destroyed. Must account for reception of X2 HO REQ ACK by source eNB, transmission of the Handover Command, non-contention-based random access and reception of the RRC CONNECTION RECONFIGURATION COMPLETE message.</li>
<li><b>HandoverLeavingTimeoutDuration</b>: After issuing a Handover Command, if neither RRC CONNECTION RE-ESTABLISHMENT nor X2 UE Context Release has been previously received, the UE context is destroyed.</li>
<li><b>QRxLevMin</b>: One of information transmitted within the SIB1 message, indicating the required minimum RSRP level that any UE must receive from this cell before it is allowed to camp to this cell. The default value -70 corresponds to -140 dBm and is the lowest possible value as defined by Section 6.3.4 of 3GPP TS 36.133. This restriction, however, only applies to initial cell selection and EPC-enabled simulation.</li>
<li><b>NumberOfComponentCarriers</b>: Number of Component Carriers </li>
<li><b>AdmitHandoverRequest</b>: Whether to admit an X2 handover request from another eNB</li>
<li><b>AdmitRrcConnectionRequest</b>: Whether to admit a connection request from a UE</li>
<li><b>RsrpFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRP in all attached UE; if set to 0, no layer 3 filtering is applicable</li>
<li><b>RsrqFilterCoefficient</b>: Determines the strength of smoothing effect induced by layer 3 filtering of RSRQ in all attached UE; if set to 0, no layer 3 filtering is applicable</li>
</ul>
<b>ns3::LteUeRrc</b><br>
<ul>
<li><b>DataRadioBearerMap</b>: List of UE RadioBearerInfo for Data Radio Bearers by LCID.</li>
<li><b>Srb0</b>: SignalingRadioBearerInfo for SRB0</li>
<li><b>Srb1</b>: SignalingRadioBearerInfo for SRB1</li>
<li><b>CellId</b>: Serving cell identifier</li>
<li><b>C-RNTI</b>: Cell Radio Network Temporary Identifier</li>
<li><b>T300</b>: Timer for the RRC Connection Establishment procedure (i.e., the procedure is deemed as failed if it takes longer than this)</li>
</ul>
<b>ns3::LteRlcTm</b><br>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)</li>
</ul>
<b>ns3::LteRlcUm</b><br>
<ul>
<li><b>MaxTxBufferSize</b>: Maximum Size of the Transmission Buffer (in Bytes)</li>
</ul>
<b>ns3::LteRlcAm</b><br>
<ul>
<li><b>PollRetransmitTimer</b>: Value of the t-PollRetransmit timer (See section 7.3 of 3GPP TS 36.322)</li>
<li><b>ReorderingTimer</b>: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)</li>
<li><b>StatusProhibitTimer</b>: Value of the t-StatusProhibit timer (See section 7.3 of 3GPP TS 36.322)</li>
<li><b>ReportBufferStatusTimer</b>: How much to wait to issue a new Report Buffer Status since the last time a new SDU was received</li>
<li><b>TxOpportunityForRetxAlwaysBigEnough</b>: If true, always pretend that the size of a TxOpportunity is big enough for retransmission. If false (default and realistic behavior), no retx is performed unless the corresponding TxOpportunity is big enough.</li>
</ul>
<b>ns3::LteNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
</ul>
<b>ns3::LteEnbNetDevice</b><br>
<ul>
<li><b>LteEnbRrc</b>: The RRC associated to this EnbNetDevice</li>
<li><b>LteHandoverAlgorithm</b>: The handover algorithm associated to this EnbNetDevice</li>
<li><b>LteAnr</b>: The automatic neighbour relation function associated to this EnbNetDevice</li>
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice</li>
<li><b>LteEnbComponentCarrierManager</b>: The RRC associated to this EnbNetDevice</li>
<li><b>ComponentCarrierMap</b>: List of component carriers.</li>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>CellId</b>: Cell Identifier</li>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. </li>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. </li>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to</li>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.</li>
</ul>
<b>ns3::LteUeNetDevice</b><br>
<ul>
<li><b>EpcUeNas</b>: The NAS associated to this UeNetDevice</li>
<li><b>LteUeRrc</b>: The RRC associated to this UeNetDevice</li>
<li><b>LteUeComponentCarrierManager</b>: The ComponentCarrierManager associated to this UeNetDevice</li>
<li><b>ComponentCarrierMapUe</b>: List of all component Carrier.</li>
<li><b>Imsi</b>: International Mobile Subscriber Identity assigned to this UE</li>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. </li>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this UE is associated with, i.e., giving the UE access to cells which belong to this particular CSG. This restriction only applies to initial cell selection and EPC-enabled simulation. This does not revoke the UE's access to non-CSG cells. </li>
</ul>
<b>ns3::LteHelper</b><br>
<ul>
<li><b>Scheduler</b>: The type of scheduler to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::FfMacScheduler.</li>
<li><b>FfrAlgorithm</b>: The type of FFR algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteFfrAlgorithm.</li>
<li><b>HandoverAlgorithm</b>: The type of handover algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteHandoverAlgorithm.</li>
<li><b>PathlossModel</b>: The type of pathloss model to be used. The allowed values for this attributes are the type names of any class inheriting from ns3::PropagationLossModel.</li>
<li><b>FadingModel</b>: The type of fading model to be used.The allowed values for this attributes are the type names of any class inheriting from ns3::SpectrumPropagationLossModel.If the type is set to an empty string, no fading model is used.</li>
<li><b>UseIdealRrc</b>: If true, LteRrcProtocolIdeal will be used for RRC signaling. If false, LteRrcProtocolReal will be used.</li>
<li><b>AnrEnabled</b>: Activate or deactivate Automatic Neighbour Relation function</li>
<li><b>UsePdschForCqiGeneration</b>: If true, DL-CQI will be calculated from PDCCH as signal and PDSCH as interference If false, DL-CQI will be calculated from PDCCH as signal and PDCCH as interference  </li>
<li><b>EnbComponentCarrierManager</b>: The type of Component Carrier Manager to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting ns3::LteEnbComponentCarrierManager.</li>
<li><b>UeComponentCarrierManager</b>: The type of Component Carrier Manager to be used for UEs. The allowed values for this attributes are the type names of any class inheriting ns3::LteUeComponentCarrierManager.</li>
<li><b>UseCa</b>: If true, Carrier Aggregation feature is enabled and a valid Component Carrier Map is expected.If false, single carrier simulation.</li>
<li><b>NumberOfComponentCarriers</b>: Set the number of Component carrier to use If it is more than one and m_useCa is false, it will raise an error </li>
</ul>
<b>ns3::PointToPointEpcHelper</b><br>
<ul>
<li><b>S1uLinkDataRate</b>: The data rate to be used for the next S1-U link to be created</li>
<li><b>S1uLinkDelay</b>: The delay to be used for the next S1-U link to be created</li>
<li><b>S1uLinkMtu</b>: The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.</li>
<li><b>X2LinkDataRate</b>: The data rate to be used for the next X2 link to be created</li>
<li><b>X2LinkDelay</b>: The delay to be used for the next X2 link to be created</li>
<li><b>X2LinkMtu</b>: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.</li>
<li><b>S1uLinkPcapPrefix</b>: Prefix for Pcap generated by S1-U link</li>
<li><b>X2LinkPcapPrefix</b>: Prefix for Pcap generated by X2 link</li>
<li><b>X2LinkEnablePcap</b>: Enable Pcap for X2 link</li>
<li><b>S1uLinkEnablePcap</b>: Enable Pcap for X2 link</li>
</ul>
<b>ns3::RadioBearerStatsCalculator</b><br>
<ul>
<li><b>StartTime</b>: Start time of the on going epoch.</li>
<li><b>EpochDuration</b>: Epoch duration.</li>
<li><b>DlRlcOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlRlcOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
<li><b>DlPdcpOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlPdcpOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::PhyStatsCalculator</b><br>
<ul>
<li><b>DlRsrpSinrFilename</b>: Name of the file where the RSRP/SINR statistics will be saved.</li>
<li><b>UlSinrFilename</b>: Name of the file where the UE SINR statistics will be saved.</li>
<li><b>UlInterferenceFilename</b>: Name of the file where the interference statistics will be saved.</li>
</ul>
<b>ns3::MacStatsCalculator</b><br>
<ul>
<li><b>DlOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::PhyTxStatsCalculator</b><br>
<ul>
<li><b>DlTxOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlTxOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::PhyRxStatsCalculator</b><br>
<ul>
<li><b>DlRxOutputFilename</b>: Name of the file where the downlink results will be saved.</li>
<li><b>UlRxOutputFilename</b>: Name of the file where the uplink results will be saved.</li>
</ul>
<b>ns3::RadioEnvironmentMapHelper</b><br>
<ul>
<li><b>ChannelPath</b>: The path to the channel for which the Radio Environment Map is to be generated</li>
<li><b>OutputFile</b>: the filename to which the Radio Environment Map is saved</li>
<li><b>XMin</b>: The min x coordinate of the map.</li>
<li><b>YMin</b>: The min y coordinate of the map.</li>
<li><b>XMax</b>: The max x coordinate of the map.</li>
<li><b>YMax</b>: The max y coordinate of the map.</li>
<li><b>XRes</b>: The resolution (number of points) of the map along the x axis.</li>
<li><b>YRes</b>: The resolution (number of points) of the map along the y axis.</li>
<li><b>Z</b>: The value of the z coordinate for which the map is to be generated</li>
<li><b>StopWhenDone</b>: If true, Simulator::Stop () will be called as soon as the REM has been generated</li>
<li><b>NoisePower</b>: the power of the measuring instrument noise, in Watts. Default to a kT of -174 dBm with a noise figure of 9 dB and a bandwidth of 25 LTE Resource Blocks</li>
<li><b>MaxPointsPerIteration</b>: Maximum number of REM points to be calculated per iteration. Every point consumes approximately 5KB of memory.</li>
<li><b>Earfcn</b>: E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. </li>
<li><b>Bandwidth</b>: Transmission Bandwidth Configuration (in number of RBs) over which the SINR will be calculated</li>
<li><b>UseDataChannel</b>: If true, REM will be generated for PDSCH and for PDCCH otherwise </li>
<li><b>RbId</b>: Resource block Id, for which REM will be generated,default value is -1, what means REM will be averaged from all RBs</li>
</ul>
<b>ns3::LteHexGridEnbTopologyHelper</b><br>
<ul>
<li><b>InterSiteDistance</b>: The distance [m] between nearby sites</li>
<li><b>SectorOffset</b>: The offset [m] in the position for the node of each sector with respect to the center of the three-sector site</li>
<li><b>SiteHeight</b>: The height [m] of each site</li>
<li><b>MinX</b>: The x coordinate where the hex grid starts.</li>
<li><b>MinY</b>: The y coordinate where the hex grid starts.</li>
<li><b>GridWidth</b>: The number of sites in even rows (odd rows will have one additional site).</li>
</ul>
<b>ns3::FfMacScheduler</b><br>
<ul>
<li><b>UlCqiFilter</b>: The filter to apply on UL CQIs received</li>
</ul>
<b>ns3::RrFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::LteEnbMac</b><br>
<ul>
<li><b>NumberOfRaPreambles</b>: how many random access preambles are available for the contention based RACH process</li>
<li><b>PreambleTransMax</b>: Maximum number of random access preamble transmissions</li>
<li><b>RaResponseWindowSize</b>: length of the window (in TTIs) for the reception of the random access response (RAR); the resulting RAR timeout is this value + 3 ms</li>
<li><b>ComponentCarrierId</b>: ComponentCarrier Id, needed to reply on the appropriate sap.</li>
</ul>
<b>ns3::LteRadioBearerTag</b><br>
<ul>
<li><b>rnti</b>: The rnti that indicates the UE to which packet belongs</li>
<li><b>lcid</b>: The id within the UE identifying the logical channel to which the packet belongs</li>
</ul>
<b>ns3::EpsBearerTag</b><br>
<ul>
<li><b>rnti</b>: The rnti that indicates the UE which packet belongs</li>
<li><b>bid</b>: The EPS bearer id within the UE to which the packet belongs</li>
</ul>
<b>ns3::PfFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::FdMtFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TdMtFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TtaFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::FdBetFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TdBetFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::FdTbfqFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)</li>
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)</li>
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)</li>
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TdTbfqFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>DebtLimit</b>: Flow debt limit (default -625000 bytes)</li>
<li><b>CreditLimit</b>: Flow credit limit (default 625000 bytes)</li>
<li><b>TokenPoolSize</b>: The maximum value of flow token pool (default 1 bytes)</li>
<li><b>CreditableThreshold</b>: Threshold of flow credit (default 0 bytes)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::PssFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>PssFdSchedulerType</b>: FD scheduler in PSS (default value is PFsch)</li>
<li><b>nMux</b>: The number of UE selected by TD scheduler (default value is 0)</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::CqaFfMacScheduler</b><br>
<ul>
<li><b>CqiTimerThreshold</b>: The number of TTIs a CQI is valid (default 1000 - 1 sec.)</li>
<li><b>CqaMetric</b>: CqaFfMacScheduler metric type that can be: CqaFf, CqaPf</li>
<li><b>HarqEnabled</b>: Activate/Deactivate the HARQ [by default is active].</li>
<li><b>UlGrantMcs</b>: The MCS of the UL grant, must be [0..15] (default 0)</li>
</ul>
<b>ns3::TraceFadingLossModel</b><br>
<ul>
<li><b>TraceFilename</b>: Name of file to load a trace from.</li>
<li><b>TraceLength</b>: The total length of the fading trace (default value 10 s.)</li>
<li><b>SamplesNum</b>: The number of samples the trace is made of (default 10000)</li>
<li><b>WindowSize</b>: The size of the window for the fading trace (default value 0.5 s.)</li>
<li><b>RbNum</b>: The number of RB the trace is made of (default 100)</li>
<li><b>RngStreamSetSize</b>: The number of RNG streams reserved for the fading model. The maximum number of streams that are needed for an LTE FDD scenario is 2 * numUEs * numeNBs.</li>
</ul>
<b>ns3::A2A4RsrqHandoverAlgorithm</b><br>
<ul>
<li><b>ServingCellThreshold</b>: If the RSRQ of the serving cell is worse than this threshold, neighbour cells are consider for handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.</li>
<li><b>NeighbourCellOffset</b>: Minimum offset between the serving and the best neighbour cell to trigger the handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.</li>
</ul>
<b>ns3::A3RsrpHandoverAlgorithm</b><br>
<ul>
<li><b>Hysteresis</b>: Handover margin (hysteresis) in dB (rounded to the nearest multiple of 0.5 dB)</li>
<li><b>TimeToTrigger</b>: Time during which neighbour cell's RSRP must continuously higher than serving cell's RSRP in order to trigger a handover</li>
</ul>
<b>ns3::LteAnr</b><br>
<ul>
<li><b>Threshold</b>: Minimum RSRQ range value required for detecting a neighbour cell</li>
</ul>
<b>ns3::LteFfrAlgorithm</b><br>
<ul>
<li><b>FrCellTypeId</b>: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically</li>
<li><b>EnabledInUplink</b>: If FR algorithm will also work in Uplink, default value true</li>
</ul>
<b>ns3::LteFrHardAlgorithm</b><br>
<ul>
<li><b>UlSubBandOffset</b>: Uplink Offset in number of Resource Block Groups</li>
<li><b>UlSubBandwidth</b>: Uplink Transmission SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlSubBandOffset</b>: Downlink Offset in number of Resource Block Groups</li>
<li><b>DlSubBandwidth</b>: Downlink Transmission SubBandwidth Configuration in number of Resource Block Groups</li>
</ul>
<b>ns3::LteFrStrictAlgorithm</b><br>
<ul>
<li><b>UlCommonSubBandwidth</b>: Uplink Common SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlCommonSubBandwidth</b>: Downlink Common SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
</ul>
<b>ns3::LteFrSoftAlgorithm</b><br>
<ul>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>AllowCenterUeUseEdgeSubBand</b>: If true center UEs can receive on Edge SubBand RBGs</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
</ul>
<b>ns3::LteFfrSoftAlgorithm</b><br>
<ul>
<li><b>UlCommonSubBandwidth</b>: Uplink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandOffset</b>: Uplink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>UlEdgeSubBandwidth</b>: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlCommonSubBandwidth</b>: Downlink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandOffset</b>: Downlink Edge SubBand Offset in number of Resource Block Groups</li>
<li><b>DlEdgeSubBandwidth</b>: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>CenterRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Medium sub-band</li>
<li><b>EdgeRsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0</li>
<li><b>MediumAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Medium Sub-band, default value dB0</li>
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>MediumAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in medium areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
</ul>
<b>ns3::LteFfrEnhancedAlgorithm</b><br>
<ul>
<li><b>UlSubBandOffset</b>: Uplink SubBand Offset for this cell in number of Resource Block Groups</li>
<li><b>UlReuse3SubBandwidth</b>: Uplink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>UlReuse1SubBandwidth</b>: Uplink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlSubBandOffset</b>: Downlink SubBand Offset for this cell in number of Resource Block Groups</li>
<li><b>DlReuse3SubBandwidth</b>: Downlink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>DlReuse1SubBandwidth</b>: Downlink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>CenterAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0</li>
<li><b>EdgeAreaPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>DlCqiThreshold</b>: If the DL-CQI for RBG of is higher than this threshold, transmission on RBG is possible</li>
<li><b>UlCqiThreshold</b>: If the UL-CQI for RBG of is higher than this threshold, transmission on RBG is possible</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
</ul>
<b>ns3::LteFfrDistributedAlgorithm</b><br>
<ul>
<li><b>CalculationInterval</b>: Time interval between calculation of Edge sub-band, Default value 1 second</li>
<li><b>RsrqThreshold</b>: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band</li>
<li><b>RsrpDifferenceThreshold</b>: If the difference between the power of the signal received by UE from the serving cell and the power of the signal received from the adjacent cell is less than a RsrpDifferenceThreshold value, the cell weight is incremented</li>
<li><b>CenterPowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>EdgePowerOffset</b>: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0</li>
<li><b>EdgeRbNum</b>: Number of RB that can be used in edge Sub-band</li>
<li><b>CenterAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
<li><b>EdgeAreaTpc</b>: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2</li>
</ul>
<b>ns3::LteUePowerControl</b><br>
<ul>
<li><b>ClosedLoop</b>: If true Closed Loop mode will be active, otherwise Open Loop</li>
<li><b>AccumulationEnabled</b>: If true TCP accumulation mode will be active, otherwise absolute mode will be active</li>
<li><b>Alpha</b>: Value of Alpha parameter</li>
<li><b>Pcmax</b>: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3</li>
<li><b>Pcmin</b>: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3</li>
<li><b>PoNominalPusch</b>: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80</li>
<li><b>PoUePusch</b>: P_O_UE_PUSCH   INT(-8...7), Default value 0</li>
<li><b>PsrsOffset</b>: P_SRS_OFFSET   INT(0...15), Default value 7</li>
</ul>
<b>ns3::ComponentCarrier</b><br>
<ul>
<li><b>UlBandwidth</b>: Uplink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>DlBandwidth</b>: Downlink Transmission Bandwidth Configuration in number of Resource Blocks</li>
<li><b>DlEarfcn</b>: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. </li>
<li><b>UlEarfcn</b>: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. </li>
<li><b>CsgId</b>: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to</li>
<li><b>CsgIndication</b>: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.</li>
<li><b>PrimaryCarrier</b>: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed</li>
</ul>
<b>ns3::CcHelper</b><br>
<ul>
<li><b>NumberOfComponentCarriers</b>: Set the number of Component Carriers to setup per eNodeBCurrently the maximum Number of Component Carriers allowed is 2</li>
<li><b>UlEarfcn</b>: Set Ul Channel [EARFCN] for the first carrier component</li>
<li><b>DlEarfcn</b>: Set Dl Channel [EARFCN] for the first carrier component</li>
<li><b>DlBandwidth</b>: Set Dl Bandwidth for the first carrier component</li>
<li><b>UlBandwidth</b>: Set Dl Bandwidth for the first carrier component</li>
</ul>
<b>ns3::ComponentCarrierUe</b><br>
<ul>
<li><b>LteUePhy</b>: The PHY associated to this EnbNetDevice</li>
<li><b>LteUeMac</b>: The MAC associated to this UeNetDevice</li>
</ul>
<b>ns3::ComponentCarrierEnb</b><br>
<ul>
<li><b>LteEnbPhy</b>: The PHY associated to this EnbNetDevice</li>
<li><b>LteEnbMac</b>: The MAC associated to this EnbNetDevice</li>
<li><b>FfMacScheduler</b>: The scheduler associated to this EnbNetDevice</li>
<li><b>LteFfrAlgorithm</b>: The FFR algorithm associated to this EnbNetDevice</li>
</ul>
<b>ns3::EmuEpcHelper</b><br>
<ul>
<li><b>sgwDeviceName</b>: The name of the device used for the S1-U interface of the SGW</li>
<li><b>enbDeviceName</b>: The name of the device used for the S1-U interface of the eNB</li>
<li><b>SgwMacAddress</b>: MAC address used for the SGW </li>
<li><b>EnbMacAddressBase</b>: First 5 bytes of the Enb MAC address base</li>
</ul>
<b>ns3::LrWpanMac</b><br>
<ul>
<li><b>PanId</b>: 16-bit identifier of the associated PAN</li>
</ul>
<b>ns3::LrWpanNetDevice</b><br>
<ul>
<li><b>Channel</b>: The channel attached to this device</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>Mac</b>: The MAC layer attached to this device.</li>
<li><b>UseAcks</b>: Request acknowledgments for data frames.</li>
</ul>
<b>ns3::LrWpanLqiTag</b><br>
<ul>
<li><b>Lqi</b>: The lqi of the last packet received</li>
</ul>
<b>ns3::WifiPhy</b><br>
<ul>
<li><b>Frequency</b>: The operating center frequency (MHz)</li>
<li><b>ChannelWidth</b>: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.</li>
<li><b>ChannelNumber</b>: If set to non-zero defined value, will control Frequency and ChannelWidth assignment</li>
<li><b>EnergyDetectionThreshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.</li>
<li><b>CcaMode1Threshold</b>: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.</li>
<li><b>TxGain</b>: Transmission gain (dB).</li>
<li><b>RxGain</b>: Reception gain (dB).</li>
<li><b>TxPowerLevels</b>: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.</li>
<li><b>TxPowerEnd</b>: Maximum available transmission level (dbm).</li>
<li><b>TxPowerStart</b>: Minimum available transmission level (dbm).</li>
<li><b>RxNoiseFigure</b>: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".</li>
<li><b>State</b>: The state of the PHY layer.</li>
<li><b>ChannelSwitchDelay</b>: Delay between two short frames transmitted on different frequencies.</li>
<li><b>Antennas</b>: The number of antennas on the device.</li>
<li><b>MaxSupportedTxSpatialStreams</b>: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.</li>
<li><b>MaxSupportedRxSpatialStreams</b>: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.</li>
<li><b>ShortGuardEnabled</b>: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.</li>
<li><b>GuardInterval</b>: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.</li>
<li><b>LdpcEnabled</b>: Whether or not LDPC is enabled (not supported yet!).</li>
<li><b>STBCEnabled</b>: Whether or not STBC is enabled (not supported yet!).</li>
<li><b>GreenfieldEnabled</b>: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.</li>
<li><b>ShortPlcpPreambleSupported</b>: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.</li>
<li><b>FrameCaptureModel</b>: Ptr to an object that implements the frame capture model</li>
</ul>
<b>ns3::YansWifiChannel</b><br>
<ul>
<li><b>PropagationLossModel</b>: A pointer to the propagation loss model attached to this channel.</li>
<li><b>PropagationDelayModel</b>: A pointer to the propagation delay model attached to this channel.</li>
</ul>
<b>ns3::SpectrumWifiPhy</b><br>
<ul>
<li><b>DisableWifiReception</b>: Prevent Wi-Fi frame sync from ever happening</li>
</ul>
<b>ns3::WifiMacQueue</b><br>
<ul>
<li><b>MaxDelay</b>: If a packet stays longer than this delay in the queue, it is dropped.</li>
<li><b>DropPolicy</b>: Upon enqueue with full queue, drop oldest (DropOldest) or newest (DropNewest) packet</li>
</ul>
<b>ns3::Txop</b><br>
<ul>
<li><b>MinCw</b>: The minimum value of the contention window.</li>
<li><b>MaxCw</b>: The maximum value of the contention window.</li>
<li><b>Aifsn</b>: The AIFSN: the default value conforms to non-QOS.</li>
<li><b>TxopLimit</b>: The TXOP limit: the default value conforms to non-QoS.</li>
<li><b>Queue</b>: The WifiMacQueue object</li>
</ul>
<b>ns3::WifiMac</b><br>
<ul>
<li><b>CtsTimeout</b>: When this timeout expires, the RTS/CTS handshake has failed.</li>
<li><b>AckTimeout</b>: When this timeout expires, the DATA/ACK handshake has failed.</li>
<li><b>BasicBlockAckTimeout</b>: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.</li>
<li><b>CompressedBlockAckTimeout</b>: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.</li>
<li><b>Sifs</b>: The value of the SIFS constant.</li>
<li><b>EifsNoDifs</b>: The value of EIFS-DIFS.</li>
<li><b>Slot</b>: The duration of a Slot.</li>
<li><b>Pifs</b>: The value of the PIFS constant.</li>
<li><b>Rifs</b>: The value of the RIFS constant.</li>
<li><b>MaxPropagationDelay</b>: The maximum propagation delay. Unused for now.</li>
<li><b>Ssid</b>: The ssid we want to belong to.</li>
</ul>
<b>ns3::RegularWifiMac</b><br>
<ul>
<li><b>QosSupported</b>: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.</li>
<li><b>HtSupported</b>: This Boolean attribute is set to enable 802.11n support at this STA.</li>
<li><b>VhtSupported</b>: This Boolean attribute is set to enable 802.11ac support at this STA.</li>
<li><b>HeSupported</b>: This Boolean attribute is set to enable 802.11ax support at this STA.</li>
<li><b>CtsToSelfSupported</b>: Use CTS to Self when using a rate that is not in the basic rate set.</li>
<li><b>VO_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.</li>
<li><b>VI_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.</li>
<li><b>BE_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.</li>
<li><b>BK_MaxAmsduSize</b>: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.</li>
<li><b>VO_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.</li>
<li><b>VI_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.</li>
<li><b>BE_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.</li>
<li><b>BK_MaxAmpduSize</b>: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.</li>
<li><b>VO_BlockAckThreshold</b>: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>VI_BlockAckThreshold</b>: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>BE_BlockAckThreshold</b>: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>BK_BlockAckThreshold</b>: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.</li>
<li><b>VO_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>VI_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>BE_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>BK_BlockAckInactivityTimeout</b>: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.</li>
<li><b>ShortSlotTimeSupported</b>: Whether or not short slot time is supported (only used by ERP APs or STAs).</li>
<li><b>RifsSupported</b>: Whether or not RIFS is supported (only used by HT APs or STAs).</li>
<li><b>Txop</b>: The Txop object.</li>
<li><b>VO_Txop</b>: Queue that manages packets belonging to AC_VO access class.</li>
<li><b>VI_Txop</b>: Queue that manages packets belonging to AC_VI access class.</li>
<li><b>BE_Txop</b>: Queue that manages packets belonging to AC_BE access class.</li>
<li><b>BK_Txop</b>: Queue that manages packets belonging to AC_BK access class.</li>
</ul>
<b>ns3::InfrastructureWifiMac</b><br>
<ul>
<li><b>PcfSupported</b>: This Boolean attribute is set to enable PCF support at this STA</li>
</ul>
<b>ns3::WifiRemoteStationManager</b><br>
<ul>
<li><b>IsLowLatency</b>: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.</li>
<li><b>MaxSsrc</b>: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.</li>
<li><b>MaxSlrc</b>: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.</li>
<li><b>RtsCtsThreshold</b>: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.</li>
<li><b>FragmentationThreshold</b>: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.</li>
<li><b>NonUnicastMode</b>: Wifi mode used for non-unicast transmissions.</li>
<li><b>DefaultTxPowerLevel</b>: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.</li>
<li><b>ErpProtectionMode</b>: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self</li>
<li><b>HtProtectionMode</b>: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self</li>
</ul>
<b>ns3::ApWifiMac</b><br>
<ul>
<li><b>BeaconInterval</b>: Delay between two beacons</li>
<li><b>CfpMaxDuration</b>: The maximum size of the CFP (used when AP supports PCF)</li>
<li><b>BeaconJitter</b>: A uniform random variable to cause the initial beacon starting time (after simulation time 0) to be distributed between 0 and the BeaconInterval.</li>
<li><b>EnableBeaconJitter</b>: If beacons are enabled, whether to jitter the initial send event.</li>
<li><b>BeaconGeneration</b>: Whether or not beacons are generated.</li>
<li><b>EnableNonErpProtection</b>: Whether or not protection mechanism should be used when non-ERP STAs are present within the BSS.This parameter is only used when ERP is supported by the AP.</li>
<li><b>RifsMode</b>: If non-HT STAs are detected, whether to force RIFS to be disabled within the BSS.This parameter is only used when HT is supported by the AP.</li>
</ul>
<b>ns3::StaWifiMac</b><br>
<ul>
<li><b>ProbeRequestTimeout</b>: The duration to actively probe the channel.</li>
<li><b>WaitBeaconTimeout</b>: The duration to dwell on a channel while passively scanning for beacon</li>
<li><b>AssocRequestTimeout</b>: The interval between two consecutive association request attempts.</li>
<li><b>MaxMissedBeacons</b>: Number of beacons which much be consecutively missed before we attempt to restart association.</li>
<li><b>ActiveProbing</b>: If true, we send probe requests. If false, we don't.NOTE: if more than one STA in your simulation is using active probing, you should enable it at a different simulation time for each STA, otherwise all the STAs will start sending probes at the same time resulting in collisions. See bug 1060 for more info.</li>
</ul>
<b>ns3::WifiNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>Channel</b>: The channel attached to this device</li>
<li><b>Phy</b>: The PHY layer attached to this device.</li>
<li><b>Mac</b>: The MAC layer attached to this device.</li>
<li><b>RemoteStationManager</b>: The station manager attached to this device.</li>
</ul>
<b>ns3::ArfWifiManager</b><br>
<ul>
<li><b>TimerThreshold</b>: The 'timer' threshold in the ARF algorithm.</li>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.</li>
</ul>
<b>ns3::AarfWifiManager</b><br>
<ul>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.</li>
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.</li>
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.</li>
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.</li>
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.</li>
</ul>
<b>ns3::IdealWifiManager</b><br>
<ul>
<li><b>BerThreshold</b>: The maximum Bit Error Rate acceptable at any transmission mode</li>
</ul>
<b>ns3::ConstantRateWifiManager</b><br>
<ul>
<li><b>DataMode</b>: The transmission mode to use for every data packet transmission</li>
<li><b>ControlMode</b>: The transmission mode to use for every RTS packet transmission.</li>
</ul>
<b>ns3::AmrrWifiManager</b><br>
<ul>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes</li>
<li><b>FailureRatio</b>: Ratio of minimum erroneous transmissions needed to switch to a lower rate</li>
<li><b>SuccessRatio</b>: Ratio of maximum erroneous transmissions needed to switch to a higher rate</li>
<li><b>MaxSuccessThreshold</b>: Maximum number of consecutive success periods needed to switch to a higher rate</li>
<li><b>MinSuccessThreshold</b>: Minimum number of consecutive success periods needed to switch to a higher rate</li>
</ul>
<b>ns3::OnoeWifiManager</b><br>
<ul>
<li><b>UpdatePeriod</b>: The interval between decisions about rate control changes</li>
<li><b>RaiseThreshold</b>: Attempt to raise the rate if we hit that threshold</li>
<li><b>AddCreditThreshold</b>: Add credit threshold</li>
</ul>
<b>ns3::RraaWifiManager</b><br>
<ul>
<li><b>Basic</b>: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used</li>
<li><b>Timeout</b>: Timeout for the RRAA BASIC loss estimation block (s)</li>
<li><b>FrameLength</b>: The data frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>AckFrameLength</b>: The ACK frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>Alpha</b>: Constant for calculating the MTL threshold.</li>
<li><b>Beta</b>: Constant for calculating the ORI threshold.</li>
<li><b>Tau</b>: Constant for calculating the EWND size.</li>
</ul>
<b>ns3::AarfcdWifiManager</b><br>
<ul>
<li><b>SuccessK</b>: Multiplication factor for the success threshold in the AARF algorithm.</li>
<li><b>TimerK</b>: Multiplication factor for the timer threshold in the AARF algorithm.</li>
<li><b>MaxSuccessThreshold</b>: Maximum value of the success threshold in the AARF algorithm.</li>
<li><b>MinTimerThreshold</b>: The minimum value for the 'timer' threshold in the AARF algorithm.</li>
<li><b>MinSuccessThreshold</b>: The minimum value for the success threshold in the AARF algorithm.</li>
<li><b>MinRtsWnd</b>: Minimum value for Rts window of Aarf-CD</li>
<li><b>MaxRtsWnd</b>: Maximum value for Rts window of Aarf-CD</li>
<li><b>TurnOffRtsAfterRateDecrease</b>: If true the RTS mechanism will be turned off when the rate will be decreased</li>
<li><b>TurnOnRtsAfterRateIncrease</b>: If true the RTS mechanism will be turned on when the rate will be increased</li>
</ul>
<b>ns3::CaraWifiManager</b><br>
<ul>
<li><b>ProbeThreshold</b>: The number of consecutive transmissions failure to activate the RTS probe.</li>
<li><b>FailureThreshold</b>: The number of consecutive transmissions failure to decrease the rate.</li>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new rate.</li>
<li><b>Timeout</b>: The 'timer' in the CARA algorithm</li>
</ul>
<b>ns3::MinstrelWifiManager</b><br>
<ul>
<li><b>UpdateStatistics</b>: The interval between updating statistics table </li>
<li><b>LookAroundRate</b>: the percentage to try other rates</li>
<li><b>EWMA</b>: EWMA level</li>
<li><b>SampleColumn</b>: The number of columns used for sampling</li>
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime</li>
<li><b>PrintStats</b>: Print statistics table</li>
<li><b>PrintSamples</b>: Print samples table</li>
</ul>
<b>ns3::MinstrelHtWifiManager</b><br>
<ul>
<li><b>UpdateStatistics</b>: The interval between updating statistics table </li>
<li><b>LookAroundRate</b>: The percentage to try other rates (for legacy Minstrel)</li>
<li><b>EWMA</b>: EWMA level</li>
<li><b>SampleColumn</b>: The number of columns used for sampling</li>
<li><b>PacketLength</b>: The packet length used for calculating mode TxTime</li>
<li><b>UseVhtOnly</b>: Use only VHT MCSs (and not HT) when VHT is available</li>
<li><b>PrintStats</b>: Control the printing of the statistics table</li>
</ul>
<b>ns3::SnrTag</b><br>
<ul>
<li><b>Snr</b>: The snr of the last packet received</li>
</ul>
<b>ns3::ParfWifiManager</b><br>
<ul>
<li><b>AttemptThreshold</b>: The minimum number of transmission attempts to try a new power or rate.</li>
<li><b>SuccessThreshold</b>: The minimum number of successful transmissions to try a new power or rate.</li>
</ul>
<b>ns3::AparfWifiManager</b><br>
<ul>
<li><b>SuccessThreshold1</b>: The minimum number of successful transmissions in "High" state to try a new power or rate.</li>
<li><b>SuccessThreshold2</b>: The minimum number of successful transmissions in "Low" state to try a new power or rate.</li>
<li><b>FailThreshold</b>: The minimum number of failed transmissions to try a new power or rate.</li>
<li><b>PowerThreshold</b>: The maximum number of power changes.</li>
<li><b>PowerDecrementStep</b>: Step size for decrement the power.</li>
<li><b>PowerIncrementStep</b>: Step size for increment the power.</li>
<li><b>RateDecrementStep</b>: Step size for decrement the rate.</li>
<li><b>RateIncrementStep</b>: Step size for increment the rate.</li>
</ul>
<b>ns3::RrpaaWifiManager</b><br>
<ul>
<li><b>Basic</b>: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used.</li>
<li><b>Timeout</b>: Timeout for the RRAA-BASIC loss estimation block (s).</li>
<li><b>FrameLength</b>: The data frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>AckFrameLength</b>: The ACK frame length (in bytes) used for calculating mode TxTime.</li>
<li><b>Alpha</b>: Constant for calculating the MTL threshold.</li>
<li><b>Beta</b>: Constant for calculating the ORI threshold.</li>
<li><b>Tau</b>: Constant for calculating the EWND size.</li>
<li><b>Gamma</b>: Constant for Probabilistic Decision Table decrements.</li>
<li><b>Delta</b>: Constant for Probabilistic Decision Table increments.</li>
</ul>
<b>ns3::WifiRadioEnergyModel</b><br>
<ul>
<li><b>IdleCurrentA</b>: The default radio Idle current in Ampere.</li>
<li><b>CcaBusyCurrentA</b>: The default radio CCA Busy State current in Ampere.</li>
<li><b>TxCurrentA</b>: The radio Tx current in Ampere.</li>
<li><b>RxCurrentA</b>: The radio Rx current in Ampere.</li>
<li><b>SwitchingCurrentA</b>: The default radio Channel Switch current in Ampere.</li>
<li><b>SleepCurrentA</b>: The radio Sleep current in Ampere.</li>
<li><b>TxCurrentModel</b>: A pointer to the attached tx current model.</li>
</ul>
<b>ns3::LinearWifiTxCurrentModel</b><br>
<ul>
<li><b>Eta</b>: The efficiency of the power amplifier.</li>
<li><b>Voltage</b>: The supply voltage (in Volts).</li>
<li><b>IdleCurrent</b>: The current in the IDLE state (in Watts).</li>
</ul>
<b>ns3::SimpleFrameCaptureModel</b><br>
<ul>
<li><b>Margin</b>: Reception is switched if the newly arrived frame has a power higher than this value above the frame currently being received (expressed in dB).</li>
</ul>
<b>ns3::AthstatsWifiTraceSink</b><br>
<ul>
<li><b>Interval</b>: Time interval between reports</li>
</ul>
<b>ns3::ChannelCoordinator</b><br>
<ul>
<li><b>CchInterval</b>: CCH Interval, default value is 50ms.</li>
<li><b>SchInterval</b>: SCH Interval, default value is 50ms.</li>
<li><b>GuardInterval</b>: Guard Interval, default value is 4ms.</li>
</ul>
<b>ns3::WaveNetDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>Channel</b>: The channel attached to this device</li>
<li><b>PhyEntities</b>: The PHY entities attached to this device.</li>
<li><b>MacEntities</b>: The MAC layer attached to this device.</li>
<li><b>ChannelScheduler</b>: The channel scheduler attached to this device.</li>
<li><b>ChannelManager</b>: The channel manager attached to this device.</li>
<li><b>ChannelCoordinator</b>: The channel coordinator attached to this device.</li>
<li><b>VsaManager</b>: The VSA manager attached to this device.</li>
</ul>
<b>ns3::MeshPointDevice</b><br>
<ul>
<li><b>Mtu</b>: The MAC-level Maximum Transmission Unit</li>
<li><b>RoutingProtocol</b>: The mesh routing protocol used by this mesh point.</li>
</ul>
<b>ns3::MeshWifiInterfaceMac</b><br>
<ul>
<li><b>BeaconInterval</b>: Beacon Interval</li>
<li><b>RandomStart</b>: Window when beacon generating starts (uniform random) in seconds</li>
<li><b>BeaconGeneration</b>: Enable/Disable Beaconing.</li>
</ul>
<b>ns3::dot11s::PeerLink</b><br>
<ul>
<li><b>RetryTimeout</b>: Retry timeout</li>
<li><b>HoldingTimeout</b>: Holding timeout</li>
<li><b>ConfirmTimeout</b>: Confirm timeout</li>
<li><b>MaxRetries</b>: Maximum number of retries</li>
<li><b>MaxBeaconLoss</b>: Maximum number of lost beacons before link will be closed</li>
<li><b>MaxPacketFailure</b>: Maximum number of failed packets before link will be closed</li>
</ul>
<b>ns3::dot11s::PeerManagementProtocol</b><br>
<ul>
<li><b>MaxNumberOfPeerLinks</b>: Maximum number of peer links</li>
<li><b>MaxBeaconShiftValue</b>: Maximum number of TUs for beacon shifting</li>
<li><b>EnableBeaconCollisionAvoidance</b>: Enable/Disable Beacon collision avoidance.</li>
</ul>
<b>ns3::dot11s::HwmpProtocol</b><br>
<ul>
<li><b>RandomStart</b>: Random delay at first proactive PREQ</li>
<li><b>MaxQueueSize</b>: Maximum number of packets we can store when resolving route</li>
<li><b>Dot11MeshHWMPmaxPREQretries</b>: Maximum number of retries before we suppose the destination to be unreachable</li>
<li><b>Dot11MeshHWMPnetDiameterTraversalTime</b>: Time we suppose the packet to go from one edge of the network to another</li>
<li><b>Dot11MeshHWMPpreqMinInterval</b>: Minimal interval between to successive PREQs</li>
<li><b>Dot11MeshHWMPperrMinInterval</b>: Minimal interval between to successive PREQs</li>
<li><b>Dot11MeshHWMPactiveRootTimeout</b>: Lifetime of poractive routing information</li>
<li><b>Dot11MeshHWMPactivePathTimeout</b>: Lifetime of reactive routing information</li>
<li><b>Dot11MeshHWMPpathToRootInterval</b>: Interval between two successive proactive PREQs</li>
<li><b>Dot11MeshHWMPrannInterval</b>: Lifetime of poractive routing information</li>
<li><b>MaxTtl</b>: Initial value of Time To Live field</li>
<li><b>UnicastPerrThreshold</b>: Maximum number of PERR receivers, when we send a PERR as a chain of unicasts</li>
<li><b>UnicastPreqThreshold</b>: Maximum number of PREQ receivers, when we send a PREQ as a chain of unicasts</li>
<li><b>UnicastDataThreshold</b>: Maximum number ofbroadcast receivers, when we send a broadcast as a chain of unicasts</li>
<li><b>DoFlag</b>: Destination only HWMP flag</li>
<li><b>RfFlag</b>: Reply and forward flag</li>
</ul>
<b>ns3::dot11s::AirtimeLinkMetricCalculator</b><br>
<ul>
<li><b>TestLength</b>: Number of bytes in test frame (a constant 1024 in the standard)</li>
<li><b>Dot11MetricTid</b>: TID used to calculate metric (data rate)</li>
</ul>
<b>ns3::flame::FlameRtable</b><br>
<ul>
<li><b>Lifetime</b>: The lifetime of the routing entry</li>
</ul>
<b>ns3::flame::FlameProtocol</b><br>
<ul>
<li><b>BroadcastInterval</b>: How often we must send broadcast packets</li>
<li><b>MaxCost</b>: Cost threshold after which packet will be dropped</li>
</ul>
<b>ns3::Dot11sStack</b><br>
<ul>
<li><b>Root</b>: The MAC address of root mesh point.</li>
</ul>
<b>ns3::dsr::DsrRouting</b><br>
<ul>
<li><b>RouteCache</b>: The route cache for saving routes from route discovery process.</li>
<li><b>RreqTable</b>: The request table to manage route requests.</li>
<li><b>PassiveBuffer</b>: The passive buffer to manage promisucously received passive ack.</li>
<li><b>MaxSendBuffLen</b>: Maximum number of packets that can be stored in send buffer.</li>
<li><b>MaxSendBuffTime</b>: Maximum time packets can be queued in the send buffer .</li>
<li><b>MaxMaintLen</b>: Maximum number of packets that can be stored in maintenance buffer.</li>
<li><b>MaxMaintTime</b>: Maximum time packets can be queued in maintenance buffer.</li>
<li><b>MaxCacheLen</b>: Maximum number of route entries that can be stored in route cache.</li>
<li><b>RouteCacheTimeout</b>: Maximum time the route cache can be queued in route cache.</li>
<li><b>MaxEntriesEachDst</b>: Maximum number of route entries for a single destination to respond.</li>
<li><b>SendBuffInterval</b>: How often to check send buffer for packet with route.</li>
<li><b>NodeTraversalTime</b>: The time it takes to traverse two neighboring nodes.</li>
<li><b>RreqRetries</b>: Maximum number of retransmissions for request discovery of a route.</li>
<li><b>MaintenanceRetries</b>: Maximum number of retransmissions for data packets from maintenance buffer.</li>
<li><b>RequestTableSize</b>: Maximum number of request entries in the request table, set this as the number of nodes in the simulation.</li>
<li><b>RequestIdSize</b>: Maximum number of request source Ids in the request table.</li>
<li><b>UniqueRequestIdSize</b>: Maximum number of request Ids in the request table for a single destination.</li>
<li><b>NonPropRequestTimeout</b>: The timeout value for non-propagation request.</li>
<li><b>DiscoveryHopLimit</b>: The max discovery hop limit for route requests.</li>
<li><b>MaxSalvageCount</b>: The max salvage count for a single data packet.</li>
<li><b>BlacklistTimeout</b>: The time for a neighbor to stay in blacklist.</li>
<li><b>GratReplyHoldoff</b>: The time for gratuitous reply entry to expire.</li>
<li><b>BroadcastJitter</b>: The jitter time to avoid collision for broadcast packets.</li>
<li><b>LinkAckTimeout</b>: The time a packet in maintenance buffer wait for link acknowledgment.</li>
<li><b>TryLinkAcks</b>: The number of link acknowledgment to use.</li>
<li><b>PassiveAckTimeout</b>: The time a packet in maintenance buffer wait for passive acknowledgment.</li>
<li><b>TryPassiveAcks</b>: The number of passive acknowledgment to use.</li>
<li><b>RequestPeriod</b>: The base time interval between route requests.</li>
<li><b>MaxRequestPeriod</b>: The max time interval between route requests.</li>
<li><b>GraReplyTableSize</b>: The gratuitous reply table size.</li>
<li><b>CacheType</b>: Use Link Cache or use Path Cache</li>
<li><b>StabilityDecrFactor</b>: The stability decrease factor for link cache</li>
<li><b>StabilityIncrFactor</b>: The stability increase factor for link cache</li>
<li><b>InitStability</b>: The initial stability factor for link cache</li>
<li><b>MinLifeTime</b>: The minimal life time for link cache</li>
<li><b>UseExtends</b>: The extension time for link cache</li>
<li><b>EnableSubRoute</b>: Enables saving of sub route when receiving route error messages, only available when using path route cache</li>
<li><b>RetransIncr</b>: The increase time for retransmission timer when facing network congestion</li>
<li><b>MaxNetworkQueueSize</b>: The max number of packet to save in the network queue.</li>
<li><b>MaxNetworkQueueDelay</b>: The max time for a packet to stay in the network queue.</li>
<li><b>NumPriorityQueues</b>: The max number of packet to save in the network queue.</li>
<li><b>LinkAcknowledgment</b>: Enable Link layer acknowledgment mechanism</li>
</ul>
<b>ns3::dsr::DsrOptions</b><br>
<ul>
<li><b>OptionNumber</b>: The Dsr option number.</li>
</ul>
<b>ns3::aodv::RoutingProtocol</b><br>
<ul>
<li><b>HelloInterval</b>: HELLO messages emission interval.</li>
<li><b>TtlStart</b>: Initial TTL value for RREQ.</li>
<li><b>TtlIncrement</b>: TTL increment for each attempt using the expanding ring search for RREQ dissemination.</li>
<li><b>TtlThreshold</b>: Maximum TTL value for expanding ring search, TTL = NetDiameter is used beyond this value.</li>
<li><b>TimeoutBuffer</b>: Provide a buffer for the timeout.</li>
<li><b>RreqRetries</b>: Maximum number of retransmissions of RREQ to discover a route</li>
<li><b>RreqRateLimit</b>: Maximum number of RREQ per second.</li>
<li><b>RerrRateLimit</b>: Maximum number of RERR per second.</li>
<li><b>NodeTraversalTime</b>: Conservative estimate of the average one hop traversal time for packets and should include queuing delays, interrupt processing times and transfer times.</li>
<li><b>NextHopWait</b>: Period of our waiting for the neighbour's RREP_ACK = 10 ms + NodeTraversalTime</li>
<li><b>ActiveRouteTimeout</b>: Period of time during which the route is considered to be valid</li>
<li><b>MyRouteTimeout</b>: Value of lifetime field in RREP generating by this node = 2 * max(ActiveRouteTimeout, PathDiscoveryTime)</li>
<li><b>BlackListTimeout</b>: Time for which the node is put into the blacklist = RreqRetries * NetTraversalTime</li>
<li><b>DeletePeriod</b>: DeletePeriod is intended to provide an upper bound on the time for which an upstream node A can have a neighbor B as an active next hop for destination D, while B has invalidated the route to D. = 5 * max (HelloInterval, ActiveRouteTimeout)</li>
<li><b>NetDiameter</b>: Net diameter measures the maximum possible number of hops between two nodes in the network</li>
<li><b>NetTraversalTime</b>: Estimate of the average net traversal time = 2 * NodeTraversalTime * NetDiameter</li>
<li><b>PathDiscoveryTime</b>: Estimate of maximum time needed to find route in network = 2 * NetTraversalTime</li>
<li><b>MaxQueueLen</b>: Maximum number of packets that we allow a routing protocol to buffer.</li>
<li><b>MaxQueueTime</b>: Maximum time packets can be queued (in seconds)</li>
<li><b>AllowedHelloLoss</b>: Number of hello messages which may be loss for valid link.</li>
<li><b>GratuitousReply</b>: Indicates whether a gratuitous RREP should be unicast to the node originated route discovery.</li>
<li><b>DestinationOnly</b>: Indicates only the destination may respond to this RREQ.</li>
<li><b>EnableHello</b>: Indicates whether a hello messages enable.</li>
<li><b>EnableBroadcast</b>: Indicates whether a broadcast data packets forwarding enable.</li>
<li><b>UniformRv</b>: Access to the underlying UniformRandomVariable</li>
</ul>
<b>ns3::LteDataRadioBearerInfo</b><br>
<ul>
<li><b>DrbIdentity</b>: The id of this Data Radio Bearer</li>
<li><b>EpsBearerIdentity</b>: The id of the EPS bearer corresponding to this Data Radio Bearer</li>
<li><b>logicalChannelIdentity</b>: The id of the Logical Channel corresponding to this Data Radio Bearer</li>
<li><b>LteRlc</b>: RLC instance of the radio bearer.</li>
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.</li>
</ul>
<b>ns3::LteSignalingRadioBearerInfo</b><br>
<ul>
<li><b>SrbIdentity</b>: The id of this Signaling Radio Bearer</li>
<li><b>LteRlc</b>: RLC instance of the radio bearer.</li>
<li><b>LtePdcp</b>: PDCP instance of the radio bearer.</li>
</ul>
*/

/*!
\page GlobalValueList All GlobalValues

This is a list of all \ref ns3::GlobalValue instances.

<ul>
  <li><b>\anchor GlobalValueSimulatorImplementationType SimulatorImplementationType</b>: The object class to use as the simulator implementation.  Default value: ns3::DefaultSimulatorImpl.</li>
  <li><b>\anchor GlobalValueSchedulerType SchedulerType</b>: The object class to use as the scheduler implementation.  Default value: ns3::MapScheduler.</li>
  <li><b>\anchor GlobalValueRngSeed RngSeed</b>: The global seed of all rng streams.  Default value: 1.</li>
  <li><b>\anchor GlobalValueRngRun RngRun</b>: The substream index used for all streams.  Default value: 1.</li>
  <li><b>\anchor GlobalValueChecksumEnabled ChecksumEnabled</b>: A global switch to enable all checksums for all protocols.  Default value: false.</li>
</ul>
*/

/*!
\page LogComponentList All LogComponents

This is a list of all \ref ns3::LogComponent instances.

<ul>
<li><b>A2A4RsrqHandoverAlgorithm</b>: src/lte/model/a2-a4-rsrq-handover-algorithm.cc</li>
<li><b>A3RsrpHandoverAlgorithm</b>: src/lte/model/a3-rsrp-handover-algorithm.cc</li>
<li><b>AarfWifiManager</b>: src/wifi/model/aarf-wifi-manager.cc</li>
<li><b>AarfcdWifiManager</b>: src/wifi/model/aarfcd-wifi-manager.cc</li>
<li><b>AcousticModemEnergyModel</b>: src/uan/model/acoustic-modem-energy-model.cc</li>
<li><b>Address</b>: src/network/model/address.cc</li>
<li><b>AddressUtils</b>: src/network/utils/address-utils.cc</li>
<li><b>AdhocAlohaNoackIdealPhyHelper</b>: src/spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc</li>
<li><b>AdhocWifiMac</b>: src/wifi/model/adhoc-wifi-mac.cc</li>
<li><b>AlohaNoackMacHeader</b>: src/spectrum/model/aloha-noack-mac-header.cc</li>
<li><b>AlohaNoackNetDevice</b>: src/spectrum/model/aloha-noack-net-device.cc</li>
<li><b>AmrrWifiManager</b>: src/wifi/model/amrr-wifi-manager.cc</li>
<li><b>Angles</b>: src/antenna/model/angles.cc</li>
<li><b>AnimationInterface</b>: src/netanim/model/animation-interface.cc</li>
<li><b>AntennaModel</b>: src/antenna/model/antenna-model.cc</li>
<li><b>AodvNeighbors</b>: src/aodv/model/aodv-neighbor.cc</li>
<li><b>AodvRequestQueue</b>: src/aodv/model/aodv-rqueue.cc</li>
<li><b>AodvRoutingProtocol</b>: src/aodv/model/aodv-routing-protocol.cc</li>
<li><b>AodvRoutingTable</b>: src/aodv/model/aodv-rtable.cc</li>
<li><b>ApWifiMac</b>: src/wifi/model/ap-wifi-mac.cc</li>
<li><b>AparfWifiManager</b>: src/wifi/model/aparf-wifi-manager.cc</li>
<li><b>Application</b>: src/network/model/application.cc</li>
<li><b>ApplicationContainer</b>: src/network/helper/application-container.cc</li>
<li><b>ApplicationPacketProbe</b>: src/applications/model/application-packet-probe.cc</li>
<li><b>ArfWifiManager</b>: src/wifi/model/arf-wifi-manager.cc</li>
<li><b>ArpCache</b>: src/internet/model/arp-cache.cc</li>
<li><b>ArpHeader</b>: src/internet/model/arp-header.cc</li>
<li><b>ArpL3Protocol</b>: src/internet/model/arp-l3-protocol.cc</li>
<li><b>ArpQueueDiscItem</b>: src/internet/model/arp-queue-disc-item.cc</li>
<li><b>Asn1Header</b>: src/lte/model/lte-asn1-header.cc</li>
<li><b>Athstats</b>: src/wifi/helper/athstats-helper.cc</li>
<li><b>AttributeConstructionList</b>: src/core/model/attribute-construction-list.cc</li>
<li><b>AttributeIterator</b>: src/config-store/model/attribute-iterator.cc</li>
<li><b>AttributeValue</b>: src/core/model/attribute.cc</li>
<li><b>BSLinkManager</b>: src/wimax/model/bs-link-manager.cc</li>
<li><b>BSScheduler</b>: src/wimax/model/bs-scheduler.cc</li>
<li><b>BSSchedulerRtps</b>: src/wimax/model/bs-scheduler-rtps.cc</li>
<li><b>BSSchedulerSimple</b>: src/wimax/model/bs-scheduler-simple.cc</li>
<li><b>Backoff</b>: src/csma/model/backoff.cc</li>
<li><b>BandwidthManager</b>: src/wimax/model/bandwidth-manager.cc</li>
<li><b>BaseStationNetDevice</b>: src/wimax/model/bs-net-device.cc</li>
<li><b>BasicEnergyHarvester</b>: src/energy/model/basic-energy-harvester.cc</li>
<li><b>BasicEnergySource</b>: src/energy/model/basic-energy-source.cc</li>
<li><b>BlockAckAgreement</b>: src/wifi/model/block-ack-agreement.cc</li>
<li><b>BlockAckCache</b>: src/wifi/model/block-ack-cache.cc</li>
<li><b>BlockAckManager</b>: src/wifi/model/block-ack-manager.cc</li>
<li><b>Boolean</b>: src/core/model/boolean.cc</li>
<li><b>BooleanProbe</b>: src/stats/model/boolean-probe.cc</li>
<li><b>Breakpoint</b>: src/core/model/breakpoint.cc</li>
<li><b>BridgeChannel</b>: src/bridge/model/bridge-channel.cc</li>
<li><b>BridgeHelper</b>: src/bridge/helper/bridge-helper.cc</li>
<li><b>BridgeNetDevice</b>: src/bridge/model/bridge-net-device.cc</li>
<li><b>BsServiceFlowManager</b>: src/wimax/model/bs-service-flow-manager.cc</li>
<li><b>BsmApplication</b>: src/wave/model/bsm-application.cc</li>
<li><b>Buffer</b>: src/network/model/buffer.cc</li>
<li><b>Building</b>: src/buildings/model/building.cc</li>
<li><b>BuildingAllocator</b>: src/buildings/helper/building-allocator.cc</li>
<li><b>BuildingList</b>: src/buildings/model/building-list.cc</li>
<li><b>BuildingPositionAllocator</b>: src/buildings/helper/building-position-allocator.cc</li>
<li><b>BuildingsHelper</b>: src/buildings/helper/buildings-helper.cc</li>
<li><b>BuildingsPropagationLossModel</b>: src/buildings/model/buildings-propagation-loss-model.cc</li>
<li><b>BulkSendApplication</b>: src/applications/model/bulk-send-application.cc</li>
<li><b>BurstProfileManager</b>: src/wimax/model/burst-profile-manager.cc</li>
<li><b>ByteTagList</b>: src/network/model/byte-tag-list.cc</li>
<li><b>CalendarScheduler</b>: src/core/model/calendar-scheduler.cc</li>
<li><b>Callback</b>: src/core/model/callback.cc</li>
<li><b>CandidateQueue</b>: src/internet/model/candidate-queue.cc</li>
<li><b>CaraWifiManager</b>: src/wifi/model/cara-wifi-manager.cc</li>
<li><b>CcHelper</b>: src/lte/helper/cc-helper.cc</li>
<li><b>Channel</b>: src/network/model/channel.cc</li>
<li><b>ChannelAccessManager</b>: src/wifi/model/channel-access-manager.cc</li>
<li><b>ChannelCoordinator</b>: src/wave/model/channel-coordinator.cc</li>
<li><b>ChannelList</b>: src/network/model/channel-list.cc</li>
<li><b>ChannelManager</b>: src/wave/model/channel-manager.cc</li>
<li><b>ChannelScheduler</b>: src/wave/model/channel-scheduler.cc</li>
<li><b>CoDelQueueDisc</b>: src/traffic-control/model/codel-queue-disc.cc</li>
<li><b>CommandLine</b>: src/core/model/command-line.cc</li>
<li><b>ComponentCarrier</b>: src/lte/model/component-carrier.cc</li>
<li><b>ComponentCarrierEnb</b>: src/lte/model/component-carrier-enb.cc</li>
<li><b>ComponentCarrierUe</b>: src/lte/model/component-carrier-ue.cc</li>
<li><b>Config</b>: src/core/model/config.cc</li>
<li><b>ConfigStore</b>: src/config-store/model/config-store.cc</li>
<li><b>ConnectionManager</b>: src/wimax/model/connection-manager.cc</li>
<li><b>ConstantRateWifiManager</b>: src/wifi/model/constant-rate-wifi-manager.cc</li>
<li><b>ConstantSpectrumPropagationLossModel</b>: src/spectrum/model/constant-spectrum-propagation-loss.cc</li>
<li><b>ConstantVelocityHelper</b>: src/mobility/model/constant-velocity-helper.cc</li>
<li><b>CosineAntennaModel</b>: src/antenna/model/cosine-antenna-model.cc</li>
<li><b>Cost231PropagationLossModel</b>: src/propagation/model/cost231-propagation-loss-model.cc</li>
<li><b>CqaFfMacScheduler</b>: src/lte/model/cqa-ff-mac-scheduler.cc</li>
<li><b>CsmaChannel</b>: src/csma/model/csma-channel.cc</li>
<li><b>CsmaHelper</b>: src/csma/helper/csma-helper.cc</li>
<li><b>CsmaNetDevice</b>: src/csma/model/csma-net-device.cc</li>
<li><b>CsmaStarHelper</b>: src/csma-layout/model/csma-star-helper.cc</li>
<li><b>DataCalculator</b>: src/stats/model/data-calculator.cc</li>
<li><b>DataCollectionObject</b>: src/stats/model/data-collection-object.cc</li>
<li><b>DataCollector</b>: src/stats/model/data-collector.cc</li>
<li><b>DataOutputInterface</b>: src/stats/model/data-output-interface.cc</li>
<li><b>DataRate</b>: src/network/utils/data-rate.cc</li>
<li><b>DefaultChannelScheduler</b>: src/wave/model/default-channel-scheduler.cc</li>
<li><b>DefaultSimulatorImpl</b>: src/core/model/default-simulator-impl.cc</li>
<li><b>DeviceEnergyModel</b>: src/energy/model/device-energy-model.cc</li>
<li><b>DeviceEnergyModelContainer</b>: src/energy/model/device-energy-model-container.cc</li>
<li><b>DhcpClient</b>: src/internet-apps/model/dhcp-client.cc</li>
<li><b>DhcpHeader</b>: src/internet-apps/model/dhcp-header.cc</li>
<li><b>DhcpHelper</b>: src/internet-apps/helper/dhcp-helper.cc</li>
<li><b>DhcpServer</b>: src/internet-apps/model/dhcp-server.cc</li>
<li><b>DistributedSimulatorImpl</b>: src/mpi/model/distributed-simulator-impl.cc</li>
<li><b>Dot11sPeerManagementProtocol</b>: src/mesh/model/dot11s/peer-link.cc</li>
<li><b>Double</b>: src/core/model/double.cc</li>
<li><b>DoubleProbe</b>: src/stats/model/double-probe.cc</li>
<li><b>DropTailQueue</b>: src/network/utils/drop-tail-queue.cc</li>
<li><b>DsdvPacketQueue</b>: src/dsdv/model/dsdv-packet-queue.cc</li>
<li><b>DsdvRoutingProtocol</b>: src/dsdv/model/dsdv-routing-protocol.cc</li>
<li><b>DsdvRoutingTable</b>: src/dsdv/model/dsdv-rtable.cc</li>
<li><b>DsrErrorBuffer</b>: src/dsr/model/dsr-errorbuff.cc</li>
<li><b>DsrFsHeader</b>: src/dsr/model/dsr-fs-header.cc</li>
<li><b>DsrGraReplyTable</b>: src/dsr/model/dsr-gratuitous-reply-table.cc</li>
<li><b>DsrHelper</b>: src/dsr/helper/dsr-helper.cc</li>
<li><b>DsrMainHelper</b>: src/dsr/helper/dsr-main-helper.cc</li>
<li><b>DsrMaintainBuffer</b>: src/dsr/model/dsr-maintain-buff.cc</li>
<li><b>DsrNetworkQueue</b>: src/dsr/model/dsr-network-queue.cc</li>
<li><b>DsrOptionHeader</b>: src/dsr/model/dsr-option-header.cc</li>
<li><b>DsrOptions</b>: src/dsr/model/dsr-options.cc</li>
<li><b>DsrPassiveBuffer</b>: src/dsr/model/dsr-passive-buff.cc</li>
<li><b>DsrRouteCache</b>: src/dsr/model/dsr-rcache.cc</li>
<li><b>DsrRouting</b>: src/dsr/model/dsr-routing.cc</li>
<li><b>DsrRreqTable</b>: src/dsr/model/dsr-rreq-table.cc</li>
<li><b>DsrSendBuffer</b>: src/dsr/model/dsr-rsendbuff.cc</li>
<li><b>DsssErrorRateModel</b>: src/wifi/model/dsss-error-rate-model.cc</li>
<li><b>DynamicQueueLimits</b>: src/network/utils/dynamic-queue-limits.cc</li>
<li><b>EmuEpcHelper</b>: src/lte/helper/emu-epc-helper.cc</li>
<li><b>EmuFdNetDeviceHelper</b>: src/fd-net-device/helper/emu-fd-net-device-helper.cc</li>
<li><b>EnergyHarvester</b>: src/energy/model/energy-harvester.cc</li>
<li><b>EnergyHarvesterContainer</b>: src/energy/helper/energy-harvester-container.cc</li>
<li><b>EnergySource</b>: src/energy/model/energy-source.cc</li>
<li><b>Enum</b>: src/core/model/enum.cc</li>
<li><b>EpcEnbApplication</b>: src/lte/model/epc-enb-application.cc</li>
<li><b>EpcHelper</b>: src/lte/helper/epc-helper.cc</li>
<li><b>EpcMme</b>: src/lte/model/epc-mme.cc</li>
<li><b>EpcSgwPgwApplication</b>: src/lte/model/epc-sgw-pgw-application.cc</li>
<li><b>EpcTft</b>: src/lte/model/epc-tft.cc</li>
<li><b>EpcTftClassifier</b>: src/lte/model/epc-tft-classifier.cc</li>
<li><b>EpcUeNas</b>: src/lte/model/epc-ue-nas.cc</li>
<li><b>EpcX2</b>: src/lte/model/epc-x2.cc</li>
<li><b>EpcX2Header</b>: src/lte/model/epc-x2-header.cc</li>
<li><b>ErrorChannel</b>: src/network/utils/error-channel.cc</li>
<li><b>ErrorModel</b>: src/network/utils/error-model.cc</li>
<li><b>EthernetHeader</b>: src/network/utils/ethernet-header.cc</li>
<li><b>EthernetTrailer</b>: src/network/utils/ethernet-trailer.cc</li>
<li><b>EventId</b>: src/core/model/event-id.cc</li>
<li><b>EventImpl</b>: src/core/model/event-impl.cc</li>
<li><b>FatalImpl</b>: src/core/model/fatal-impl.cc</li>
<li><b>FdBetFfMacScheduler</b>: src/lte/model/fdbet-ff-mac-scheduler.cc</li>
<li><b>FdMtFfMacScheduler</b>: src/lte/model/fdmt-ff-mac-scheduler.cc</li>
<li><b>FdNetDevice</b>: src/fd-net-device/model/fd-net-device.cc</li>
<li><b>FdNetDeviceHelper</b>: src/fd-net-device/helper/fd-net-device-helper.cc</li>
<li><b>FdReader</b>: src/core/model/unix-fd-reader.cc</li>
<li><b>FdTbfqFfMacScheduler</b>: src/lte/model/fdtbfq-ff-mac-scheduler.cc</li>
<li><b>FfMacScheduler</b>: src/lte/model/ff-mac-scheduler.cc</li>
<li><b>FifoQueueDisc</b>: src/traffic-control/model/fifo-queue-disc.cc</li>
<li><b>FileAggregator</b>: src/stats/model/file-aggregator.cc</li>
<li><b>FileHelper</b>: src/stats/helper/file-helper.cc</li>
<li><b>FlameProtocol</b>: src/mesh/model/flame/flame-protocol.cc</li>
<li><b>FlameProtocolMac</b>: src/mesh/model/flame/flame-protocol-mac.cc</li>
<li><b>FlameRtable</b>: src/mesh/model/flame/flame-rtable.cc</li>
<li><b>FlowIdTag</b>: src/network/utils/flow-id-tag.cc</li>
<li><b>FlowMonitor</b>: src/flow-monitor/model/flow-monitor.cc</li>
<li><b>FqCoDelQueueDisc</b>: src/traffic-control/model/fq-codel-queue-disc.cc</li>
<li><b>GeographicPositions</b>: src/mobility/model/geographic-positions.cc</li>
<li><b>GlobalRouteManager</b>: src/internet/model/global-route-manager.cc</li>
<li><b>GlobalRouteManagerImpl</b>: src/internet/model/global-route-manager-impl.cc</li>
<li><b>GlobalRouter</b>: src/internet/model/global-router-interface.cc</li>
<li><b>GlobalRoutingHelper</b>: src/internet/helper/ipv4-global-routing-helper.cc</li>
<li><b>GlobalValue</b>: src/core/model/global-value.cc</li>
<li><b>GnuplotAggregator</b>: src/stats/model/gnuplot-aggregator.cc</li>
<li><b>GnuplotHelper</b>: src/stats/helper/gnuplot-helper.cc</li>
<li><b>GrantedTimeWindowMpiInterface</b>: src/mpi/model/granted-time-window-mpi-interface.cc</li>
<li><b>GtpuHeader</b>: src/lte/model/epc-gtpu-header.cc</li>
<li><b>HalfDuplexIdealPhy</b>: src/spectrum/model/half-duplex-ideal-phy.cc</li>
<li><b>HalfDuplexIdealPhySignalParameters</b>: src/spectrum/model/half-duplex-ideal-phy-signal-parameters.cc</li>
<li><b>Hash</b>: src/core/model/hash.cc</li>
<li><b>Hash-Fnv</b>: src/core/model/hash-fnv.cc</li>
<li><b>Hash-Murmur3</b>: src/core/model/hash-murmur3.cc</li>
<li><b>HashFunction</b>: src/core/model/hash-function.cc</li>
<li><b>Header</b>: src/network/model/header.cc</li>
<li><b>HeapScheduler</b>: src/core/model/heap-scheduler.cc</li>
<li><b>HigherLayerTxVectorTag</b>: src/wave/model/higher-tx-tag.cc</li>
<li><b>Histogram</b>: src/flow-monitor/model/histogram.cc</li>
<li><b>HwmpProtocol</b>: src/mesh/model/dot11s/hwmp-protocol.cc</li>
<li><b>HwmpProtocolMac</b>: src/mesh/model/dot11s/hwmp-protocol-mac.cc</li>
<li><b>HwmpRtable</b>: src/mesh/model/dot11s/hwmp-rtable.cc</li>
<li><b>HybridBuildingsPropagationLossModel</b>: src/buildings/model/hybrid-buildings-propagation-loss-model.cc</li>
<li><b>Icmpv4Header</b>: src/internet/model/icmpv4.cc</li>
<li><b>Icmpv4L4Protocol</b>: src/internet/model/icmpv4-l4-protocol.cc</li>
<li><b>Icmpv6Header</b>: src/internet/model/icmpv6-header.cc</li>
<li><b>Icmpv6L4Protocol</b>: src/internet/model/icmpv6-l4-protocol.cc</li>
<li><b>IdealWifiManager</b>: src/wifi/model/ideal-wifi-manager.cc</li>
<li><b>Inet6SocketAddress</b>: src/network/utils/inet6-socket-address.cc</li>
<li><b>InetSocketAddress</b>: src/network/utils/inet-socket-address.cc</li>
<li><b>InetTopologyReader</b>: src/topology-read/model/inet-topology-reader.cc</li>
<li><b>InfrastructureWifiMac</b>: src/wifi/model/infrastructure-wifi-mac.cc</li>
<li><b>Integer</b>: src/core/model/integer.cc</li>
<li><b>InterferenceHelper</b>: src/wifi/model/interference-helper.cc</li>
<li><b>InternetStackHelper</b>: src/internet/helper/internet-stack-helper.cc</li>
<li><b>InternetTraceHelper</b>: src/internet/helper/internet-trace-helper.cc</li>
<li><b>IpL4Protocol</b>: src/internet/model/ip-l4-protocol.cc</li>
<li><b>IpcsClassifier</b>: src/wimax/model/ipcs-classifier.cc</li>
<li><b>IpcsClassifierRecord</b>: src/wimax/model/ipcs-classifier-record.cc</li>
<li><b>Ipv4</b>: src/internet/model/ipv4.cc</li>
<li><b>Ipv4Address</b>: src/network/utils/ipv4-address.cc</li>
<li><b>Ipv4AddressGenerator</b>: src/internet/model/ipv4-address-generator.cc</li>
<li><b>Ipv4AddressHelper</b>: src/internet/helper/ipv4-address-helper.cc</li>
<li><b>Ipv4EndPoint</b>: src/internet/model/ipv4-end-point.cc</li>
<li><b>Ipv4EndPointDemux</b>: src/internet/model/ipv4-end-point-demux.cc</li>
<li><b>Ipv4FlowProbe</b>: src/flow-monitor/model/ipv4-flow-probe.cc</li>
<li><b>Ipv4GlobalRouting</b>: src/internet/model/ipv4-global-routing.cc</li>
<li><b>Ipv4Header</b>: src/internet/model/ipv4-header.cc</li>
<li><b>Ipv4Interface</b>: src/internet/model/ipv4-interface.cc</li>
<li><b>Ipv4InterfaceAddress</b>: src/internet/model/ipv4-interface-address.cc</li>
<li><b>Ipv4L3Protocol</b>: src/internet/model/ipv4-l3-protocol.cc</li>
<li><b>Ipv4ListRouting</b>: src/internet/model/ipv4-list-routing.cc</li>
<li><b>Ipv4NixVectorRouting</b>: src/nix-vector-routing/model/ipv4-nix-vector-routing.cc</li>
<li><b>Ipv4PacketFilter</b>: src/internet/model/ipv4-packet-filter.cc</li>
<li><b>Ipv4PacketInfoTag</b>: src/internet/model/ipv4-packet-info-tag.cc</li>
<li><b>Ipv4PacketProbe</b>: src/internet/model/ipv4-packet-probe.cc</li>
<li><b>Ipv4QueueDiscItem</b>: src/internet/model/ipv4-queue-disc-item.cc</li>
<li><b>Ipv4RawSocketFactory</b>: src/internet/model/ipv4-raw-socket-factory.cc</li>
<li><b>Ipv4RawSocketFactoryImpl</b>: src/internet/model/ipv4-raw-socket-factory-impl.cc</li>
<li><b>Ipv4RawSocketImpl</b>: src/internet/model/ipv4-raw-socket-impl.cc</li>
<li><b>Ipv4Route</b>: src/internet/model/ipv4-route.cc</li>
<li><b>Ipv4RoutingProtocol</b>: src/internet/model/ipv4-routing-protocol.cc</li>
<li><b>Ipv4RoutingTableEntry</b>: src/internet/model/ipv4-routing-table-entry.cc</li>
<li><b>Ipv4StaticRouting</b>: src/internet/model/ipv4-static-routing.cc</li>
<li><b>Ipv4StaticRoutingHelper</b>: src/internet/helper/ipv4-static-routing-helper.cc</li>
<li><b>Ipv6Address</b>: src/network/utils/ipv6-address.cc</li>
<li><b>Ipv6AddressGenerator</b>: src/internet/model/ipv6-address-generator.cc</li>
<li><b>Ipv6AddressHelper</b>: src/internet/helper/ipv6-address-helper.cc</li>
<li><b>Ipv6AutoconfiguredPrefix</b>: src/internet/model/ipv6-autoconfigured-prefix.cc</li>
<li><b>Ipv6EndPoint</b>: src/internet/model/ipv6-end-point.cc</li>
<li><b>Ipv6EndPointDemux</b>: src/internet/model/ipv6-end-point-demux.cc</li>
<li><b>Ipv6Extension</b>: src/internet/model/ipv6-extension.cc</li>
<li><b>Ipv6ExtensionHeader</b>: src/internet/model/ipv6-extension-header.cc</li>
<li><b>Ipv6FlowProbe</b>: src/flow-monitor/model/ipv6-flow-probe.cc</li>
<li><b>Ipv6Header</b>: src/internet/model/ipv6-header.cc</li>
<li><b>Ipv6Interface</b>: src/internet/model/ipv6-interface.cc</li>
<li><b>Ipv6InterfaceAddress</b>: src/internet/model/ipv6-interface-address.cc</li>
<li><b>Ipv6L3Protocol</b>: src/internet/model/ipv6-l3-protocol.cc</li>
<li><b>Ipv6ListRouting</b>: src/internet/model/ipv6-list-routing.cc</li>
<li><b>Ipv6Option</b>: src/internet/model/ipv6-option.cc</li>
<li><b>Ipv6OptionHeader</b>: src/internet/model/ipv6-option-header.cc</li>
<li><b>Ipv6PacketFilter</b>: src/internet/model/ipv6-packet-filter.cc</li>
<li><b>Ipv6PacketProbe</b>: src/internet/model/ipv6-packet-probe.cc</li>
<li><b>Ipv6PmtuCache</b>: src/internet/model/ipv6-pmtu-cache.cc</li>
<li><b>Ipv6QueueDiscItem</b>: src/internet/model/ipv6-queue-disc-item.cc</li>
<li><b>Ipv6RawSocketImpl</b>: src/internet/model/ipv6-raw-socket-impl.cc</li>
<li><b>Ipv6StaticRouting</b>: src/internet/model/ipv6-static-routing.cc</li>
<li><b>Ipv6StaticRoutingHelper</b>: src/internet/helper/ipv6-static-routing-helper.cc</li>
<li><b>IsotropicAntennaModel</b>: src/antenna/model/isotropic-antenna-model.cc</li>
<li><b>ItpCache</b>: src/internet/model/ItpCache.cc</li>
<li><b>ItpSink</b>: src/applications/model/itp-sink.cc</li>
<li><b>ItpSource</b>: src/applications/model/itp-source.cc</li>
<li><b>ItuR1238PropagationLossModel</b>: src/buildings/model/itu-r-1238-propagation-loss-model.cc</li>
<li><b>ItuR1411LosPropagationLossModel</b>: src/propagation/model/itu-r-1411-los-propagation-loss-model.cc</li>
<li><b>ItuR1411NlosOverRooftopPropagationLossModel</b>: src/propagation/model/itu-r-1411-nlos-over-rooftop-propagation-loss-model.cc</li>
<li><b>Jakes</b>: src/propagation/model/jakes-propagation-loss-model.cc</li>
<li><b>JakesProcess</b>: src/propagation/model/jakes-process.cc</li>
<li><b>Kun2600MhzPropagationLossModel</b>: src/propagation/model/kun-2600-mhz-propagation-loss-model.cc</li>
<li><b>LiIonEnergySource</b>: src/energy/model/li-ion-energy-source.cc</li>
<li><b>ListScheduler</b>: src/core/model/list-scheduler.cc</li>
<li><b>LlcSnalHeader</b>: src/network/utils/llc-snap-header.cc</li>
<li><b>LoopbackNetDevice</b>: src/internet/model/loopback-net-device.cc</li>
<li><b>LrWpanCsmaCa</b>: src/lr-wpan/model/lr-wpan-csmaca.cc</li>
<li><b>LrWpanErrorModel</b>: src/lr-wpan/model/lr-wpan-error-model.cc</li>
<li><b>LrWpanHelper</b>: src/lr-wpan/helper/lr-wpan-helper.cc</li>
<li><b>LrWpanInterferenceHelper</b>: src/lr-wpan/model/lr-wpan-interference-helper.cc</li>
<li><b>LrWpanMac</b>: src/lr-wpan/model/lr-wpan-mac.cc</li>
<li><b>LrWpanNetDevice</b>: src/lr-wpan/model/lr-wpan-net-device.cc</li>
<li><b>LrWpanPhy</b>: src/lr-wpan/model/lr-wpan-phy.cc</li>
<li><b>LrWpanSpectrumSignalParameters</b>: src/lr-wpan/model/lr-wpan-spectrum-signal-parameters.cc</li>
<li><b>LrWpanSpectrumValueHelper</b>: src/lr-wpan/model/lr-wpan-spectrum-value-helper.cc</li>
<li><b>LteAmc</b>: src/lte/model/lte-amc.cc</li>
<li><b>LteAnr</b>: src/lte/model/lte-anr.cc</li>
<li><b>LteChunkProcessor</b>: src/lte/model/lte-chunk-processor.cc</li>
<li><b>LteCommon</b>: src/lte/model/lte-common.cc</li>
<li><b>LteControlMessage</b>: src/lte/model/lte-control-messages.cc</li>
<li><b>LteEnbComponentCarrierManager</b>: src/lte/model/lte-enb-component-carrier-manager.cc</li>
<li><b>LteEnbMac</b>: src/lte/model/lte-enb-mac.cc</li>
<li><b>LteEnbNetDevice</b>: src/lte/model/lte-enb-net-device.cc</li>
<li><b>LteEnbPhy</b>: src/lte/model/lte-enb-phy.cc</li>
<li><b>LteEnbRrc</b>: src/lte/model/lte-enb-rrc.cc</li>
<li><b>LteFfrAlgorithm</b>: src/lte/model/lte-ffr-algorithm.cc</li>
<li><b>LteFfrDistributedAlgorithm</b>: src/lte/model/lte-ffr-distributed-algorithm.cc</li>
<li><b>LteFfrEnhancedAlgorithm</b>: src/lte/model/lte-ffr-enhanced-algorithm.cc</li>
<li><b>LteFfrSoftAlgorithm</b>: src/lte/model/lte-ffr-soft-algorithm.cc</li>
<li><b>LteFrHardAlgorithm</b>: src/lte/model/lte-fr-hard-algorithm.cc</li>
<li><b>LteFrNoOpAlgorithm</b>: src/lte/model/lte-fr-no-op-algorithm.cc</li>
<li><b>LteFrSoftAlgorithm</b>: src/lte/model/lte-fr-soft-algorithm.cc</li>
<li><b>LteFrStrictAlgorithm</b>: src/lte/model/lte-fr-strict-algorithm.cc</li>
<li><b>LteGlobalPathlossDatabase</b>: src/lte/helper/lte-global-pathloss-database.cc</li>
<li><b>LteHandoverAlgorithm</b>: src/lte/model/lte-handover-algorithm.cc</li>
<li><b>LteHarqPhy</b>: src/lte/model/lte-harq-phy.cc</li>
<li><b>LteHelper</b>: src/lte/helper/lte-helper.cc</li>
<li><b>LteHexGridEnbTopologyHelper</b>: src/lte/helper/lte-hex-grid-enb-topology-helper.cc</li>
<li><b>LteInterference</b>: src/lte/model/lte-interference.cc</li>
<li><b>LteMiErrorModel</b>: src/lte/model/lte-mi-error-model.cc</li>
<li><b>LteNetDevice</b>: src/lte/model/lte-net-device.cc</li>
<li><b>LtePdcp</b>: src/lte/model/lte-pdcp.cc</li>
<li><b>LtePdcpHeader</b>: src/lte/model/lte-pdcp-header.cc</li>
<li><b>LtePhy</b>: src/lte/model/lte-phy.cc</li>
<li><b>LteRlc</b>: src/lte/model/lte-rlc.cc</li>
<li><b>LteRlcAm</b>: src/lte/model/lte-rlc-am.cc</li>
<li><b>LteRlcAmHeader</b>: src/lte/model/lte-rlc-am-header.cc</li>
<li><b>LteRlcHeader</b>: src/lte/model/lte-rlc-header.cc</li>
<li><b>LteRlcTm</b>: src/lte/model/lte-rlc-tm.cc</li>
<li><b>LteRlcUm</b>: src/lte/model/lte-rlc-um.cc</li>
<li><b>LteRrcProtocolIdeal</b>: src/lte/model/lte-rrc-protocol-ideal.cc</li>
<li><b>LteRrcProtocolReal</b>: src/lte/model/lte-rrc-protocol-real.cc</li>
<li><b>LteSpectrumPhy</b>: src/lte/model/lte-spectrum-phy.cc</li>
<li><b>LteSpectrumSignalParameters</b>: src/lte/model/lte-spectrum-signal-parameters.cc</li>
<li><b>LteSpectrumValueHelper</b>: src/lte/model/lte-spectrum-value-helper.cc</li>
<li><b>LteStatsCalculator</b>: src/lte/helper/lte-stats-calculator.cc</li>
<li><b>LteUeComponentCarrierManager</b>: src/lte/model/lte-ue-component-carrier-manager.cc</li>
<li><b>LteUeMac</b>: src/lte/model/lte-ue-mac.cc</li>
<li><b>LteUeNetDevice</b>: src/lte/model/lte-ue-net-device.cc</li>
<li><b>LteUePhy</b>: src/lte/model/lte-ue-phy.cc</li>
<li><b>LteUePowerControl</b>: src/lte/model/lte-ue-power-control.cc</li>
<li><b>LteUeRrc</b>: src/lte/model/lte-ue-rrc.cc</li>
<li><b>LteVendorSpecificParameters</b>: src/lte/model/lte-vendor-specific-parameters.cc</li>
<li><b>MACMESSAGES</b>: src/wimax/model/mac-messages.cc</li>
<li><b>Mac16Address</b>: src/network/utils/mac16-address.cc</li>
<li><b>Mac48Address</b>: src/network/utils/mac48-address.cc</li>
<li><b>Mac64Address</b>: src/network/utils/mac64-address.cc</li>
<li><b>MacLow</b>: src/wifi/model/mac-low.cc</li>
<li><b>MacRxMiddle</b>: src/wifi/model/mac-rx-middle.cc</li>
<li><b>MacStatsCalculator</b>: src/lte/helper/mac-stats-calculator.cc</li>
<li><b>MacTxMiddle</b>: src/wifi/model/mac-tx-middle.cc</li>
<li><b>MakeEvent</b>: src/core/model/make-event.cc</li>
<li><b>MapScheduler</b>: src/core/model/map-scheduler.cc</li>
<li><b>MeshL2RoutingProtocol</b>: src/mesh/model/mesh-l2-routing-protocol.cc</li>
<li><b>MeshPointDevice</b>: src/mesh/model/mesh-point-device.cc</li>
<li><b>MeshWifiInterfaceMac</b>: src/mesh/model/mesh-wifi-interface-mac.cc</li>
<li><b>MicrowaveOvenSpectrumValue</b>: src/spectrum/model/microwave-oven-spectrum-value-helper.cc</li>
<li><b>MinstrelHtWifiManager</b>: src/wifi/model/minstrel-ht-wifi-manager.cc</li>
<li><b>MinstrelWifiManager</b>: src/wifi/model/minstrel-wifi-manager.cc</li>
<li><b>MobilityBuildingInfo</b>: src/buildings/model/mobility-building-info.cc</li>
<li><b>MobilityHelper</b>: src/mobility/helper/mobility-helper.cc</li>
<li><b>MpduAggregator</b>: src/wifi/model/mpdu-aggregator.cc</li>
<li><b>MpiInterface</b>: src/mpi/model/mpi-interface.cc</li>
<li><b>MqQueueDisc</b>: src/traffic-control/model/mq-queue-disc.cc</li>
<li><b>MsduAggregator</b>: src/wifi/model/msdu-aggregator.cc</li>
<li><b>MultiModelSpectrumChannel</b>: src/spectrum/model/multi-model-spectrum-channel.cc</li>
<li><b>Names</b>: src/core/model/names.cc</li>
<li><b>NdiscCache</b>: src/internet/model/ndisc-cache.cc</li>
<li><b>NetDevice</b>: src/network/model/net-device.cc</li>
<li><b>NetDeviceQueueInterface</b>: src/network/utils/net-device-queue-interface.cc</li>
<li><b>NistErrorRateModel</b>: src/wifi/model/nist-error-rate-model.cc</li>
<li><b>NixVector</b>: src/network/model/nix-vector.cc</li>
<li><b>NoOpComponentCarrierManager</b>: src/lte/model/no-op-component-carrier-manager.cc</li>
<li><b>NoOpHandoverAlgorithm</b>: src/lte/model/no-op-handover-algorithm.cc</li>
<li><b>Node</b>: src/network/model/node.cc</li>
<li><b>NodeList</b>: src/network/model/node-list.cc</li>
<li><b>NonCommunicatingNetDevice</b>: src/spectrum/model/non-communicating-net-device.cc</li>
<li><b>Ns2MobilityHelper</b>: src/mobility/helper/ns2-mobility-helper.cc</li>
<li><b>NullMessageMpiInterface</b>: src/mpi/model/null-message-mpi-interface.cc</li>
<li><b>NullMessageSimulatorImpl</b>: src/mpi/model/null-message-simulator-impl.cc</li>
<li><b>Object</b>: src/core/model/object.cc</li>
<li><b>ObjectBase</b>: src/core/model/object-base.cc</li>
<li><b>ObjectFactory</b>: src/core/model/object-factory.cc</li>
<li><b>ObjectPtrContainer</b>: src/core/model/object-ptr-container.cc</li>
<li><b>OcbWifiMac</b>: src/wave/model/ocb-wifi-mac.cc</li>
<li><b>OhBuildingsPropagationLossModel</b>: src/buildings/model/oh-buildings-propagation-loss-model.cc</li>
<li><b>OkumuraHataPropagationLossModel</b>: src/propagation/model/okumura-hata-propagation-loss-model.cc</li>
<li><b>OlsrHeader</b>: src/olsr/model/olsr-header.cc</li>
<li><b>OlsrRoutingProtocol</b>: src/olsr/model/olsr-routing-protocol.cc</li>
<li><b>OmnetDataOutput</b>: src/stats/model/omnet-data-output.cc</li>
<li><b>OnOffApplication</b>: src/applications/model/onoff-application.cc</li>
<li><b>OnoeWifiManager</b>: src/wifi/model/onoe-wifi-manager.cc</li>
<li><b>OrbisTopologyReader</b>: src/topology-read/model/orbis-topology-reader.cc</li>
<li><b>OutputStreamWrapper</b>: src/network/utils/output-stream-wrapper.cc</li>
<li><b>Packet</b>: src/network/model/packet.cc</li>
<li><b>PacketBB</b>: src/network/utils/packetbb.cc</li>
<li><b>PacketBurst</b>: src/network/utils/packet-burst.cc</li>
<li><b>PacketDataCalculators</b>: src/network/utils/packet-data-calculators.cc</li>
<li><b>PacketFilter</b>: src/traffic-control/model/packet-filter.cc</li>
<li><b>PacketLossCounter</b>: src/applications/model/packet-loss-counter.cc</li>
<li><b>PacketMetadata</b>: src/network/model/packet-metadata.cc</li>
<li><b>PacketProbe</b>: src/network/utils/packet-probe.cc</li>
<li><b>PacketSink</b>: src/applications/model/packet-sink.cc</li>
<li><b>PacketSocket</b>: src/network/utils/packet-socket.cc</li>
<li><b>PacketSocketAddress</b>: src/network/utils/packet-socket-address.cc</li>
<li><b>PacketSocketClient</b>: src/network/utils/packet-socket-client.cc</li>
<li><b>PacketSocketFactory</b>: src/network/utils/packet-socket-factory.cc</li>
<li><b>PacketSocketServer</b>: src/network/utils/packet-socket-server.cc</li>
<li><b>PacketTagList</b>: src/network/model/packet-tag-list.cc</li>
<li><b>ParabolicAntennaModel</b>: src/antenna/model/parabolic-antenna-model.cc</li>
<li><b>ParfWifiManager</b>: src/wifi/model/parf-wifi-manager.cc</li>
<li><b>PcapFile</b>: src/network/utils/pcap-file.cc</li>
<li><b>PcapFileWrapper</b>: src/network/utils/pcap-file-wrapper.cc</li>
<li><b>PeerManagementProtocol</b>: src/mesh/model/dot11s/peer-management-protocol.cc</li>
<li><b>PeerManagementProtocolMac</b>: src/mesh/model/dot11s/peer-management-protocol-mac.cc</li>
<li><b>PendingData</b>: src/internet/model/pending-data.cc</li>
<li><b>PfFfMacScheduler</b>: src/lte/model/pf-ff-mac-scheduler.cc</li>
<li><b>PfifoFastQueueDisc</b>: src/traffic-control/model/pfifo-fast-queue-disc.cc</li>
<li><b>PhyRxStatsCalculator</b>: src/lte/helper/phy-rx-stats-calculator.cc</li>
<li><b>PhyStatsCalculator</b>: src/lte/helper/phy-stats-calculator.cc</li>
<li><b>PhyTxStatsCalculator</b>: src/lte/helper/phy-tx-stats-calculator.cc</li>
<li><b>PieQueueDisc</b>: src/traffic-control/model/pie-queue-disc.cc</li>
<li><b>Ping6Application</b>: src/internet-apps/model/ping6.cc</li>
<li><b>PointToPointChannel</b>: src/point-to-point/model/point-to-point-channel.cc</li>
<li><b>PointToPointDumbbellHelper</b>: src/point-to-point-layout/model/point-to-point-dumbbell.cc</li>
<li><b>PointToPointEpcHelper</b>: src/lte/helper/point-to-point-epc-helper.cc</li>
<li><b>PointToPointGridHelper</b>: src/point-to-point-layout/model/point-to-point-grid.cc</li>
<li><b>PointToPointHelper</b>: src/point-to-point/helper/point-to-point-helper.cc</li>
<li><b>PointToPointNetDevice</b>: src/point-to-point/model/point-to-point-net-device.cc</li>
<li><b>PointToPointRemoteChannel</b>: src/point-to-point/model/point-to-point-remote-channel.cc</li>
<li><b>PointToPointStarHelper</b>: src/point-to-point-layout/model/point-to-point-star.cc</li>
<li><b>Pointer</b>: src/core/model/pointer.cc</li>
<li><b>PositionAllocator</b>: src/mobility/model/position-allocator.cc</li>
<li><b>PppHeader</b>: src/point-to-point/model/ppp-header.cc</li>
<li><b>PrintIntrospectedDoxygen</b>: utils/print-introspected-doxygen.cc</li>
<li><b>PrioQueueDisc</b>: src/traffic-control/model/prio-queue-disc.cc</li>
<li><b>Probe</b>: src/stats/model/probe.cc</li>
<li><b>PropagationLossModel</b>: src/propagation/model/propagation-loss-model.cc</li>
<li><b>PssFfMacScheduler</b>: src/lte/model/pss-ff-mac-scheduler.cc</li>
<li><b>QosTxop</b>: src/wifi/model/qos-txop.cc</li>
<li><b>Queue</b>: src/network/utils/queue.cc</li>
<li><b>QueueDisc</b>: src/traffic-control/model/queue-disc.cc</li>
<li><b>QueueItem</b>: src/network/utils/queue-item.cc</li>
<li><b>QueueLimits</b>: src/network/utils/queue-limits.cc</li>
<li><b>QueueSize</b>: src/network/utils/queue-size.cc</li>
<li><b>RadioBearerStatsCalculator</b>: src/lte/helper/radio-bearer-stats-calculator.cc</li>
<li><b>RadioBearerStatsConnector</b>: src/lte/helper/radio-bearer-stats-connector.cc</li>
<li><b>RadioEnvironmentMapHelper</b>: src/lte/helper/radio-environment-map-helper.cc</li>
<li><b>RadiotapHeader</b>: src/network/utils/radiotap-header.cc</li>
<li><b>RadvdApplication</b>: src/internet-apps/model/radvd.cc</li>
<li><b>RadvdHelper</b>: src/internet-apps/helper/radvd-helper.cc</li>
<li><b>RadvdInterface</b>: src/internet-apps/model/radvd-interface.cc</li>
<li><b>RadvdPrefix</b>: src/internet-apps/model/radvd-prefix.cc</li>
<li><b>RandomDirection2dMobilityModel</b>: src/mobility/model/random-direction-2d-mobility-model.cc</li>
<li><b>RandomVariableStream</b>: src/core/model/random-variable-stream.cc</li>
<li><b>RandomVariableStreamHelper</b>: src/core/helper/random-variable-stream-helper.cc</li>
<li><b>RandomWalk2d</b>: src/mobility/model/random-walk-2d-mobility-model.cc</li>
<li><b>RawTextConfig</b>: src/config-store/model/raw-text-config.cc</li>
<li><b>RealtimeSimulatorImpl</b>: src/core/model/realtime-simulator-impl.cc</li>
<li><b>RedQueueDisc</b>: src/traffic-control/model/red-queue-disc.cc</li>
<li><b>RefCountBase</b>: src/core/model/ref-count-base.cc</li>
<li><b>RegularWifiMac</b>: src/wifi/model/regular-wifi-mac.cc</li>
<li><b>RemSpectrumPhy</b>: src/lte/model/rem-spectrum-phy.cc</li>
<li><b>Rip</b>: src/internet/model/rip.cc</li>
<li><b>RipHeader</b>: src/internet/model/rip-header.cc</li>
<li><b>RipNg</b>: src/internet/model/ripng.cc</li>
<li><b>RipNgHeader</b>: src/internet/model/ripng-header.cc</li>
<li><b>RngSeedManager</b>: src/core/model/rng-seed-manager.cc</li>
<li><b>RngStream</b>: src/core/model/rng-stream.cc</li>
<li><b>RocketfuelTopologyReader</b>: src/topology-read/model/rocketfuel-topology-reader.cc</li>
<li><b>RrFfMacScheduler</b>: src/lte/model/rr-ff-mac-scheduler.cc</li>
<li><b>RraaWifiManager</b>: src/wifi/model/rraa-wifi-manager.cc</li>
<li><b>RrcHeader</b>: src/lte/model/lte-rrc-header.cc</li>
<li><b>RrpaaWifiManager</b>: src/wifi/model/rrpaa-wifi-manager.cc</li>
<li><b>RttEstimator</b>: src/internet/model/rtt-estimator.cc</li>
<li><b>RttEstimator1</b>: src/internet/model/rtt-estimator1.cc</li>
<li><b>RvBatteryModel</b>: src/energy/model/rv-battery-model.cc</li>
<li><b>SNRToBlockErrorRateManager</b>: src/wimax/model/snr-to-block-error-rate-manager.cc</li>
<li><b>SSLinkManager</b>: src/wimax/model/ss-link-manager.cc</li>
<li><b>SSManager</b>: src/wimax/model/ss-manager.cc</li>
<li><b>SSScheduler</b>: src/wimax/model/ss-scheduler.cc</li>
<li><b>Scheduler</b>: src/core/model/scheduler.cc</li>
<li><b>SeqTsHeader</b>: src/applications/model/seq-ts-header.cc</li>
<li><b>ServiceFlowManager</b>: src/wimax/model/service-flow-manager.cc</li>
<li><b>ShannonSpectrumErrorModel</b>: src/spectrum/model/spectrum-error-model.cc</li>
<li><b>SimpleChannel</b>: src/network/utils/simple-channel.cc</li>
<li><b>SimpleDeviceEnergyModel</b>: src/energy/model/simple-device-energy-model.cc</li>
<li><b>SimpleFrameCaptureModel</b>: src/wifi/model/simple-frame-capture-model.cc</li>
<li><b>SimpleNetDevice</b>: src/network/utils/simple-net-device.cc</li>
<li><b>SimpleNetDeviceHelper</b>: src/network/helper/simple-net-device-helper.cc</li>
<li><b>SimpleOfdmWimaxPhy</b>: src/wimax/model/simple-ofdm-wimax-phy.cc</li>
<li><b>SimpleUeComponentCarrierManager</b>: src/lte/model/simple-ue-component-carrier-manager.cc</li>
<li><b>Simulator</b>: src/core/model/simulator.cc</li>
<li><b>SimulatorImpl</b>: src/core/model/simulator-impl.cc</li>
<li><b>SingleModelSpectrumChannel</b>: src/spectrum/model/single-model-spectrum-channel.cc</li>
<li><b>SixLowPanHelper</b>: src/sixlowpan/helper/sixlowpan-helper.cc</li>
<li><b>SixLowPanNetDevice</b>: src/sixlowpan/model/sixlowpan-net-device.cc</li>
<li><b>SllHeader</b>: src/network/utils/sll-header.cc</li>
<li><b>Socket</b>: src/network/model/socket.cc</li>
<li><b>SocketFactory</b>: src/network/model/socket-factory.cc</li>
<li><b>SpectrumAnalyzer</b>: src/spectrum/model/spectrum-analyzer.cc</li>
<li><b>SpectrumAnalyzerHelper</b>: src/spectrum/helper/spectrum-analyzer-helper.cc</li>
<li><b>SpectrumChannel</b>: src/spectrum/model/spectrum-channel.cc</li>
<li><b>SpectrumConverter</b>: src/spectrum/model/spectrum-converter.cc</li>
<li><b>SpectrumInterference</b>: src/spectrum/model/spectrum-interference.cc</li>
<li><b>SpectrumModel</b>: src/spectrum/model/spectrum-model.cc</li>
<li><b>SpectrumPhy</b>: src/spectrum/model/spectrum-phy.cc</li>
<li><b>SpectrumPropagationLossModel</b>: src/spectrum/model/spectrum-propagation-loss-model.cc</li>
<li><b>SpectrumSignalParameters</b>: src/spectrum/model/spectrum-signal-parameters.cc</li>
<li><b>SpectrumValue</b>: src/spectrum/model/spectrum-value.cc</li>
<li><b>SpectrumWifiHelper</b>: src/wifi/helper/spectrum-wifi-helper.cc</li>
<li><b>SpectrumWifiPhy</b>: src/wifi/model/spectrum-wifi-phy.cc</li>
<li><b>SqliteDataOutput</b>: src/stats/model/sqlite-data-output.cc</li>
<li><b>SsServiceFlowManager</b>: src/wimax/model/ss-service-flow-manager.cc</li>
<li><b>StaWifiMac</b>: src/wifi/model/sta-wifi-mac.cc</li>
<li><b>SubscriberStationNetDevice</b>: src/wimax/model/ss-net-device.cc</li>
<li><b>SupportedRates</b>: src/wifi/model/supported-rates.cc</li>
<li><b>Synchronizer</b>: src/core/model/synchronizer.cc</li>
<li><b>SystemCondition</b>: src/core/model/unix-system-condition.cc</li>
<li><b>SystemMutex</b>: src/core/model/unix-system-mutex.cc</li>
<li><b>SystemPath</b>: src/core/model/system-path.cc</li>
<li><b>SystemThread</b>: src/core/model/system-thread.cc</li>
<li><b>SystemWallClockMs</b>: src/core/model/unix-system-wall-clock-ms.cc</li>
<li><b>TagBuffer</b>: src/network/model/tag-buffer.cc</li>
<li><b>TapBridge</b>: src/tap-bridge/model/tap-bridge.cc</li>
<li><b>TapBridgeHelper</b>: src/tap-bridge/helper/tap-bridge-helper.cc</li>
<li><b>TapFdNetDeviceHelper</b>: src/fd-net-device/helper/tap-fd-net-device-helper.cc</li>
<li><b>TbfQueueDisc</b>: src/traffic-control/model/tbf-queue-disc.cc</li>
<li><b>TcpBic</b>: src/internet/model/tcp-bic.cc</li>
<li><b>TcpCongestionOps</b>: src/internet/model/tcp-congestion-ops.cc</li>
<li><b>TcpHeader</b>: src/internet/model/tcp-header.cc</li>
<li><b>TcpHighSpeed</b>: src/internet/model/tcp-highspeed.cc</li>
<li><b>TcpHtcp</b>: src/internet/model/tcp-htcp.cc</li>
<li><b>TcpHybla</b>: src/internet/model/tcp-hybla.cc</li>
<li><b>TcpIllinois</b>: src/internet/model/tcp-illinois.cc</li>
<li><b>TcpL4Protocol</b>: src/internet/model/tcp-l4-protocol.cc</li>
<li><b>TcpLedbat</b>: src/internet/model/tcp-ledbat.cc</li>
<li><b>TcpLp</b>: src/internet/model/tcp-lp.cc</li>
<li><b>TcpOption</b>: src/internet/model/tcp-option.cc</li>
<li><b>TcpOptionRfc793</b>: src/internet/model/tcp-option-rfc793.cc</li>
<li><b>TcpOptionSack</b>: src/internet/model/tcp-option-sack.cc</li>
<li><b>TcpOptionSackPermitted</b>: src/internet/model/tcp-option-sack-permitted.cc</li>
<li><b>TcpOptionTS</b>: src/internet/model/tcp-option-ts.cc</li>
<li><b>TcpOptionWinScale</b>: src/internet/model/tcp-option-winscale.cc</li>
<li><b>TcpPrrRecovery</b>: src/internet/model/tcp-prr-recovery.cc</li>
<li><b>TcpRecoveryOps</b>: src/internet/model/tcp-recovery-ops.cc</li>
<li><b>TcpRxBuffer</b>: src/internet/model/tcp-rx-buffer.cc</li>
<li><b>TcpScalable</b>: src/internet/model/tcp-scalable.cc</li>
<li><b>TcpSocket</b>: src/internet/model/tcp-socket.cc</li>
<li><b>TcpSocketBase</b>: src/internet/model/tcp-socket-base.cc</li>
<li><b>TcpTxBuffer</b>: src/internet/model/tcp-tx-buffer.cc</li>
<li><b>TcpVegas</b>: src/internet/model/tcp-vegas.cc</li>
<li><b>TcpVeno</b>: src/internet/model/tcp-veno.cc</li>
<li><b>TcpWestwood</b>: src/internet/model/tcp-westwood.cc</li>
<li><b>TcpYeah</b>: src/internet/model/tcp-yeah.cc</li>
<li><b>TdBetFfMacScheduler</b>: src/lte/model/tdbet-ff-mac-scheduler.cc</li>
<li><b>TdMtFfMacScheduler</b>: src/lte/model/tdmt-ff-mac-scheduler.cc</li>
<li><b>TdTbfqFfMacScheduler</b>: src/lte/model/tdtbfq-ff-mac-scheduler.cc</li>
<li><b>Test</b>: src/core/model/test.cc</li>
<li><b>ThreeGppHttpClient</b>: src/applications/model/three-gpp-http-client.cc</li>
<li><b>ThreeGppHttpHeader</b>: src/applications/model/three-gpp-http-header.cc</li>
<li><b>ThreeGppHttpServer</b>: src/applications/model/three-gpp-http-server.cc</li>
<li><b>ThreeGppHttpVariables</b>: src/applications/model/three-gpp-http-variables.cc</li>
<li><b>Time</b>: src/core/model/time.cc</li>
<li><b>TimeDataCalculators</b>: src/stats/model/time-data-calculators.cc</li>
<li><b>TimeProbe</b>: src/stats/model/time-probe.cc</li>
<li><b>TimeSeriesAdaptor</b>: src/stats/model/time-series-adaptor.cc</li>
<li><b>Timer</b>: src/core/model/timer.cc</li>
<li><b>Tlv</b>: src/wimax/model/wimax-tlv.cc</li>
<li><b>TopologyReader</b>: src/topology-read/model/topology-reader.cc</li>
<li><b>TopologyReaderHelper</b>: src/topology-read/helper/topology-reader-helper.cc</li>
<li><b>TraceFadingLossModel</b>: src/lte/model/trace-fading-loss-model.cc</li>
<li><b>TraceHelper</b>: src/network/helper/trace-helper.cc</li>
<li><b>TraceSourceAccessor</b>: src/core/model/trace-source-accessor.cc</li>
<li><b>TrafficControlHelper</b>: src/traffic-control/helper/traffic-control-helper.cc</li>
<li><b>TrafficControlLayer</b>: src/traffic-control/model/traffic-control-layer.cc</li>
<li><b>Trailer</b>: src/network/model/trailer.cc</li>
<li><b>TtaFfMacScheduler</b>: src/lte/model/tta-ff-mac-scheduler.cc</li>
<li><b>TvSpectrumTransmitter</b>: src/spectrum/model/tv-spectrum-transmitter.cc</li>
<li><b>TvSpectrumTransmitterHelper</b>: src/spectrum/helper/tv-spectrum-transmitter-helper.cc</li>
<li><b>Txop</b>: src/wifi/model/txop.cc</li>
<li><b>TypeId</b>: src/core/model/type-id.cc</li>
<li><b>UanChannel</b>: src/uan/model/uan-channel.cc</li>
<li><b>UanHelper</b>: src/uan/helper/uan-helper.cc</li>
<li><b>UanMacAloha</b>: src/uan/model/uan-mac-aloha.cc</li>
<li><b>UanMacCw</b>: src/uan/model/uan-mac-cw.cc</li>
<li><b>UanMacRc</b>: src/uan/model/uan-mac-rc.cc</li>
<li><b>UanMacRcGw</b>: src/uan/model/uan-mac-rc-gw.cc</li>
<li><b>UanNetDevice</b>: src/uan/model/uan-net-device.cc</li>
<li><b>UanPhyDual</b>: src/uan/model/uan-phy-dual.cc</li>
<li><b>UanPhyGen</b>: src/uan/model/uan-phy-gen.cc</li>
<li><b>UanPropModelThorp</b>: src/uan/model/uan-prop-model-thorp.cc</li>
<li><b>UanTransducerHd</b>: src/uan/model/uan-transducer-hd.cc</li>
<li><b>UanTxMode</b>: src/uan/model/uan-tx-mode.cc</li>
<li><b>UdpClient</b>: src/applications/model/udp-client.cc</li>
<li><b>UdpEchoClient1Application</b>: src/applications/model/udp-echo-client1.cc</li>
<li><b>UdpEchoClientApplication</b>: src/applications/model/udp-echo-client.cc</li>
<li><b>UdpEchoServer1Application</b>: src/applications/model/udp-echo-server1.cc</li>
<li><b>UdpEchoServerApplication</b>: src/applications/model/udp-echo-server.cc</li>
<li><b>UdpL4Protocol</b>: src/internet/model/udp-l4-protocol.cc</li>
<li><b>UdpServer</b>: src/applications/model/udp-server.cc</li>
<li><b>UdpSocket</b>: src/internet/model/udp-socket.cc</li>
<li><b>UdpSocketImpl</b>: src/internet/model/udp-socket-impl.cc</li>
<li><b>UdpTraceClient</b>: src/applications/model/udp-trace-client.cc</li>
<li><b>Uinteger</b>: src/core/model/uinteger.cc</li>
<li><b>Uinteger16Probe</b>: src/stats/model/uinteger-16-probe.cc</li>
<li><b>Uinteger32Probe</b>: src/stats/model/uinteger-32-probe.cc</li>
<li><b>Uinteger8Probe</b>: src/stats/model/uinteger-8-probe.cc</li>
<li><b>UplinkScheduler</b>: src/wimax/model/bs-uplink-scheduler.cc</li>
<li><b>UplinkSchedulerMBQoS</b>: src/wimax/model/bs-uplink-scheduler-mbqos.cc</li>
<li><b>UplinkSchedulerRtps</b>: src/wimax/model/bs-uplink-scheduler-rtps.cc</li>
<li><b>UplinkSchedulerSimple</b>: src/wimax/model/bs-uplink-scheduler-simple.cc</li>
<li><b>V4Ping</b>: src/internet-apps/model/v4ping.cc</li>
<li><b>Vector</b>: src/core/model/vector.cc</li>
<li><b>VendorSpecificAction</b>: src/wave/model/vendor-specific-action.cc</li>
<li><b>VirtualNetDevice</b>: src/virtual-net-device/model/virtual-net-device.cc</li>
<li><b>VsaManager</b>: src/wave/model/vsa-manager.cc</li>
<li><b>WallClockSynchronizer</b>: src/core/model/wall-clock-synchronizer.cc</li>
<li><b>Watchdog</b>: src/core/model/watchdog.cc</li>
<li><b>WaveBsmHelper</b>: src/wave/helper/wave-bsm-helper.cc</li>
<li><b>WaveBsmStats</b>: src/wave/helper/wave-bsm-stats.cc</li>
<li><b>WaveHelper</b>: src/wave/helper/wave-helper.cc</li>
<li><b>WaveMacLow</b>: src/wave/model/wave-mac-low.cc</li>
<li><b>WaveNetDevice</b>: src/wave/model/wave-net-device.cc</li>
<li><b>WaveformGenerator</b>: src/spectrum/model/waveform-generator.cc</li>
<li><b>WaveformGeneratorHelper</b>: src/spectrum/helper/waveform-generator-helper.cc</li>
<li><b>WaypointMobilityModel</b>: src/mobility/model/waypoint-mobility-model.cc</li>
<li><b>WifiHelper</b>: src/wifi/helper/wifi-helper.cc</li>
<li><b>WifiMac</b>: src/wifi/model/wifi-mac.cc</li>
<li><b>WifiMacQueue</b>: src/wifi/model/wifi-mac-queue.cc</li>
<li><b>WifiMacQueueItem</b>: src/wifi/model/wifi-mac-queue-item.cc</li>
<li><b>WifiNetDevice</b>: src/wifi/model/wifi-net-device.cc</li>
<li><b>WifiPhy</b>: src/wifi/model/wifi-phy.cc</li>
<li><b>WifiPhyStateHelper</b>: src/wifi/model/wifi-phy-state-helper.cc</li>
<li><b>WifiRadioEnergyModel</b>: src/wifi/model/wifi-radio-energy-model.cc</li>
<li><b>WifiRemoteStationManager</b>: src/wifi/model/wifi-remote-station-manager.cc</li>
<li><b>WifiSpectrumPhyInterface</b>: src/wifi/model/wifi-spectrum-phy-interface.cc</li>
<li><b>WifiSpectrumSignalParameters</b>: src/wifi/model/wifi-spectrum-signal-parameters.cc</li>
<li><b>WifiSpectrumValueHelper</b>: src/spectrum/model/wifi-spectrum-value-helper.cc</li>
<li><b>WifiTxCurrentModel</b>: src/wifi/model/wifi-tx-current-model.cc</li>
<li><b>WimaxChannel</b>: src/wimax/model/wimax-channel.cc</li>
<li><b>WimaxHelper</b>: src/wimax/helper/wimax-helper.cc</li>
<li><b>WimaxMacQueue</b>: src/wimax/model/wimax-mac-queue.cc</li>
<li><b>WimaxNetDevice</b>: src/wimax/model/wimax-net-device.cc</li>
<li><b>WimaxPhy</b>: src/wimax/model/wimax-phy.cc</li>
<li><b>XmlConfig</b>: src/config-store/model/xml-config.cc</li>
<li><b>YansErrorRateModel</b>: src/wifi/model/yans-error-rate-model.cc</li>
<li><b>YansWifiChannel</b>: src/wifi/model/yans-wifi-channel.cc</li>
<li><b>YansWifiHelper</b>: src/wifi/helper/yans-wifi-helper.cc</li>
<li><b>YansWifiPhy</b>: src/wifi/model/yans-wifi-phy.cc</li>
<li><b>consumer</b>: src/internet/model/consumer.cc</li>
<li><b>int64x64</b>: src/core/model/int64x64.cc</li>
<li><b>int64x64-128</b>: src/core/model/int64x64-128.cc</li>
<li><b>itp</b>: src/internet/model/itp.cc</li>
<li><b>itpHeader</b>: src/internet/model/itp-header.cc</li>
<li><b>producer</b>: src/internet/model/producer.cc</li>
<li><b>simpleOfdmWimaxChannel</b>: src/wimax/model/simple-ofdm-wimax-channel.cc</li>
</ul>
*/

/*!
\page TraceSourceList All TraceSources

This is a list of all \ref tracing sources.  For more information see the  \ref tracing section of this API documentation and the Tracing sections in the Tutorial and Manual.

<b>ns3::BooleanProbe</b><br>
<ul>
<li><b>Output</b>: The bool that serves as output for this probe</li>
</ul>
<b>ns3::DoubleProbe</b><br>
<ul>
<li><b>Output</b>: The double that serves as output for this probe</li>
</ul>
<b>ns3::TimeProbe</b><br>
<ul>
<li><b>Output</b>: The double valued (units of seconds) probe output</li>
</ul>
<b>ns3::Uinteger8Probe</b><br>
<ul>
<li><b>Output</b>: The uint8_t that serves as output for this probe</li>
</ul>
<b>ns3::Uinteger16Probe</b><br>
<ul>
<li><b>Output</b>: The uint16_t that serves as output for this probe</li>
</ul>
<b>ns3::Uinteger32Probe</b><br>
<ul>
<li><b>Output</b>: The uint32_t that serves as output for this probe</li>
</ul>
<b>ns3::TimeSeriesAdaptor</b><br>
<ul>
<li><b>Output</b>: The current simulation time versus the current value converted to a double</li>
</ul>
<b>ns3::Queue<Packet></b><br>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
</ul>
<b>ns3::QueueBase</b><br>
<ul>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue</li>
</ul>
<b>ns3::DynamicQueueLimits</b><br>
<ul>
<li><b>Limit</b>: Limit value calculated by DQL</li>
</ul>
<b>ns3::PacketSocket</b><br>
<ul>
<li><b>Drop</b>: Drop packet due to receive buffer overflow</li>
</ul>
<b>ns3::SimpleNetDevice</b><br>
<ul>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
</ul>
<b>ns3::PacketSocketClient</b><br>
<ul>
<li><b>Tx</b>: A packet has been sent</li>
</ul>
<b>ns3::PacketSocketServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
</ul>
<b>ns3::PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::VirtualNetDevice</b><br>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::FdNetDevice</b><br>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::CsmaNetDevice</b><br>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacTxBackoff</b>: Trace source indicating a packet has been delayed by the CSMA backoff process</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::BasicEnergySource</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.</li>
</ul>
<b>ns3::LiIonEnergySource</b><br>
<ul>
<li><b>RemainingEnergy</b>: Remaining energy at BasicEnergySource.</li>
</ul>
<b>ns3::RvBatteryModel</b><br>
<ul>
<li><b>RvBatteryModelBatteryLevel</b>: RV battery model battery level.</li>
<li><b>RvBatteryModelBatteryLifetime</b>: RV battery model battery lifetime.</li>
</ul>
<b>ns3::SimpleDeviceEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.</li>
</ul>
<b>ns3::BasicEnergyHarvester</b><br>
<ul>
<li><b>HarvestedPower</b>: Harvested power by the BasicEnergyHarvester.</li>
<li><b>TotalEnergyHarvested</b>: Total energy harvested by the harvester.</li>
</ul>
<b>ns3::MobilityModel</b><br>
<ul>
<li><b>CourseChange</b>: The value of the position and/or velocity vector changed</li>
</ul>
<b>ns3::UanPhyGen</b><br>
<ul>
<li><b>RxOk</b>: A packet was received successfully.</li>
<li><b>RxError</b>: A packet was received unsuccessfully.</li>
<li><b>Tx</b>: Packet transmission beginning.</li>
</ul>
<b>ns3::UanPhy</b><br>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium.</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission.</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device.</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device.</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception.</li>
</ul>
<b>ns3::UanNetDevice</b><br>
<ul>
<li><b>Rx</b>: Received payload from the MAC layer.</li>
<li><b>Tx</b>: Send payload to the MAC layer.</li>
</ul>
<b>ns3::UanMacCw</b><br>
<ul>
<li><b>Enqueue</b>: A packet arrived at the MAC for transmission.</li>
<li><b>Dequeue</b>: A was passed down to the PHY from the MAC.</li>
<li><b>RX</b>: A packet was destined for this MAC and was received.</li>
</ul>
<b>ns3::UanPhyDual</b><br>
<ul>
<li><b>RxOk</b>: A packet was received successfully.</li>
<li><b>RxError</b>: A packet was received unsuccessfully.</li>
<li><b>Tx</b>: Packet transmission beginning.</li>
</ul>
<b>ns3::UanMacRc</b><br>
<ul>
<li><b>Enqueue</b>: A  (data) packet arrived at MAC for transmission.</li>
<li><b>Dequeue</b>: A  (data) packet was passed down to PHY from MAC.</li>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.</li>
</ul>
<b>ns3::UanMacRcGw</b><br>
<ul>
<li><b>RX</b>: A packet was destined for and received at this MAC layer.</li>
<li><b>Cycle</b>: Trace cycle statistics.</li>
</ul>
<b>ns3::AcousticModemEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the modem device.</li>
</ul>
<b>ns3::Queue<QueueDiscItem></b><br>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
</ul>
<b>ns3::QueueDisc</b><br>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue disc</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue disc</li>
<li><b>Requeue</b>: Requeue a packet in the queue disc</li>
<li><b>Drop</b>: Drop a packet stored in the queue disc</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue</li>
<li><b>Mark</b>: Mark a packet stored in the queue disc</li>
<li><b>PacketsInQueue</b>: Number of packets currently stored in the queue disc</li>
<li><b>BytesInQueue</b>: Number of bytes currently stored in the queue disc</li>
<li><b>SojournTime</b>: Sojourn time of the last packet dequeued from the queue disc</li>
</ul>
<b>ns3::CoDelQueueDisc</b><br>
<ul>
<li><b>Count</b>: CoDel count</li>
<li><b>LastCount</b>: CoDel lastcount</li>
<li><b>DropState</b>: Dropping state</li>
<li><b>DropNext</b>: Time until next packet drop</li>
</ul>
<b>ns3::TbfQueueDisc</b><br>
<ul>
<li><b>TokensInFirstBucket</b>: Number of First Bucket Tokens in bytes</li>
<li><b>TokensInSecondBucket</b>: Number of Second Bucket Tokens in bytes</li>
</ul>
<b>ns3::PointToPointNetDevice</b><br>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
</ul>
<b>ns3::PointToPointChannel</b><br>
<ul>
<li><b>TxRxPointToPoint</b>: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.</li>
</ul>
<b>ns3::Ipv4L3Protocol</b><br>
<ul>
<li><b>Tx</b>: Send ipv4 packet to outgoing interface.</li>
<li><b>Rx</b>: Receive ipv4 packet from incoming interface.</li>
<li><b>Drop</b>: Drop ipv4 packet</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission</li>
<li><b>UnicastForward</b>: A unicast IPv4 packet was received by this node and is being forwarded to another node</li>
<li><b>LocalDeliver</b>: An IPv4 packet was received by/for this node, and it is being forward up the stack</li>
</ul>
<b>ns3::ArpCache</b><br>
<ul>
<li><b>Drop</b>: Packet dropped due to ArpCache entry in WaitReply expiring.</li>
</ul>
<b>ns3::ArpL3Protocol</b><br>
<ul>
<li><b>Drop</b>: Packet dropped because not enough room in pending queue for a specific cache entry.</li>
</ul>
<b>ns3::UdpSocketImpl</b><br>
<ul>
<li><b>Drop</b>: Drop UDP packet due to receive buffer overflow</li>
</ul>
<b>ns3::Ipv6L3Protocol</b><br>
<ul>
<li><b>Tx</b>: Send IPv6 packet to outgoing interface.</li>
<li><b>Rx</b>: Receive IPv6 packet from incoming interface.</li>
<li><b>Drop</b>: Drop IPv6 packet</li>
<li><b>SendOutgoing</b>: A newly-generated packet by this node is about to be queued for transmission</li>
<li><b>UnicastForward</b>: A unicast IPv6 packet was received by this node and is being forwarded to another node</li>
<li><b>LocalDeliver</b>: An IPv6 packet was received by/for this node, and it is being forward up the stack</li>
</ul>
<b>ns3::TcpSocketBase</b><br>
<ul>
<li><b>RTO</b>: Retransmission timeout</li>
<li><b>RTT</b>: Last RTT sample</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)</li>
<li><b>HighestSequence</b>: Highest sequence number ever sent in socket's life time</li>
<li><b>State</b>: TCP state</li>
<li><b>CongState</b>: TCP Congestion machine state</li>
<li><b>EcnState</b>: Trace ECN state change of socket</li>
<li><b>AdvWND</b>: Advertised Window Size</li>
<li><b>RWND</b>: Remote side's flow control window</li>
<li><b>BytesInFlight</b>: Socket estimation of bytes in flight</li>
<li><b>HighestRxSequence</b>: Highest sequence number received from peer</li>
<li><b>HighestRxAck</b>: Highest ack received from peer</li>
<li><b>CongestionWindow</b>: The TCP connection's congestion window</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's congestion window inflates as in older RFC</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)</li>
<li><b>Tx</b>: Send tcp packet to IP protocol</li>
<li><b>Rx</b>: Receive tcp packet from IP protocol</li>
<li><b>EcnEchoSeq</b>: Sequence of last received ECN Echo</li>
<li><b>EcnCeSeq</b>: Sequence of last received CE </li>
<li><b>EcnCwrSeq</b>: Sequence of last received CWR</li>
</ul>
<b>ns3::TcpSocketState</b><br>
<ul>
<li><b>CongestionWindow</b>: The TCP connection's congestion window</li>
<li><b>CongestionWindowInflated</b>: The TCP connection's inflated congestion window</li>
<li><b>SlowStartThreshold</b>: TCP slow start threshold (bytes)</li>
<li><b>CongState</b>: TCP Congestion machine state</li>
<li><b>EcnState</b>: Trace ECN state change of socket</li>
<li><b>HighestSequence</b>: Highest sequence number received from peer</li>
<li><b>NextTxSequence</b>: Next sequence number to send (SND.NXT)</li>
<li><b>BytesInFlight</b>: The TCP connection's congestion window</li>
<li><b>RTT</b>: Last RTT sample</li>
</ul>
<b>ns3::TcpHybla</b><br>
<ul>
<li><b>Rho</b>: Rho parameter of Hybla</li>
</ul>
<b>ns3::TcpWestwood</b><br>
<ul>
<li><b>EstimatedBW</b>: The estimated bandwidth</li>
</ul>
<b>ns3::TcpRxBuffer</b><br>
<ul>
<li><b>NextRxSequence</b>: Next sequence number expected (RCV.NXT)</li>
</ul>
<b>ns3::TcpTxBuffer</b><br>
<ul>
<li><b>UnackSequence</b>: First unacknowledged sequence number (SND.UNA)</li>
</ul>
<b>ns3::Ipv4PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its IPv4 object and interface that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::Ipv6PacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its IPv6 object and interface that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::itp</b><br>
<ul>
<li><b>CongestionWindow</b>: The ITP connection's congestion window</li>
</ul>
<b>ns3::consumer</b><br>
<ul>
<li><b>CongestionWindow</b>: The ITP connection's congestion window</li>
</ul>
<b>ns3::SixLowPanNetDevice</b><br>
<ul>
<li><b>Tx</b>: Send - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.</li>
<li><b>Rx</b>: Receive - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.</li>
<li><b>Drop</b>: Drop - DropReason, packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.</li>
</ul>
<b>ns3::olsr::RoutingProtocol</b><br>
<ul>
<li><b>Rx</b>: Receive OLSR packet.</li>
<li><b>Tx</b>: Send OLSR packet.</li>
<li><b>RoutingTableChanged</b>: The OLSR routing table has changed.</li>
</ul>
<b>ns3::WimaxNetDevice</b><br>
<ul>
<li><b>Rx</b>: Receive trace</li>
<li><b>Tx</b>: Transmit trace</li>
</ul>
<b>ns3::BaseStationNetDevice</b><br>
<ul>
<li><b>BSTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.</li>
<li><b>BSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.</li>
<li><b>BSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>BSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>BSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.</li>
</ul>
<b>ns3::SubscriberStationNetDevice</b><br>
<ul>
<li><b>SSTxDrop</b>: A packet has been dropped in the MAC layer before being queued for transmission.</li>
<li><b>SSPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>SSRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>SSRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.</li>
</ul>
<b>ns3::SimpleOfdmWimaxPhy</b><br>
<ul>
<li><b>Rx</b>: Receive trace</li>
<li><b>Tx</b>: Transmit trace</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
</ul>
<b>ns3::WimaxMacQueue</b><br>
<ul>
<li><b>Enqueue</b>: Enqueue trace</li>
<li><b>Dequeue</b>: Dequeue trace</li>
<li><b>Drop</b>: Drop trace</li>
</ul>
<b>ns3::V4Ping</b><br>
<ul>
<li><b>Rtt</b>: The rtt calculated by the ping.</li>
</ul>
<b>ns3::DhcpClient</b><br>
<ul>
<li><b>NewLease</b>: Get a NewLease</li>
<li><b>ExpireLease</b>: A lease expires</li>
</ul>
<b>ns3::BulkSendApplication</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::OnOffApplication</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent</li>
</ul>
<b>ns3::PacketSink</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpEchoClient</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
<li><b>Rx</b>: A packet has been received</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpEchoServer</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::ApplicationPacketProbe</b><br>
<ul>
<li><b>Output</b>: The packet plus its socket address that serve as the output for this probe</li>
<li><b>OutputBytes</b>: The number of bytes in the packet</li>
</ul>
<b>ns3::ThreeGppHttpClient</b><br>
<ul>
<li><b>ConnectionEstablished</b>: Connection to the destination web server has been established.</li>
<li><b>ConnectionClosed</b>: Connection to the destination web server is closed.</li>
<li><b>Tx</b>: General trace for sending a packet of any kind.</li>
<li><b>TxMainObjectRequest</b>: Sent a request for a main object.</li>
<li><b>TxEmbeddedObjectRequest</b>: Sent a request for an embedded object.</li>
<li><b>RxMainObjectPacket</b>: A packet of main object has been received.</li>
<li><b>RxMainObject</b>: Received a whole main object. Header is included.</li>
<li><b>RxEmbeddedObjectPacket</b>: A packet of embedded object has been received.</li>
<li><b>RxEmbeddedObject</b>: Received a whole embedded object. Header is included.</li>
<li><b>Rx</b>: General trace for receiving a packet of any kind.</li>
<li><b>RxDelay</b>: General trace of delay for receiving a complete object.</li>
<li><b>RxRtt</b>: General trace of round trip delay time for receiving a complete object.</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.</li>
</ul>
<b>ns3::ThreeGppHttpServer</b><br>
<ul>
<li><b>ConnectionEstablished</b>: Connection to a remote web client has been established.</li>
<li><b>MainObject</b>: A main object has been generated.</li>
<li><b>EmbeddedObject</b>: An embedded object has been generated.</li>
<li><b>Tx</b>: A packet has been sent.</li>
<li><b>Rx</b>: A packet has been received.</li>
<li><b>RxDelay</b>: A packet has been received with delay information.</li>
<li><b>StateTransition</b>: Trace fired upon every HTTP client state transition.</li>
</ul>
<b>ns3::UdpEchoClient1</b><br>
<ul>
<li><b>Tx</b>: A new packet is created and is sent</li>
<li><b>Rx</b>: A packet has been received</li>
<li><b>TxWithAddresses</b>: A new packet is created and is sent</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::UdpEchoServer1</b><br>
<ul>
<li><b>Rx</b>: A packet has been received</li>
<li><b>RxWithAddresses</b>: A packet has been received</li>
</ul>
<b>ns3::SpectrumChannel</b><br>
<ul>
<li><b>Gain</b>: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss</li>
<li><b>PathLoss</b>: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. </li>
<li><b>TxSigParams</b>: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.</li>
</ul>
<b>ns3::WaveformGenerator</b><br>
<ul>
<li><b>TxStart</b>: Trace fired when a new transmission is started</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished</li>
</ul>
<b>ns3::SpectrumAnalyzer</b><br>
<ul>
<li><b>AveragePowerSpectralDensityReport</b>: Trace fired whenever a new value for the average Power Spectral Density is calculated</li>
</ul>
<b>ns3::AlohaNoackNetDevice</b><br>
<ul>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped by the device before transmission</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
</ul>
<b>ns3::HalfDuplexIdealPhy</b><br>
<ul>
<li><b>TxStart</b>: Trace fired when a new transmission is started</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected</li>
<li><b>RxAbort</b>: Trace fired when a previously started RX is aborted before time</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error (packet is corrupted)</li>
</ul>
<b>ns3::LteSpectrumPhy</b><br>
<ul>
<li><b>TxStart</b>: Trace fired when a new transmission is started</li>
<li><b>TxEnd</b>: Trace fired when a previously started transmission is finished</li>
<li><b>RxStart</b>: Trace fired when the start of a signal is detected</li>
<li><b>RxEndOk</b>: Trace fired when a previously started RX terminates successfully</li>
<li><b>RxEndError</b>: Trace fired when a previously started RX terminates with an error</li>
<li><b>DlPhyReception</b>: DL reception PHY layer statistics.</li>
<li><b>UlPhyReception</b>: DL reception PHY layer statistics.</li>
</ul>
<b>ns3::LteEnbPhy</b><br>
<ul>
<li><b>ReportUeSinr</b>: Report UEs' averaged linear SINR</li>
<li><b>ReportInterference</b>: Report linear interference power per PHY RB</li>
<li><b>DlPhyTransmission</b>: DL transmission PHY layer statistics.</li>
</ul>
<b>ns3::LteUePhy</b><br>
<ul>
<li><b>ReportCurrentCellRsrpSinr</b>: RSRP and SINR statistics.</li>
<li><b>UlPhyTransmission</b>: DL transmission PHY layer statistics.</li>
<li><b>ReportUeMeasurements</b>: Report UE measurements RSRP (dBm) and RSRQ (dB).</li>
<li><b>StateTransition</b>: Trace fired upon every UE PHY state transition</li>
</ul>
<b>ns3::UeManager</b><br>
<ul>
<li><b>StateTransition</b>: fired upon every UE state transition seen by the UeManager at the eNB RRC</li>
</ul>
<b>ns3::LteEnbRrc</b><br>
<ul>
<li><b>NewUeContext</b>: Fired upon creation of a new UE context.</li>
<li><b>ConnectionEstablished</b>: Fired upon successful RRC connection establishment.</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure</li>
<li><b>RecvMeasurementReport</b>: trace fired when measurement report is received</li>
</ul>
<b>ns3::LteUeRrc</b><br>
<ul>
<li><b>MibReceived</b>: trace fired upon reception of Master Information Block</li>
<li><b>Sib1Received</b>: trace fired upon reception of System Information Block Type 1</li>
<li><b>Sib2Received</b>: trace fired upon reception of System Information Block Type 2</li>
<li><b>StateTransition</b>: trace fired upon every UE RRC state transition</li>
<li><b>InitialCellSelectionEndOk</b>: trace fired upon successful initial cell selection procedure</li>
<li><b>InitialCellSelectionEndError</b>: trace fired upon failed initial cell selection procedure</li>
<li><b>RandomAccessSuccessful</b>: trace fired upon successful completion of the random access procedure</li>
<li><b>RandomAccessError</b>: trace fired upon failure of the random access procedure</li>
<li><b>ConnectionEstablished</b>: trace fired upon successful RRC connection establishment</li>
<li><b>ConnectionTimeout</b>: trace fired upon timeout RRC connection establishment because of T300</li>
<li><b>ConnectionReconfiguration</b>: trace fired upon RRC connection reconfiguration</li>
<li><b>HandoverStart</b>: trace fired upon start of a handover procedure</li>
<li><b>HandoverEndOk</b>: trace fired upon successful termination of a handover procedure</li>
<li><b>HandoverEndError</b>: trace fired upon failure of a handover procedure</li>
<li><b>SCarrierConfigured</b>: trace fired after configuring secondary carriers</li>
</ul>
<b>ns3::LteRlc</b><br>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the MAC.</li>
<li><b>RxPDU</b>: PDU received.</li>
</ul>
<b>ns3::LtePdcp</b><br>
<ul>
<li><b>TxPDU</b>: PDU transmission notified to the RLC.</li>
<li><b>RxPDU</b>: PDU received.</li>
</ul>
<b>ns3::LteEnbMac</b><br>
<ul>
<li><b>DlScheduling</b>: Information regarding DL scheduling.</li>
<li><b>UlScheduling</b>: Information regarding UL scheduling.</li>
</ul>
<b>ns3::EpcUeNas</b><br>
<ul>
<li><b>StateTransition</b>: fired upon every UE NAS state transition</li>
</ul>
<b>ns3::LteUePowerControl</b><br>
<ul>
<li><b>ReportPuschTxPower</b>: Report PUSCH TxPower in dBm</li>
<li><b>ReportPucchTxPower</b>: Report PUCCH TxPower in dBm</li>
<li><b>ReportSrsTxPower</b>: Report SRS TxPower in dBm</li>
</ul>
<b>ns3::LrWpanPhy</b><br>
<ul>
<li><b>TrxStateValue</b>: The state of the transceiver</li>
<li><b>TrxState</b>: The state of the transceiver</li>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel.</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
</ul>
<b>ns3::LrWpanMac</b><br>
<ul>
<li><b>MacTxEnqueue</b>: Trace source indicating a packet has been enqueued in the transaction queue</li>
<li><b>MacTxDequeue</b>: Trace source indicating a packet has was dequeued from the transaction queue</li>
<li><b>MacTx</b>: Trace source indicating a packet has arrived for transmission by this device</li>
<li><b>MacTxOk</b>: Trace source indicating a packet has been successfully sent</li>
<li><b>MacTxDrop</b>: Trace source indicating a packet has been dropped during transmission</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,</li>
<li><b>MacRxDrop</b>: Trace source indicating a packet was received, but dropped before being forwarded up the stack</li>
<li><b>Sniffer</b>: Trace source simulating a non-promiscuous packet sniffer attached to the device</li>
<li><b>PromiscSniffer</b>: Trace source simulating a promiscuous packet sniffer attached to the device</li>
<li><b>MacStateValue</b>: The state of LrWpan Mac</li>
<li><b>MacState</b>: The state of LrWpan Mac</li>
<li><b>MacSentPkt</b>: Trace source reporting some information about the sent packet</li>
</ul>
<b>ns3::WifiPhy</b><br>
<ul>
<li><b>PhyTxBegin</b>: Trace source indicating a packet has begun transmitting over the channel medium</li>
<li><b>PhyTxEnd</b>: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.</li>
<li><b>PhyTxDrop</b>: Trace source indicating a packet has been dropped by the device during transmission</li>
<li><b>PhyRxBegin</b>: Trace source indicating a packet has begun being received from the channel medium by the device</li>
<li><b>PhyRxEnd</b>: Trace source indicating a packet has been completely received from the channel medium by the device</li>
<li><b>PhyRxDrop</b>: Trace source indicating a packet has been dropped by the device during reception</li>
<li><b>MonitorSnifferRx</b>: Trace source simulating a wifi device in monitor mode sniffing all received frames</li>
<li><b>MonitorSnifferTx</b>: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted</li>
</ul>
<b>ns3::WifiPhyStateHelper</b><br>
<ul>
<li><b>State</b>: The state of the PHY layer</li>
<li><b>RxOk</b>: A packet has been received successfully.</li>
<li><b>RxError</b>: A packet has been received unsuccessfully.</li>
<li><b>Tx</b>: Packet transmission is starting.</li>
</ul>
<b>ns3::SpectrumWifiPhy</b><br>
<ul>
<li><b>SignalArrival</b>: Signal arrival</li>
</ul>
<b>ns3::Queue<WifiMacQueueItem></b><br>
<ul>
<li><b>Enqueue</b>: Enqueue a packet in the queue.</li>
<li><b>Dequeue</b>: Dequeue a packet from the queue.</li>
<li><b>Drop</b>: Drop a packet (for whatever reason).</li>
<li><b>DropBeforeEnqueue</b>: Drop a packet before enqueue.</li>
<li><b>DropAfterDequeue</b>: Drop a packet after dequeue.</li>
</ul>
<b>ns3::WifiMac</b><br>
<ul>
<li><b>MacTx</b>: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.</li>
<li><b>MacTxDrop</b>: A packet has been dropped in the MAC layer before transmission.</li>
<li><b>MacPromiscRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.</li>
<li><b>MacRx</b>: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.</li>
<li><b>MacRxDrop</b>: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.</li>
</ul>
<b>ns3::RegularWifiMac</b><br>
<ul>
<li><b>TxOkHeader</b>: The header of successfully transmitted packet.</li>
<li><b>TxErrHeader</b>: The header of unsuccessfully transmitted packet.</li>
</ul>
<b>ns3::WifiRemoteStationManager</b><br>
<ul>
<li><b>MacTxRtsFailed</b>: The transmission of a RTS by the MAC layer has failed</li>
<li><b>MacTxDataFailed</b>: The transmission of a data packet by the MAC layer has failed</li>
<li><b>MacTxFinalRtsFailed</b>: The transmission of a RTS has exceeded the maximum number of attempts</li>
<li><b>MacTxFinalDataFailed</b>: The transmission of a data packet has exceeded the maximum number of attempts</li>
</ul>
<b>ns3::StaWifiMac</b><br>
<ul>
<li><b>Assoc</b>: Associated with an access point.</li>
<li><b>DeAssoc</b>: Association with an access point lost.</li>
<li><b>BeaconArrival</b>: Time of beacons arrival from associated AP</li>
</ul>
<b>ns3::ArfWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::AarfWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::IdealWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::AmrrWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::OnoeWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::RraaWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::AarfcdWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::CaraWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::MinstrelWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::MinstrelHtWifiManager</b><br>
<ul>
<li><b>Rate</b>: Traced value for rate changes (b/s)</li>
</ul>
<b>ns3::QosTxop</b><br>
<ul>
<li><b>BackoffTrace</b>: Trace source for backoff values</li>
<li><b>CwTrace</b>: Trace source for contention window values</li>
<li><b>TxopTrace</b>: Trace source for txop start and duration times</li>
</ul>
<b>ns3::ParfWifiManager</b><br>
<ul>
<li><b>PowerChange</b>: The transmission power has change</li>
<li><b>RateChange</b>: The transmission rate has change</li>
</ul>
<b>ns3::AparfWifiManager</b><br>
<ul>
<li><b>PowerChange</b>: The transmission power has change</li>
<li><b>RateChange</b>: The transmission rate has change</li>
</ul>
<b>ns3::RrpaaWifiManager</b><br>
<ul>
<li><b>RateChange</b>: The transmission rate has change.</li>
<li><b>PowerChange</b>: The transmission power has change.</li>
</ul>
<b>ns3::WifiRadioEnergyModel</b><br>
<ul>
<li><b>TotalEnergyConsumption</b>: Total energy consumption of the radio device.</li>
</ul>
<b>ns3::dot11s::PeerManagementProtocol</b><br>
<ul>
<li><b>LinkOpen</b>: New peer link opened</li>
<li><b>LinkClose</b>: New peer link closed</li>
</ul>
<b>ns3::dot11s::HwmpProtocol</b><br>
<ul>
<li><b>RouteDiscoveryTime</b>: The time of route discovery procedure</li>
<li><b>RouteChange</b>: Routing table changed</li>
</ul>
<b>ns3::dsr::DsrRouting</b><br>
<ul>
<li><b>Tx</b>: Send DSR packet.</li>
<li><b>Drop</b>: Drop DSR packet</li>
</ul>
<b>ns3::dsr::DsrOptions</b><br>
<ul>
<li><b>Drop</b>: Packet dropped.</li>
<li><b>Rx</b>: Receive DSR packet.</li>
</ul>
*/

/*!
\ingroup attribute
\addtogroup attribute_Address Address Attribute
Attribute implementation for Address
\see ns3::Address
*/
/*!
\ingroup attribute_Address
\class  ns3::AddressValue "address.h"
AttributeValue implementation for Address.
\see AttributeValue
*/
/*!
\fn Address ns3::AddressValue::AddressValue(const Address & value)
Copy constructor.
\param [in] value The Address value to copy.
*/
/*!
\fn Address ns3::AddressValue::Get (void) const
\returns The Address value.
*/
/*!
\fn bool ns3::AddressValue::GetAccessor (T & value) const
Access the Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::AddressValue::Set (const Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Address ns3::AddressValue::m_value
The stored Address instance.
*/

/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Address

\class  ns3::AddressChecker "address.h"
AttributeChecker implementation for AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeAddressChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Box Box Attribute
Attribute implementation for Box
\see ns3::Box
*/
/*!
\ingroup attribute_Box
\class  ns3::BoxValue "box.h"
AttributeValue implementation for Box.
\see AttributeValue
*/
/*!
\fn Box ns3::BoxValue::BoxValue(const Box & value)
Copy constructor.
\param [in] value The Box value to copy.
*/
/*!
\fn Box ns3::BoxValue::Get (void) const
\returns The Box value.
*/
/*!
\fn bool ns3::BoxValue::GetAccessor (T & value) const
Access the Box value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Box value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::BoxValue::Set (const Box & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Box ns3::BoxValue::m_value
The stored Box instance.
*/

/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Box

\class  ns3::BoxChecker "box.h"
AttributeChecker implementation for BoxValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Box
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBoxChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_DataRate DataRate Attribute
Attribute implementation for DataRate
\see ns3::DataRate
*/
/*!
\ingroup attribute_DataRate
\class  ns3::DataRateValue "data-rate.h"
AttributeValue implementation for DataRate.
\see AttributeValue
*/
/*!
\fn DataRate ns3::DataRateValue::DataRateValue(const DataRate & value)
Copy constructor.
\param [in] value The DataRate value to copy.
*/
/*!
\fn DataRate ns3::DataRateValue::Get (void) const
\returns The DataRate value.
*/
/*!
\fn bool ns3::DataRateValue::GetAccessor (T & value) const
Access the DataRate value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The DataRate value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::DataRateValue::Set (const DataRate & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var DataRate ns3::DataRateValue::m_value
The stored DataRate instance.
*/

/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DataRate

\class  ns3::DataRateChecker "data-rate.h"
AttributeChecker implementation for DataRateValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_DataRate
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDataRateChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_DsssParameterSet DsssParameterSet Attribute
Attribute implementation for DsssParameterSet
\see ns3::DsssParameterSet
*/
/*!
\ingroup attribute_DsssParameterSet
\class  ns3::DsssParameterSetValue "dsss-parameter-set.h"
AttributeValue implementation for DsssParameterSet.
\see AttributeValue
*/
/*!
\fn DsssParameterSet ns3::DsssParameterSetValue::DsssParameterSetValue(const DsssParameterSet & value)
Copy constructor.
\param [in] value The DsssParameterSet value to copy.
*/
/*!
\fn DsssParameterSet ns3::DsssParameterSetValue::Get (void) const
\returns The DsssParameterSet value.
*/
/*!
\fn bool ns3::DsssParameterSetValue::GetAccessor (T & value) const
Access the DsssParameterSet value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The DsssParameterSet value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::DsssParameterSetValue::Set (const DsssParameterSet & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var DsssParameterSet ns3::DsssParameterSetValue::m_value
The stored DsssParameterSet instance.
*/

/*!
\ingroup attribute_DsssParameterSet
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDsssParameterSetAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DsssParameterSet
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDsssParameterSetAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_DsssParameterSet

\class  ns3::DsssParameterSetChecker "dsss-parameter-set.h"
AttributeChecker implementation for DsssParameterSetValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_DsssParameterSet
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDsssParameterSetChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_EdcaParameterSet EdcaParameterSet Attribute
Attribute implementation for EdcaParameterSet
\see ns3::EdcaParameterSet
*/
/*!
\ingroup attribute_EdcaParameterSet
\class  ns3::EdcaParameterSetValue "edca-parameter-set.h"
AttributeValue implementation for EdcaParameterSet.
\see AttributeValue
*/
/*!
\fn EdcaParameterSet ns3::EdcaParameterSetValue::EdcaParameterSetValue(const EdcaParameterSet & value)
Copy constructor.
\param [in] value The EdcaParameterSet value to copy.
*/
/*!
\fn EdcaParameterSet ns3::EdcaParameterSetValue::Get (void) const
\returns The EdcaParameterSet value.
*/
/*!
\fn bool ns3::EdcaParameterSetValue::GetAccessor (T & value) const
Access the EdcaParameterSet value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The EdcaParameterSet value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::EdcaParameterSetValue::Set (const EdcaParameterSet & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var EdcaParameterSet ns3::EdcaParameterSetValue::m_value
The stored EdcaParameterSet instance.
*/

/*!
\ingroup attribute_EdcaParameterSet
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEdcaParameterSetAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_EdcaParameterSet
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEdcaParameterSetAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_EdcaParameterSet

\class  ns3::EdcaParameterSetChecker "edca-parameter-set.h"
AttributeChecker implementation for EdcaParameterSetValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_EdcaParameterSet
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeEdcaParameterSetChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_ErpInformation ErpInformation Attribute
Attribute implementation for ErpInformation
\see ns3::ErpInformation
*/
/*!
\ingroup attribute_ErpInformation
\class  ns3::ErpInformationValue "erp-information.h"
AttributeValue implementation for ErpInformation.
\see AttributeValue
*/
/*!
\fn ErpInformation ns3::ErpInformationValue::ErpInformationValue(const ErpInformation & value)
Copy constructor.
\param [in] value The ErpInformation value to copy.
*/
/*!
\fn ErpInformation ns3::ErpInformationValue::Get (void) const
\returns The ErpInformation value.
*/
/*!
\fn bool ns3::ErpInformationValue::GetAccessor (T & value) const
Access the ErpInformation value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ErpInformation value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ErpInformationValue::Set (const ErpInformation & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ErpInformation ns3::ErpInformationValue::m_value
The stored ErpInformation instance.
*/

/*!
\ingroup attribute_ErpInformation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeErpInformationAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ErpInformation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeErpInformationAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ErpInformation

\class  ns3::ErpInformationChecker "erp-information.h"
AttributeChecker implementation for ErpInformationValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ErpInformation
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeErpInformationChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_ExtendedCapabilities ExtendedCapabilities Attribute
Attribute implementation for ExtendedCapabilities
\see ns3::ExtendedCapabilities
*/
/*!
\ingroup attribute_ExtendedCapabilities
\class  ns3::ExtendedCapabilitiesValue "extended-capabilities.h"
AttributeValue implementation for ExtendedCapabilities.
\see AttributeValue
*/
/*!
\fn ExtendedCapabilities ns3::ExtendedCapabilitiesValue::ExtendedCapabilitiesValue(const ExtendedCapabilities & value)
Copy constructor.
\param [in] value The ExtendedCapabilities value to copy.
*/
/*!
\fn ExtendedCapabilities ns3::ExtendedCapabilitiesValue::Get (void) const
\returns The ExtendedCapabilities value.
*/
/*!
\fn bool ns3::ExtendedCapabilitiesValue::GetAccessor (T & value) const
Access the ExtendedCapabilities value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ExtendedCapabilities value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ExtendedCapabilitiesValue::Set (const ExtendedCapabilities & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ExtendedCapabilities ns3::ExtendedCapabilitiesValue::m_value
The stored ExtendedCapabilities instance.
*/

/*!
\ingroup attribute_ExtendedCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeExtendedCapabilitiesAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ExtendedCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeExtendedCapabilitiesAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ExtendedCapabilities

\class  ns3::ExtendedCapabilitiesChecker "extended-capabilities.h"
AttributeChecker implementation for ExtendedCapabilitiesValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ExtendedCapabilities
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeExtendedCapabilitiesChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_HeCapabilities HeCapabilities Attribute
Attribute implementation for HeCapabilities
\see ns3::HeCapabilities
*/
/*!
\ingroup attribute_HeCapabilities
\class  ns3::HeCapabilitiesValue "he-capabilities.h"
AttributeValue implementation for HeCapabilities.
\see AttributeValue
*/
/*!
\fn HeCapabilities ns3::HeCapabilitiesValue::HeCapabilitiesValue(const HeCapabilities & value)
Copy constructor.
\param [in] value The HeCapabilities value to copy.
*/
/*!
\fn HeCapabilities ns3::HeCapabilitiesValue::Get (void) const
\returns The HeCapabilities value.
*/
/*!
\fn bool ns3::HeCapabilitiesValue::GetAccessor (T & value) const
Access the HeCapabilities value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The HeCapabilities value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::HeCapabilitiesValue::Set (const HeCapabilities & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var HeCapabilities ns3::HeCapabilitiesValue::m_value
The stored HeCapabilities instance.
*/

/*!
\ingroup attribute_HeCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeCapabilitiesAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HeCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeCapabilitiesAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HeCapabilities

\class  ns3::HeCapabilitiesChecker "he-capabilities.h"
AttributeChecker implementation for HeCapabilitiesValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_HeCapabilities
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHeCapabilitiesChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_VhtCapabilities VhtCapabilities Attribute
Attribute implementation for VhtCapabilities
\see ns3::VhtCapabilities
*/
/*!
\ingroup attribute_VhtCapabilities
\class  ns3::VhtCapabilitiesValue "vht-capabilities.h"
AttributeValue implementation for VhtCapabilities.
\see AttributeValue
*/
/*!
\fn VhtCapabilities ns3::VhtCapabilitiesValue::VhtCapabilitiesValue(const VhtCapabilities & value)
Copy constructor.
\param [in] value The VhtCapabilities value to copy.
*/
/*!
\fn VhtCapabilities ns3::VhtCapabilitiesValue::Get (void) const
\returns The VhtCapabilities value.
*/
/*!
\fn bool ns3::VhtCapabilitiesValue::GetAccessor (T & value) const
Access the VhtCapabilities value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The VhtCapabilities value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::VhtCapabilitiesValue::Set (const VhtCapabilities & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var VhtCapabilities ns3::VhtCapabilitiesValue::m_value
The stored VhtCapabilities instance.
*/

/*!
\ingroup attribute_VhtCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtCapabilitiesAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_VhtCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtCapabilitiesAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_VhtCapabilities

\class  ns3::VhtCapabilitiesChecker "vht-capabilities.h"
AttributeChecker implementation for VhtCapabilitiesValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_VhtCapabilities
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVhtCapabilitiesChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_HtCapabilities HtCapabilities Attribute
Attribute implementation for HtCapabilities
\see ns3::HtCapabilities
*/
/*!
\ingroup attribute_HtCapabilities
\class  ns3::HtCapabilitiesValue "ht-capabilities.h"
AttributeValue implementation for HtCapabilities.
\see AttributeValue
*/
/*!
\fn HtCapabilities ns3::HtCapabilitiesValue::HtCapabilitiesValue(const HtCapabilities & value)
Copy constructor.
\param [in] value The HtCapabilities value to copy.
*/
/*!
\fn HtCapabilities ns3::HtCapabilitiesValue::Get (void) const
\returns The HtCapabilities value.
*/
/*!
\fn bool ns3::HtCapabilitiesValue::GetAccessor (T & value) const
Access the HtCapabilities value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The HtCapabilities value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::HtCapabilitiesValue::Set (const HtCapabilities & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var HtCapabilities ns3::HtCapabilitiesValue::m_value
The stored HtCapabilities instance.
*/

/*!
\ingroup attribute_HtCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtCapabilitiesAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HtCapabilities
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtCapabilitiesAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HtCapabilities

\class  ns3::HtCapabilitiesChecker "ht-capabilities.h"
AttributeChecker implementation for HtCapabilitiesValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_HtCapabilities
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHtCapabilitiesChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_IeMeshId IeMeshId Attribute
Attribute implementation for IeMeshId
\see ns3::dot11s::IeMeshId
*/
/*!
\ingroup attribute_IeMeshId
\class  ns3::IeMeshIdValue "ie-dot11s-id.h"
AttributeValue implementation for IeMeshId.
\see AttributeValue
*/
/*!
\fn IeMeshId ns3::IeMeshIdValue::IeMeshIdValue(const IeMeshId & value)
Copy constructor.
\param [in] value The IeMeshId value to copy.
*/
/*!
\fn IeMeshId ns3::IeMeshIdValue::Get (void) const
\returns The IeMeshId value.
*/
/*!
\fn bool ns3::IeMeshIdValue::GetAccessor (T & value) const
Access the IeMeshId value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The IeMeshId value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::IeMeshIdValue::Set (const IeMeshId & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var IeMeshId ns3::IeMeshIdValue::m_value
The stored IeMeshId instance.
*/

/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_IeMeshId

\class  ns3::IeMeshIdChecker "ie-dot11s-id.h"
AttributeChecker implementation for IeMeshIdValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_IeMeshId
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIeMeshIdChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Ipv4Address Ipv4Address Attribute
Attribute implementation for Ipv4Address
\see ns3::Ipv4Address
*/
/*!
\ingroup attribute_Ipv4Address
\class  ns3::Ipv4AddressValue "ipv4-address.h"
AttributeValue implementation for Ipv4Address.
\see AttributeValue
*/
/*!
\fn Ipv4Address ns3::Ipv4AddressValue::Ipv4AddressValue(const Ipv4Address & value)
Copy constructor.
\param [in] value The Ipv4Address value to copy.
*/
/*!
\fn Ipv4Address ns3::Ipv4AddressValue::Get (void) const
\returns The Ipv4Address value.
*/
/*!
\fn bool ns3::Ipv4AddressValue::GetAccessor (T & value) const
Access the Ipv4Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv4Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv4AddressValue::Set (const Ipv4Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv4Address ns3::Ipv4AddressValue::m_value
The stored Ipv4Address instance.
*/

/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Address

\class  ns3::Ipv4AddressChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv4Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4AddressChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Ipv4Mask Ipv4Mask Attribute
Attribute implementation for Ipv4Mask
\see ns3::Ipv4Mask
*/
/*!
\ingroup attribute_Ipv4Mask
\class  ns3::Ipv4MaskValue "ipv4-address.h"
AttributeValue implementation for Ipv4Mask.
\see AttributeValue
*/
/*!
\fn Ipv4Mask ns3::Ipv4MaskValue::Ipv4MaskValue(const Ipv4Mask & value)
Copy constructor.
\param [in] value The Ipv4Mask value to copy.
*/
/*!
\fn Ipv4Mask ns3::Ipv4MaskValue::Get (void) const
\returns The Ipv4Mask value.
*/
/*!
\fn bool ns3::Ipv4MaskValue::GetAccessor (T & value) const
Access the Ipv4Mask value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv4Mask value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv4MaskValue::Set (const Ipv4Mask & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv4Mask ns3::Ipv4MaskValue::m_value
The stored Ipv4Mask instance.
*/

/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv4Mask

\class  ns3::Ipv4MaskChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4MaskValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv4Mask
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4MaskChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Ipv6Address Ipv6Address Attribute
Attribute implementation for Ipv6Address
\see ns3::Ipv6Address
*/
/*!
\ingroup attribute_Ipv6Address
\class  ns3::Ipv6AddressValue "ipv6-address.h"
AttributeValue implementation for Ipv6Address.
\see AttributeValue
*/
/*!
\fn Ipv6Address ns3::Ipv6AddressValue::Ipv6AddressValue(const Ipv6Address & value)
Copy constructor.
\param [in] value The Ipv6Address value to copy.
*/
/*!
\fn Ipv6Address ns3::Ipv6AddressValue::Get (void) const
\returns The Ipv6Address value.
*/
/*!
\fn bool ns3::Ipv6AddressValue::GetAccessor (T & value) const
Access the Ipv6Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv6Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv6AddressValue::Set (const Ipv6Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv6Address ns3::Ipv6AddressValue::m_value
The stored Ipv6Address instance.
*/

/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Address

\class  ns3::Ipv6AddressChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv6Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6AddressChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Ipv6Prefix Ipv6Prefix Attribute
Attribute implementation for Ipv6Prefix
\see ns3::Ipv6Prefix
*/
/*!
\ingroup attribute_Ipv6Prefix
\class  ns3::Ipv6PrefixValue "ipv6-address.h"
AttributeValue implementation for Ipv6Prefix.
\see AttributeValue
*/
/*!
\fn Ipv6Prefix ns3::Ipv6PrefixValue::Ipv6PrefixValue(const Ipv6Prefix & value)
Copy constructor.
\param [in] value The Ipv6Prefix value to copy.
*/
/*!
\fn Ipv6Prefix ns3::Ipv6PrefixValue::Get (void) const
\returns The Ipv6Prefix value.
*/
/*!
\fn bool ns3::Ipv6PrefixValue::GetAccessor (T & value) const
Access the Ipv6Prefix value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ipv6Prefix value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Ipv6PrefixValue::Set (const Ipv6Prefix & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ipv6Prefix ns3::Ipv6PrefixValue::m_value
The stored Ipv6Prefix instance.
*/

/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ipv6Prefix

\class  ns3::Ipv6PrefixChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6PrefixValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ipv6Prefix
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6PrefixChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Mac16Address Mac16Address Attribute
Attribute implementation for Mac16Address
\see ns3::Mac16Address
*/
/*!
\ingroup attribute_Mac16Address
\class  ns3::Mac16AddressValue "mac16-address.h"
AttributeValue implementation for Mac16Address.
\see AttributeValue
*/
/*!
\fn Mac16Address ns3::Mac16AddressValue::Mac16AddressValue(const Mac16Address & value)
Copy constructor.
\param [in] value The Mac16Address value to copy.
*/
/*!
\fn Mac16Address ns3::Mac16AddressValue::Get (void) const
\returns The Mac16Address value.
*/
/*!
\fn bool ns3::Mac16AddressValue::GetAccessor (T & value) const
Access the Mac16Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac16Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac16AddressValue::Set (const Mac16Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac16Address ns3::Mac16AddressValue::m_value
The stored Mac16Address instance.
*/

/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac16Address

\class  ns3::Mac16AddressChecker "mac16-address.h"
AttributeChecker implementation for Mac16AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac16Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac16AddressChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Mac48Address Mac48Address Attribute
Attribute implementation for Mac48Address
\see ns3::Mac48Address
*/
/*!
\ingroup attribute_Mac48Address
\class  ns3::Mac48AddressValue "mac48-address.h"
AttributeValue implementation for Mac48Address.
\see AttributeValue
*/
/*!
\fn Mac48Address ns3::Mac48AddressValue::Mac48AddressValue(const Mac48Address & value)
Copy constructor.
\param [in] value The Mac48Address value to copy.
*/
/*!
\fn Mac48Address ns3::Mac48AddressValue::Get (void) const
\returns The Mac48Address value.
*/
/*!
\fn bool ns3::Mac48AddressValue::GetAccessor (T & value) const
Access the Mac48Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac48Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac48AddressValue::Set (const Mac48Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac48Address ns3::Mac48AddressValue::m_value
The stored Mac48Address instance.
*/

/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac48Address

\class  ns3::Mac48AddressChecker "mac48-address.h"
AttributeChecker implementation for Mac48AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac48Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac48AddressChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Mac64Address Mac64Address Attribute
Attribute implementation for Mac64Address
\see ns3::Mac64Address
*/
/*!
\ingroup attribute_Mac64Address
\class  ns3::Mac64AddressValue "mac64-address.h"
AttributeValue implementation for Mac64Address.
\see AttributeValue
*/
/*!
\fn Mac64Address ns3::Mac64AddressValue::Mac64AddressValue(const Mac64Address & value)
Copy constructor.
\param [in] value The Mac64Address value to copy.
*/
/*!
\fn Mac64Address ns3::Mac64AddressValue::Get (void) const
\returns The Mac64Address value.
*/
/*!
\fn bool ns3::Mac64AddressValue::GetAccessor (T & value) const
Access the Mac64Address value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Mac64Address value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Mac64AddressValue::Set (const Mac64Address & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Mac64Address ns3::Mac64AddressValue::m_value
The stored Mac64Address instance.
*/

/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Mac64Address

\class  ns3::Mac64AddressChecker "mac64-address.h"
AttributeChecker implementation for Mac64AddressValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Mac64Address
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac64AddressChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_ObjectFactory ObjectFactory Attribute
Attribute implementation for ObjectFactory
\see ns3::ObjectFactory
*/
/*!
\ingroup attribute_ObjectFactory
\class  ns3::ObjectFactoryValue "object-factory.h"
AttributeValue implementation for ObjectFactory.
\see AttributeValue
*/
/*!
\fn ObjectFactory ns3::ObjectFactoryValue::ObjectFactoryValue(const ObjectFactory & value)
Copy constructor.
\param [in] value The ObjectFactory value to copy.
*/
/*!
\fn ObjectFactory ns3::ObjectFactoryValue::Get (void) const
\returns The ObjectFactory value.
*/
/*!
\fn bool ns3::ObjectFactoryValue::GetAccessor (T & value) const
Access the ObjectFactory value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ObjectFactory value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ObjectFactoryValue::Set (const ObjectFactory & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ObjectFactory ns3::ObjectFactoryValue::m_value
The stored ObjectFactory instance.
*/

/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectFactory

\class  ns3::ObjectFactoryChecker "object-factory.h"
AttributeChecker implementation for ObjectFactoryValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectFactory
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectFactoryChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_OrganizationIdentifier OrganizationIdentifier Attribute
Attribute implementation for OrganizationIdentifier
\see ns3::OrganizationIdentifier
*/
/*!
\ingroup attribute_OrganizationIdentifier
\class  ns3::OrganizationIdentifierValue "vendor-specific-action.h"
AttributeValue implementation for OrganizationIdentifier.
\see AttributeValue
*/
/*!
\fn OrganizationIdentifier ns3::OrganizationIdentifierValue::OrganizationIdentifierValue(const OrganizationIdentifier & value)
Copy constructor.
\param [in] value The OrganizationIdentifier value to copy.
*/
/*!
\fn OrganizationIdentifier ns3::OrganizationIdentifierValue::Get (void) const
\returns The OrganizationIdentifier value.
*/
/*!
\fn bool ns3::OrganizationIdentifierValue::GetAccessor (T & value) const
Access the OrganizationIdentifier value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The OrganizationIdentifier value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::OrganizationIdentifierValue::Set (const OrganizationIdentifier & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var OrganizationIdentifier ns3::OrganizationIdentifierValue::m_value
The stored OrganizationIdentifier instance.
*/

/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_OrganizationIdentifier

\class  ns3::OrganizationIdentifierChecker "vendor-specific-action.h"
AttributeChecker implementation for OrganizationIdentifierValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_OrganizationIdentifier
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeOrganizationIdentifierChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Rectangle Rectangle Attribute
Attribute implementation for Rectangle
\see ns3::Rectangle
*/
/*!
\ingroup attribute_Rectangle
\class  ns3::RectangleValue "rectangle.h"
AttributeValue implementation for Rectangle.
\see AttributeValue
*/
/*!
\fn Rectangle ns3::RectangleValue::RectangleValue(const Rectangle & value)
Copy constructor.
\param [in] value The Rectangle value to copy.
*/
/*!
\fn Rectangle ns3::RectangleValue::Get (void) const
\returns The Rectangle value.
*/
/*!
\fn bool ns3::RectangleValue::GetAccessor (T & value) const
Access the Rectangle value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Rectangle value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::RectangleValue::Set (const Rectangle & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Rectangle ns3::RectangleValue::m_value
The stored Rectangle instance.
*/

/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Rectangle

\class  ns3::RectangleChecker "rectangle.h"
AttributeChecker implementation for RectangleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Rectangle
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeRectangleChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Ssid Ssid Attribute
Attribute implementation for Ssid
\see ns3::Ssid
*/
/*!
\ingroup attribute_Ssid
\class  ns3::SsidValue "ssid.h"
AttributeValue implementation for Ssid.
\see AttributeValue
*/
/*!
\fn Ssid ns3::SsidValue::SsidValue(const Ssid & value)
Copy constructor.
\param [in] value The Ssid value to copy.
*/
/*!
\fn Ssid ns3::SsidValue::Get (void) const
\returns The Ssid value.
*/
/*!
\fn bool ns3::SsidValue::GetAccessor (T & value) const
Access the Ssid value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Ssid value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::SsidValue::Set (const Ssid & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Ssid ns3::SsidValue::m_value
The stored Ssid instance.
*/

/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Ssid

\class  ns3::SsidChecker "ssid.h"
AttributeChecker implementation for SsidValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Ssid
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeSsidChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_TypeId TypeId Attribute
Attribute implementation for TypeId
\see ns3::TypeId
*/
/*!
\ingroup attribute_TypeId
\class  ns3::TypeIdValue "type-id.h"
AttributeValue implementation for TypeId.
\see AttributeValue
*/
/*!
\fn TypeId ns3::TypeIdValue::TypeIdValue(const TypeId & value)
Copy constructor.
\param [in] value The TypeId value to copy.
*/
/*!
\fn TypeId ns3::TypeIdValue::Get (void) const
\returns The TypeId value.
*/
/*!
\fn bool ns3::TypeIdValue::GetAccessor (T & value) const
Access the TypeId value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The TypeId value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TypeIdValue::Set (const TypeId & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var TypeId ns3::TypeIdValue::m_value
The stored TypeId instance.
*/

/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_TypeId

\class  ns3::TypeIdChecker "type-id.h"
AttributeChecker implementation for TypeIdValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_TypeId
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTypeIdChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_UanModesList UanModesList Attribute
Attribute implementation for UanModesList
\see ns3::UanModesList
*/
/*!
\ingroup attribute_UanModesList
\class  ns3::UanModesListValue "uan-tx-mode.h"
AttributeValue implementation for UanModesList.
\see AttributeValue
*/
/*!
\fn UanModesList ns3::UanModesListValue::UanModesListValue(const UanModesList & value)
Copy constructor.
\param [in] value The UanModesList value to copy.
*/
/*!
\fn UanModesList ns3::UanModesListValue::Get (void) const
\returns The UanModesList value.
*/
/*!
\fn bool ns3::UanModesListValue::GetAccessor (T & value) const
Access the UanModesList value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The UanModesList value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::UanModesListValue::Set (const UanModesList & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var UanModesList ns3::UanModesListValue::m_value
The stored UanModesList instance.
*/

/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_UanModesList

\class  ns3::UanModesListChecker "uan-tx-mode.h"
AttributeChecker implementation for UanModesListValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_UanModesList
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUanModesListChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Vector2D Vector2D Attribute
Attribute implementation for Vector2D
\see ns3::Vector2D
*/
/*!
\ingroup attribute_Vector2D
\class  ns3::Vector2DValue "vector.h"
AttributeValue implementation for Vector2D.
\see AttributeValue
*/
/*!
\fn Vector2D ns3::Vector2DValue::Vector2DValue(const Vector2D & value)
Copy constructor.
\param [in] value The Vector2D value to copy.
*/
/*!
\fn Vector2D ns3::Vector2DValue::Get (void) const
\returns The Vector2D value.
*/
/*!
\fn bool ns3::Vector2DValue::GetAccessor (T & value) const
Access the Vector2D value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector2D value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Vector2DValue::Set (const Vector2D & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector2D ns3::Vector2DValue::m_value
The stored Vector2D instance.
*/

/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector2D

\class  ns3::Vector2DChecker "vector.h"
AttributeChecker implementation for Vector2DValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector2D
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector2DChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Vector3D Vector3D Attribute
Attribute implementation for Vector3D
\see ns3::Vector3D
*/
/*!
\ingroup attribute_Vector3D
\class  ns3::Vector3DValue "vector.h"
AttributeValue implementation for Vector3D.
\see AttributeValue
*/
/*!
\fn Vector3D ns3::Vector3DValue::Vector3DValue(const Vector3D & value)
Copy constructor.
\param [in] value The Vector3D value to copy.
*/
/*!
\fn Vector3D ns3::Vector3DValue::Get (void) const
\returns The Vector3D value.
*/
/*!
\fn bool ns3::Vector3DValue::GetAccessor (T & value) const
Access the Vector3D value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Vector3D value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::Vector3DValue::Set (const Vector3D & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Vector3D ns3::Vector3DValue::m_value
The stored Vector3D instance.
*/

/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Vector3D

\class  ns3::Vector3DChecker "vector.h"
AttributeChecker implementation for Vector3DValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Vector3D
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector3DChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_HeOperation HeOperation Attribute
Attribute implementation for HeOperation
\see ns3::HeOperation
*/
/*!
\ingroup attribute_HeOperation
\class  ns3::HeOperationValue "he-operation.h"
AttributeValue implementation for HeOperation.
\see AttributeValue
*/
/*!
\fn HeOperation ns3::HeOperationValue::HeOperationValue(const HeOperation & value)
Copy constructor.
\param [in] value The HeOperation value to copy.
*/
/*!
\fn HeOperation ns3::HeOperationValue::Get (void) const
\returns The HeOperation value.
*/
/*!
\fn bool ns3::HeOperationValue::GetAccessor (T & value) const
Access the HeOperation value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The HeOperation value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::HeOperationValue::Set (const HeOperation & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var HeOperation ns3::HeOperationValue::m_value
The stored HeOperation instance.
*/

/*!
\ingroup attribute_HeOperation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeOperationAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HeOperation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeOperationAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HeOperation

\class  ns3::HeOperationChecker "he-operation.h"
AttributeChecker implementation for HeOperationValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_HeOperation
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHeOperationChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_VhtOperation VhtOperation Attribute
Attribute implementation for VhtOperation
\see ns3::VhtOperation
*/
/*!
\ingroup attribute_VhtOperation
\class  ns3::VhtOperationValue "vht-operation.h"
AttributeValue implementation for VhtOperation.
\see AttributeValue
*/
/*!
\fn VhtOperation ns3::VhtOperationValue::VhtOperationValue(const VhtOperation & value)
Copy constructor.
\param [in] value The VhtOperation value to copy.
*/
/*!
\fn VhtOperation ns3::VhtOperationValue::Get (void) const
\returns The VhtOperation value.
*/
/*!
\fn bool ns3::VhtOperationValue::GetAccessor (T & value) const
Access the VhtOperation value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The VhtOperation value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::VhtOperationValue::Set (const VhtOperation & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var VhtOperation ns3::VhtOperationValue::m_value
The stored VhtOperation instance.
*/

/*!
\ingroup attribute_VhtOperation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtOperationAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_VhtOperation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtOperationAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_VhtOperation

\class  ns3::VhtOperationChecker "vht-operation.h"
AttributeChecker implementation for VhtOperationValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_VhtOperation
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVhtOperationChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_HtOperation HtOperation Attribute
Attribute implementation for HtOperation
\see ns3::HtOperation
*/
/*!
\ingroup attribute_HtOperation
\class  ns3::HtOperationValue "ht-operation.h"
AttributeValue implementation for HtOperation.
\see AttributeValue
*/
/*!
\fn HtOperation ns3::HtOperationValue::HtOperationValue(const HtOperation & value)
Copy constructor.
\param [in] value The HtOperation value to copy.
*/
/*!
\fn HtOperation ns3::HtOperationValue::Get (void) const
\returns The HtOperation value.
*/
/*!
\fn bool ns3::HtOperationValue::GetAccessor (T & value) const
Access the HtOperation value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The HtOperation value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::HtOperationValue::Set (const HtOperation & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var HtOperation ns3::HtOperationValue::m_value
The stored HtOperation instance.
*/

/*!
\ingroup attribute_HtOperation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtOperationAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HtOperation
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtOperationAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_HtOperation

\class  ns3::HtOperationChecker "ht-operation.h"
AttributeChecker implementation for HtOperationValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_HtOperation
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHtOperationChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Waypoint Waypoint Attribute
Attribute implementation for Waypoint
\see ns3::Waypoint
*/
/*!
\ingroup attribute_Waypoint
\class  ns3::WaypointValue "waypoint.h"
AttributeValue implementation for Waypoint.
\see AttributeValue
*/
/*!
\fn Waypoint ns3::WaypointValue::WaypointValue(const Waypoint & value)
Copy constructor.
\param [in] value The Waypoint value to copy.
*/
/*!
\fn Waypoint ns3::WaypointValue::Get (void) const
\returns The Waypoint value.
*/
/*!
\fn bool ns3::WaypointValue::GetAccessor (T & value) const
Access the Waypoint value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Waypoint value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::WaypointValue::Set (const Waypoint & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Waypoint ns3::WaypointValue::m_value
The stored Waypoint instance.
*/

/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Waypoint

\class  ns3::WaypointChecker "waypoint.h"
AttributeChecker implementation for WaypointValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Waypoint
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWaypointChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_WifiMode WifiMode Attribute
Attribute implementation for WifiMode
\see ns3::WifiMode
*/
/*!
\ingroup attribute_WifiMode
\class  ns3::WifiModeValue "wifi-mode.h"
AttributeValue implementation for WifiMode.
\see AttributeValue
*/
/*!
\fn WifiMode ns3::WifiModeValue::WifiModeValue(const WifiMode & value)
Copy constructor.
\param [in] value The WifiMode value to copy.
*/
/*!
\fn WifiMode ns3::WifiModeValue::Get (void) const
\returns The WifiMode value.
*/
/*!
\fn bool ns3::WifiModeValue::GetAccessor (T & value) const
Access the WifiMode value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The WifiMode value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::WifiModeValue::Set (const WifiMode & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var WifiMode ns3::WifiModeValue::m_value
The stored WifiMode instance.
*/

/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_WifiMode

\class  ns3::WifiModeChecker "wifi-mode.h"
AttributeChecker implementation for WifiModeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_WifiMode
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWifiModeChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Boolean Boolean Attribute
Attribute implementation for Boolean
*/
/*!
\ingroup attribute_Boolean
\class  ns3::BooleanValue "boolean.h"
AttributeValue implementation for Boolean.
\see AttributeValue
*/
/*!
\fn Boolean ns3::BooleanValue::BooleanValue(const Boolean & value)
Copy constructor.
\param [in] value The Boolean value to copy.
*/
/*!
\fn Boolean ns3::BooleanValue::Get (void) const
\returns The Boolean value.
*/
/*!
\fn bool ns3::BooleanValue::GetAccessor (T & value) const
Access the Boolean value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Boolean value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::BooleanValue::Set (const Boolean & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Boolean ns3::BooleanValue::m_value
The stored Boolean instance.
*/

/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Boolean

\class  ns3::BooleanChecker "boolean.h"
AttributeChecker implementation for BooleanValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Boolean
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBooleanChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Callback Callback Attribute
Attribute implementation for Callback
\see ns3::Callback
*/
/*!
\ingroup attribute_Callback
\class  ns3::CallbackValue "callback.h"
AttributeValue implementation for Callback.
\see AttributeValue
*/
/*!
\fn Callback ns3::CallbackValue::CallbackValue(const Callback & value)
Copy constructor.
\param [in] value The Callback value to copy.
*/
/*!
\fn Callback ns3::CallbackValue::Get (void) const
\returns The Callback value.
*/
/*!
\fn bool ns3::CallbackValue::GetAccessor (T & value) const
Access the Callback value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Callback value, as type \p T.
\returns true.
*/
/*!
\var Callback ns3::CallbackValue::m_value
The stored Callback instance.
*/

/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Callback

\class  ns3::CallbackChecker "callback.h"
AttributeChecker implementation for CallbackValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Callback
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeCallbackChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Double Double Attribute
Attribute implementation for Double
*/
/*!
\ingroup attribute_Double
\class  ns3::DoubleValue "double.h"
AttributeValue implementation for Double.
\see AttributeValue
*/
/*!
\fn Double ns3::DoubleValue::DoubleValue(const double & value)
Copy constructor.
\param [in] value The Double value to copy.
*/
/*!
\fn double ns3::DoubleValue::Get (void) const
\returns The Double value.
*/
/*!
\fn bool ns3::DoubleValue::GetAccessor (T & value) const
Access the Double value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Double value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::DoubleValue::Set (const double & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var double ns3::DoubleValue::m_value
The stored Double instance.
*/

/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Double

\class  ns3::DoubleChecker "double.h"
AttributeChecker implementation for DoubleValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Double
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDoubleChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Enum Enum Attribute
Attribute implementation for Enum
*/
/*!
\ingroup attribute_Enum
\class  ns3::EnumValue "enum.h"
AttributeValue implementation for Enum.
\see AttributeValue
*/
/*!
\fn Enum ns3::EnumValue::EnumValue(const int & value)
Copy constructor.
\param [in] value The Enum value to copy.
*/
/*!
\fn int ns3::EnumValue::Get (void) const
\returns The Enum value.
*/
/*!
\fn bool ns3::EnumValue::GetAccessor (T & value) const
Access the Enum value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Enum value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::EnumValue::Set (const int & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var int ns3::EnumValue::m_value
The stored Enum instance.
*/

/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Enum

\class  ns3::EnumChecker "enum.h"
AttributeChecker implementation for EnumValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Enum
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeEnumChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Integer Integer Attribute
Attribute implementation for Integer
*/
/*!
\ingroup attribute_Integer
\class  ns3::IntegerValue "integer.h"
AttributeValue implementation for Integer.
\see AttributeValue
*/
/*!
\fn Integer ns3::IntegerValue::IntegerValue(const int64_t & value)
Copy constructor.
\param [in] value The Integer value to copy.
*/
/*!
\fn int64_t ns3::IntegerValue::Get (void) const
\returns The Integer value.
*/
/*!
\fn bool ns3::IntegerValue::GetAccessor (T & value) const
Access the Integer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Integer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::IntegerValue::Set (const int64_t & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var int64_t ns3::IntegerValue::m_value
The stored Integer instance.
*/

/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Integer

\class  ns3::IntegerChecker "integer.h"
AttributeChecker implementation for IntegerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Integer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIntegerChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Pointer Pointer Attribute
Attribute implementation for Pointer
*/
/*!
\ingroup attribute_Pointer
\class  ns3::PointerValue "pointer.h"
AttributeValue implementation for Pointer.
\see AttributeValue
*/
/*!
\fn Pointer ns3::PointerValue::PointerValue(const Pointer & value)
Copy constructor.
\param [in] value The Pointer value to copy.
*/
/*!
\fn Pointer ns3::PointerValue::Get (void) const
\returns The Pointer value.
*/
/*!
\fn bool ns3::PointerValue::GetAccessor (T & value) const
Access the Pointer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Pointer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::PointerValue::Set (const Pointer & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Pointer ns3::PointerValue::m_value
The stored Pointer instance.
*/

/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Pointer

\class  ns3::PointerChecker "pointer.h"
AttributeChecker implementation for PointerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Pointer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakePointerChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_RandomVariable RandomVariable Attribute
Attribute implementation for RandomVariable
\see ns3::RandomVariable
*/
/*!
\ingroup attribute_RandomVariable
\class  ns3::RandomVariableValue "random-variable-stream.h"
AttributeValue implementation for RandomVariable.
\see AttributeValue
*/
/*!
\fn RandomVariable ns3::RandomVariableValue::RandomVariableValue(const RandomVariable & value)
Copy constructor.
\param [in] value The RandomVariable value to copy.
*/
/*!
\fn RandomVariable ns3::RandomVariableValue::Get (void) const
\returns The RandomVariable value.
*/
/*!
\fn bool ns3::RandomVariableValue::GetAccessor (T & value) const
Access the RandomVariable value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The RandomVariable value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::RandomVariableValue::Set (const RandomVariable & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var RandomVariable ns3::RandomVariableValue::m_value
The stored RandomVariable instance.
*/

/*!
\ingroup attribute_RandomVariable
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRandomVariableAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_RandomVariable
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRandomVariableAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_RandomVariable

\class  ns3::RandomVariableChecker "random-variable-stream.h"
AttributeChecker implementation for RandomVariableValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_RandomVariable
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeRandomVariableChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_String String Attribute
Attribute implementation for String
*/
/*!
\ingroup attribute_String
\class  ns3::StringValue "string.h"
AttributeValue implementation for String.
\see AttributeValue
*/
/*!
\fn String ns3::StringValue::StringValue(const std::string & value)
Copy constructor.
\param [in] value The String value to copy.
*/
/*!
\fn std::string ns3::StringValue::Get (void) const
\returns The String value.
*/
/*!
\fn bool ns3::StringValue::GetAccessor (T & value) const
Access the String value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The String value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::StringValue::Set (const std::string & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var std::string ns3::StringValue::m_value
The stored String instance.
*/

/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_String

\class  ns3::StringChecker "string.h"
AttributeChecker implementation for StringValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_String
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeStringChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Time Time Attribute
Attribute implementation for Time
\see ns3::Time
*/
/*!
\ingroup attribute_Time
\class  ns3::TimeValue "nstime.h"
AttributeValue implementation for Time.
\see AttributeValue
*/
/*!
\fn Time ns3::TimeValue::TimeValue(const Time & value)
Copy constructor.
\param [in] value The Time value to copy.
*/
/*!
\fn Time ns3::TimeValue::Get (void) const
\returns The Time value.
*/
/*!
\fn bool ns3::TimeValue::GetAccessor (T & value) const
Access the Time value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Time value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::TimeValue::Set (const Time & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var Time ns3::TimeValue::m_value
The stored Time instance.
*/

/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Time

\class  ns3::TimeChecker "nstime.h"
AttributeChecker implementation for TimeValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Time
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTimeChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_Uinteger Uinteger Attribute
Attribute implementation for Uinteger
*/
/*!
\ingroup attribute_Uinteger
\class  ns3::UintegerValue "uinteger.h"
AttributeValue implementation for Uinteger.
\see AttributeValue
*/
/*!
\fn Uinteger ns3::UintegerValue::UintegerValue(const uint64_t & value)
Copy constructor.
\param [in] value The Uinteger value to copy.
*/
/*!
\fn uint64_t ns3::UintegerValue::Get (void) const
\returns The Uinteger value.
*/
/*!
\fn bool ns3::UintegerValue::GetAccessor (T & value) const
Access the Uinteger value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The Uinteger value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::UintegerValue::Set (const uint64_t & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var uint64_t ns3::UintegerValue::m_value
The stored Uinteger instance.
*/

/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_Uinteger

\class  ns3::UintegerChecker "uinteger.h"
AttributeChecker implementation for UintegerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_Uinteger
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUintegerChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_EmptyAttribute EmptyAttribute Attribute
Attribute implementation for EmptyAttribute
*/
/*!
\ingroup attribute_EmptyAttribute
\class  ns3::EmptyAttributeValue "attribute.h"
AttributeValue implementation for EmptyAttribute.
\see AttributeValue
*/
/*!
\fn EmptyAttribute ns3::EmptyAttributeValue::EmptyAttributeValue(void)
*/
/*!
\fn EmptyAttribute ns3::EmptyAttributeValue::Get (void) const
\returns The EmptyAttribute value.
*/
/*!
\fn bool ns3::EmptyAttributeValue::GetAccessor (T & value) const
Access the EmptyAttribute value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The EmptyAttribute value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::EmptyAttributeValue::Set (const EmptyAttribute & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var EmptyAttribute ns3::EmptyAttributeValue::m_value
The stored EmptyAttribute instance.
*/

/*!
\ingroup attribute
\addtogroup attribute_ObjectPtrContainer ObjectPtrContainer Attribute
Attribute implementation for ObjectPtrContainer
*/
/*!
\ingroup attribute_ObjectPtrContainer
\class  ns3::ObjectPtrContainerValue "object-ptr-container.h"
AttributeValue implementation for ObjectPtrContainer.
\see AttributeValue
*/
/*!
\fn ObjectPtrContainer ns3::ObjectPtrContainerValue::ObjectPtrContainerValue(void)
*/
/*!
\fn ObjectPtrContainer ns3::ObjectPtrContainerValue::Get (void) const
\returns The ObjectPtrContainer value.
*/
/*!
\fn bool ns3::ObjectPtrContainerValue::GetAccessor (T & value) const
Access the ObjectPtrContainer value as type \p T.
\tparam T \explicit The type to cast to.
\param [out] value The ObjectPtrContainer value, as type \p T.
\returns true.
*/
/*!
\fn void ns3::ObjectPtrContainerValue::Set (const ObjectPtrContainer & value)
Set the value.
\param [in] value The value to adopt.
*/
/*!
\var ObjectPtrContainer ns3::ObjectPtrContainerValue::m_value
The stored ObjectPtrContainer instance.
*/

/*!
\ingroup attribute_ObjectPtrContainer

\class  ns3::ObjectPtrContainerChecker "object-ptr-container.h"
AttributeChecker implementation for ObjectPtrContainerValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectPtrContainer
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectPtrContainerChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_ObjectVector ObjectVector Attribute
Attribute implementation for ObjectVector
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectVector

\class  ns3::ObjectVectorChecker "object-vector.h"
AttributeChecker implementation for ObjectVectorValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectVector
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectVectorChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
/*!
\ingroup attribute
\addtogroup attribute_ObjectMap ObjectMap Attribute
Attribute implementation for ObjectMap
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1)
\copydoc ns3::MakeAccessorHelper(T1)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1, T2 a2)
\copydoc ns3::MakeAccessorHelper(T1,T2)
\see AttributeAccessor
*/
/*!
\ingroup attribute_ObjectMap

\class  ns3::ObjectMapChecker "object-map.h"
AttributeChecker implementation for ObjectMapValue.
\see AttributeChecker
*/
/*!
\ingroup attribute_ObjectMap
\fn ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectMapChecker (void)
\returns The AttributeChecker.
\see AttributeChecker
*/
