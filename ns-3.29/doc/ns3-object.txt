
===============================================================
File: 
Section utils
Doxygen docs generated from the TypeId database.
Note: This file is automatically generated by  print-introspected-doxygen.cc. Do not edit this file! Edit that file instead.

===============================================================

ns3::A2A4RsrqHandoverAlgorithm

Config Paths

ns3::A2A4RsrqHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A2A4RsrqHandoverAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A2A4RsrqHandoverAlgorithm"


Attributes

    * ServingCellThreshold: If the RSRQ of the serving cell is worse than this threshold, neighbour cells are consider for handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:34
        * Initial value: 30
        * Flags: construct write read 
   
    * NeighbourCellOffset: Minimum offset between the serving and the best neighbour cell to trigger the handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::A3RsrpHandoverAlgorithm

Config Paths

ns3::A3RsrpHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A3RsrpHandoverAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::A3RsrpHandoverAlgorithm"


Attributes

    * Hysteresis: Handover margin (hysteresis) in dB (rounded to the nearest multiple of 0.5 dB)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: uint8_t 0:15
        * Initial value: 3
        * Flags: construct write read 
   
    * TimeToTrigger: Time during which neighbour cell's RSRP must continuously higher than serving cell's RSRP in order to trigger a handover
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +256000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::AarfcdWifiManager

Config Paths

ns3::AarfcdWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AarfcdWifiManager"


Attributes

    * SuccessK: Multiplication factor for the success threshold in the AARF algorithm.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * TimerK: Multiplication factor for the timer threshold in the AARF algorithm.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * MaxSuccessThreshold: Maximum value of the success threshold in the AARF algorithm.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 60
        * Flags: construct write read 
   
    * MinTimerThreshold: The minimum value for the 'timer' threshold in the AARF algorithm.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   
    * MinSuccessThreshold: The minimum value for the success threshold in the AARF algorithm.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * MinRtsWnd: Minimum value for Rts window of Aarf-CD
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxRtsWnd: Maximum value for Rts window of Aarf-CD
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 40
        * Flags: construct write read 
   
    * TurnOffRtsAfterRateDecrease: If true the RTS mechanism will be turned off when the rate will be decreased
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * TurnOnRtsAfterRateIncrease: If true the RTS mechanism will be turned on when the rate will be increased
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 336 bytes (on a 64-bit architecture).

===============================================================

ns3::AarfWifiManager

Config Paths

ns3::AarfWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AarfWifiManager"


Attributes

    * SuccessK: Multiplication factor for the success threshold in the AARF algorithm.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * TimerK: Multiplication factor for the timer threshold in the AARF algorithm.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * MaxSuccessThreshold: Maximum value of the success threshold in the AARF algorithm.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 60
        * Flags: construct write read 
   
    * MinTimerThreshold: The minimum value for the 'timer' threshold in the AARF algorithm.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   
    * MinSuccessThreshold: The minimum value for the success threshold in the AARF algorithm.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::AcousticModemEnergyModel

Introspection did not find any typical Config paths.

Attributes

    * TxPowerW: The modem Tx power in Watts
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 50
        * Flags: construct write read 
   
    * RxPowerW: The modem Rx power in Watts
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.158
        * Flags: construct write read 
   
    * IdlePowerW: The modem Idle power in Watts
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.158
        * Flags: construct write read 
   
    * SleepPowerW: The modem Sleep power in Watts
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.0058
        * Flags: construct write read 
   

TraceSources

    * TotalEnergyConsumption: Total energy consumption of the modem device.
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::AdhocWifiMac

Config Paths

ns3::AdhocWifiMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::AdhocWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::AdhocWifiMac"


No Attributes are defined for this type.

Attributes defined in parent class ns3::RegularWifiMac

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write 
   
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Txop: The Txop object.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Txop>
        * Flags: read 
   
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   

Attributes defined in parent class ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::RegularWifiMac

    * TxOkHeader: The header of successfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback

    * TxErrHeader: The header of unsuccessfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback


TraceSources defined in parent class ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 360 bytes (on a 64-bit architecture).

===============================================================

ns3::AlohaNoackMacHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::AlohaNoackNetDevice

Config Paths

ns3::AlohaNoackNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice"


Attributes

    * Address: The MAC address of this device.
  
        * Set with class:  Mac48AddressValue
        * Underlying type:  Mac48Address
        * Initial value: 12:34:56:78:90:12
        * Flags: construct write read 
   
    * Queue: packets being transmitted get queued here
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<Packet>>
        * Initial value: 0
        * Flags: construct write read 
   
    * Mtu: The Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:65535
        * Initial value: 1500
        * Flags: construct write read 
   
    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Object>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 200 bytes (on a 64-bit architecture).

===============================================================

ns3::AmpduSubframeHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::AmpduTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::AmrrWifiManager

Config Paths

ns3::AmrrWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AmrrWifiManager"


Attributes

    * UpdatePeriod: The interval between decisions about rate control changes
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * FailureRatio: Ratio of minimum erroneous transmissions needed to switch to a lower rate
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.333333
        * Flags: construct write read 
   
    * SuccessRatio: Ratio of maximum erroneous transmissions needed to switch to a higher rate
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.1
        * Flags: construct write read 
   
    * MaxSuccessThreshold: Maximum number of consecutive success periods needed to switch to a higher rate
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * MinSuccessThreshold: Minimum number of consecutive success periods needed to switch to a higher rate
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::AmsduSubframeHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::AntennaModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::aodv::DeferredRouteOutputTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::aodv::RerrHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::aodv::RoutingProtocol

Config Paths

ns3::aodv::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::aodv::RoutingProtocol"


Attributes

    * HelloInterval: HELLO messages emission interval.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * TtlStart: Initial TTL value for RREQ.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1
        * Flags: construct write read 
   
    * TtlIncrement: TTL increment for each attempt using the expanding ring search for RREQ dissemination.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 2
        * Flags: construct write read 
   
    * TtlThreshold: Maximum TTL value for expanding ring search, TTL = NetDiameter is used beyond this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 7
        * Flags: construct write read 
   
    * TimeoutBuffer: Provide a buffer for the timeout.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 2
        * Flags: construct write read 
   
    * RreqRetries: Maximum number of retransmissions of RREQ to discover a route
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * RreqRateLimit: Maximum number of RREQ per second.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * RerrRateLimit: Maximum number of RERR per second.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * NodeTraversalTime: Conservative estimate of the average one hop traversal time for packets and should include queuing delays, interrupt processing times and transfer times.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +40000000.0ns
        * Flags: construct write read 
   
    * NextHopWait: Period of our waiting for the neighbour's RREP_ACK = 10 ms + NodeTraversalTime
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   
    * ActiveRouteTimeout: Period of time during which the route is considered to be valid
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3000000000.0ns
        * Flags: construct write read 
   
    * MyRouteTimeout: Value of lifetime field in RREP generating by this node = 2 * max(ActiveRouteTimeout, PathDiscoveryTime)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +11199999999.0ns
        * Flags: construct write read 
   
    * BlackListTimeout: Time for which the node is put into the blacklist = RreqRetries * NetTraversalTime
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5599999999.0ns
        * Flags: construct write read 
   
    * DeletePeriod: DeletePeriod is intended to provide an upper bound on the time for which an upstream node A can have a neighbor B as an active next hop for destination D, while B has invalidated the route to D. = 5 * max (HelloInterval, ActiveRouteTimeout)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +15000000000.0ns
        * Flags: construct write read 
   
    * NetDiameter: Net diameter measures the maximum possible number of hops between two nodes in the network
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 35
        * Flags: construct write read 
   
    * NetTraversalTime: Estimate of the average net traversal time = 2 * NodeTraversalTime * NetDiameter
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2799999999.0ns
        * Flags: construct write read 
   
    * PathDiscoveryTime: Estimate of maximum time needed to find route in network = 2 * NetTraversalTime
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5599999999.0ns
        * Flags: construct write read 
   
    * MaxQueueLen: Maximum number of packets that we allow a routing protocol to buffer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * MaxQueueTime: Maximum time packets can be queued (in seconds)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * AllowedHelloLoss: Number of hello messages which may be loss for valid link.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 2
        * Flags: construct write read 
   
    * GratuitousReply: Indicates whether a gratuitous RREP should be unicast to the node originated route discovery.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * DestinationOnly: Indicates only the destination may respond to this RREQ.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * EnableHello: Indicates whether a hello messages enable.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * EnableBroadcast: Indicates whether a broadcast data packets forwarding enable.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UniformRv: Access to the underlying UniformRandomVariable
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UniformRandomVariable>
        * Initial value: ns3::UniformRandomVariable
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 800 bytes (on a 64-bit architecture).

===============================================================

ns3::aodv::RrepAckHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::aodv::RrepHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::aodv::RreqHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::aodv::TypeHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::AparfWifiManager

Config Paths

ns3::AparfWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::AparfWifiManager"


Attributes

    * SuccessThreshold1: The minimum number of successful transmissions in "High" state to try a new power or rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   
    * SuccessThreshold2: The minimum number of successful transmissions in "Low" state to try a new power or rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * FailThreshold: The minimum number of failed transmissions to try a new power or rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * PowerThreshold: The maximum number of power changes.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * PowerDecrementStep: Step size for decrement the power.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * PowerIncrementStep: Step size for increment the power.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * RateDecrementStep: Step size for decrement the rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * RateIncrementStep: Step size for increment the rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * PowerChange: The transmission power has change
%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback

    * RateChange: The transmission rate has change
%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::Application

Config Paths

ns3::Application is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]"


Attributes

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::ApplicationPacketProbe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The packet plus its socket address that serve as the output for this probe
%Callback signature: ns3::Packet::AddressTracedCallback

    * OutputBytes: The number of bytes in the packet
%Callback signature: ns3::Packet::SizeTracedCallback


Size of this type is 128 bytes (on a 64-bit architecture).

===============================================================

ns3::ApWifiMac

Config Paths

ns3::ApWifiMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::ApWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::ApWifiMac"


Attributes

    * BeaconInterval: Delay between two beacons
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +102400000.0ns
        * Flags: construct write read 
   
    * CfpMaxDuration: The maximum size of the CFP (used when AP supports PCF)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +51200000.0ns
        * Flags: construct write read 
   
    * BeaconJitter: A uniform random variable to cause the initial beacon starting time (after simulation time 0) to be distributed between 0 and the BeaconInterval.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UniformRandomVariable>
        * Initial value: ns3::UniformRandomVariable
        * Flags: construct write read 
   
    * EnableBeaconJitter: If beacons are enabled, whether to jitter the initial send event.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * BeaconGeneration: Whether or not beacons are generated.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write 
   
    * EnableNonErpProtection: Whether or not protection mechanism should be used when non-ERP STAs are present within the BSS.This parameter is only used when ERP is supported by the AP.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsMode: If non-HT STAs are detected, whether to force RIFS to be disabled within the BSS.This parameter is only used when HT is supported by the AP.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

Attributes defined in parent class ns3::InfrastructureWifiMac

    * PcfSupported: This Boolean attribute is set to enable PCF support at this STA
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RegularWifiMac

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write 
   
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Txop: The Txop object.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Txop>
        * Flags: read 
   
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   

Attributes defined in parent class ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::RegularWifiMac

    * TxOkHeader: The header of successfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback

    * TxErrHeader: The header of unsuccessfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback


TraceSources defined in parent class ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 552 bytes (on a 64-bit architecture).

===============================================================

ns3::ArfWifiManager

Config Paths

ns3::ArfWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ArfWifiManager"


Attributes

    * TimerThreshold: The 'timer' threshold in the ARF algorithm.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   
    * SuccessThreshold: The minimum number of successful transmissions to try a new rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 296 bytes (on a 64-bit architecture).

===============================================================

ns3::ArpCache

Config Paths

ns3::ArpCache is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]/ArpCache"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/CacheList/[i]"


Attributes

    * AliveTimeout: When this timeout expires, the matching cache entry needs refreshing
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +120000000000.0ns
        * Flags: construct write read 
   
    * DeadTimeout: When this timeout expires, a new attempt to resolve the matching entry is made
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000000.0ns
        * Flags: construct write read 
   
    * WaitReplyTimeout: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * MaxRetries: Number of retransmissions of ArpRequest before marking dead
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   
    * PendingQueueSize: The size of the queue for packets pending an arp reply.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   

TraceSources

    * Drop: Packet dropped due to ArpCache entry in WaitReply expiring.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 168 bytes (on a 64-bit architecture).

===============================================================

ns3::ArpHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::ArpL3Protocol

Config Paths

ns3::ArpL3Protocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::ArpL3Protocol"


Attributes

    * CacheList: The list of ARP caches
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::ArpCache>
        * Flags: read 
   
    * RequestJitter: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]
        * Flags: construct write read 
   

TraceSources

    * Drop: Packet dropped because not enough room in pending queue for a specific cache entry.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::Asn1Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::AthstatsWifiTraceSink

Introspection did not find any typical Config paths.

Attributes

    * Interval: Time interval between reports
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::BandwidthManager

Config Paths

ns3::BandwidthManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BandwidthManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::BandwidthRequestHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::BaseStationNetDevice

Config Paths

ns3::BaseStationNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice"


Attributes

    * BSScheduler: Downlink Scheduler for BS
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BSScheduler>
        * Initial value: 0
        * Flags: construct write read 
   
    * InitialRangInterval: Time between Initial Ranging regions assigned by the BS. Maximum is 2s
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   
    * DcdInterval: Time between transmission of DCD messages. Maximum value is 10s.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3000000000.0ns
        * Flags: construct write read 
   
    * UcdInterval: Time between transmission of UCD messages. Maximum value is 10s.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3000000000.0ns
        * Flags: construct write read 
   
    * IntervalT8: Wait for DSA/DSC Acknowledge timeout. Maximum 300ms.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   
    * RangReqOppSize: The ranging opportunity size in symbols
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:256
        * Initial value: 8
        * Flags: construct write read 
   
    * BwReqOppSize: The bandwidth request opportunity size in symbols
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:256
        * Initial value: 2
        * Flags: construct write read 
   
    * MaxRangCorrectionRetries: Number of retries on contention Ranging Requests
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:16
        * Initial value: 16
        * Flags: construct write read 
   
    * SSManager: The ss manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::SSManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * Scheduler: The BS scheduler attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BSScheduler>
        * Initial value: 0
        * Flags: construct write read 
   
    * LinkManager: The link manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BSLinkManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * UplinkScheduler: The uplink scheduler attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UplinkScheduler>
        * Initial value: 0
        * Flags: construct write read 
   
    * BsIpcsPacketClassifier: The uplink IP packet classifier attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::IpcsClassifier>
        * Initial value: 0
        * Flags: construct write read 
   
    * ServiceFlowManager: The service flow manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ServiceFlowManager>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WimaxNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:1500
        * Initial value: 1400
        * Flags: construct write read 
   
    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxPhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * Channel: The channel attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxChannel>
        * Initial value: 0
        * Flags: construct write read 
   
    * RTG: receive/transmit transition gap.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:120
        * Initial value: 0
        * Flags: construct write read 
   
    * TTG: transmit/receive transition gap.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:120
        * Initial value: 0
        * Flags: construct write read 
   
    * ConnectionManager: The connection manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ConnectionManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * BurstProfileManager: The burst profile manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BurstProfileManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * BandwidthManager: The bandwidth manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BandwidthManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * InitialRangingConnection: Initial ranging connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   
    * BroadcastConnection: Broadcast connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * BSTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * BSTxDrop: A packet has been dropped in the MAC layer before being queued for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * BSPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * BSRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * BSRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


TraceSources defined in parent class ns3::WimaxNetDevice

    * Rx: Receive trace
%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback

    * Tx: Transmit trace
%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback


Size of this type is 672 bytes (on a 64-bit architecture).

===============================================================

ns3::BasicEnergyHarvester

Introspection did not find any typical Config paths.

Attributes

    * PeriodicHarvestedPowerUpdateInterval: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * HarvestablePower: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=2.0]
        * Flags: construct write read 
   

TraceSources

    * HarvestedPower: Harvested power by the BasicEnergyHarvester.
%Callback signature: ns3::TracedValueCallback::Double

    * TotalEnergyHarvested: Total energy harvested by the harvester.
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::BasicEnergySource

Introspection did not find any typical Config paths.

Attributes

    * BasicEnergySourceInitialEnergyJ: Initial energy stored in basic energy source.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * BasicEnergySupplyVoltageV: Initial supply voltage for basic energy source.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3
        * Flags: construct write read 
   
    * BasicEnergyLowBatteryThreshold: Low battery threshold for basic energy source.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.1
        * Flags: construct write read 
   
    * BasicEnergyHighBatteryThreshold: High battery threshold for basic energy source.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.15
        * Flags: construct write read 
   
    * PeriodicEnergyUpdateInterval: Time between two consecutive periodic energy updates.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

TraceSources

    * RemainingEnergy: Remaining energy at BasicEnergySource.
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::BinaryErrorModel

Config Paths

ns3::BinaryErrorModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BinaryErrorModel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::ErrorModel

    * IsEnabled: Whether this ErrorModel is enabled or not.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::BlockAckManager

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 200 bytes (on a 64-bit architecture).

===============================================================

ns3::BooleanProbe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The bool that serves as output for this probe
%Callback signature: ns3::TracedValueCallback::Bool


Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::BridgeChannel

Config Paths

ns3::BridgeChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::BridgeChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::BridgeChannel"

    * "/ChannelList/[i]/$ns3::BridgeChannel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::BridgeNetDevice

Config Paths

ns3::BridgeNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BridgeNetDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1500
        * Flags: construct write read 
   
    * EnableLearning: Enable the learning mode of the Learning Bridge
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * ExpirationTime: Time it takes for learned MAC state entry to expire.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +300000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::BSLinkManager

Config Paths

ns3::BSLinkManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/LinkManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/LinkManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::BsmApplication

Config Paths

ns3::BsmApplication is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::BsmApplication"


No Attributes are defined for this type.

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 216 bytes (on a 64-bit architecture).

===============================================================

ns3::BSScheduler

Config Paths

ns3::BSScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::BSSchedulerRtps

Config Paths

ns3::BSSchedulerRtps is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerRtps"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerRtps"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerRtps"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerRtps"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::BSSchedulerSimple

Config Paths

ns3::BSSchedulerSimple is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerSimple"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerSimple"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BSScheduler/$ns3::BSSchedulerSimple"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/Scheduler/$ns3::BSSchedulerSimple"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Building

Introspection did not find any typical Config paths.

Attributes

    * NRoomsX: The number of rooms in the X axis.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * NRoomsY: The number of rooms in the Y axis.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * NFloors: The number of floors of this building.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * Id: The id (unique integer) of this Building.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   
    * Boundaries: The boundaries of this Building as a value of type ns3::Box
  
        * Set with class:  BoxValue
        * Underlying type:  Box
        * Initial value: 0|0|0|0|0|0
        * Flags: construct write read 
   
    * Type: The type of building
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Residential
        * Flags: construct write read 
   
    * ExternalWallsType: The type of material of which the external walls are made
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ConcreteWithWindows
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::BuildingListPriv

Introspection did not find any typical Config paths.

Attributes

    * BuildingList: The list of all buildings created during the simulation.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Building>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::BuildingsPropagationLossModel

Config Paths

ns3::BuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel"


Attributes

    * ShadowSigmaOutdoor: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 7
        * Flags: construct write read 
   
    * ShadowSigmaIndoor: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 8
        * Flags: construct write read 
   
    * ShadowSigmaExtWalls: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   
    * InternalWallLoss: Additional loss for each internal wall [dB]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 128 bytes (on a 64-bit architecture).

===============================================================

ns3::BulkSendApplication

Config Paths

ns3::BulkSendApplication is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::BulkSendApplication"


Attributes

    * SendSize: The amount of data to send each time.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 1:4294967295
        * Initial value: 1400
        * Flags: construct write read 
   
    * Remote: The address of the destination
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * MaxBytes: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint64_t 0:18446744073709551615
        * Initial value: 0
        * Flags: construct write read 
   
    * Protocol: The type of protocol to use.
  
        * Set with class:  TypeIdValue
        * Underlying type:  TypeId
        * Initial value: ns3::TcpSocketFactory
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Tx: A new packet is created and is sent
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::BurstErrorModel

Config Paths

ns3::BurstErrorModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel"


Attributes

    * ErrorRate: The burst error event.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * BurstStart: The decision variable attached to this error model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * BurstSize: The number of packets being corrupted at one drop.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=1|Max=4]
        * Flags: construct write read 
   

Attributes defined in parent class ns3::ErrorModel

    * IsEnabled: Whether this ErrorModel is enabled or not.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::BurstProfileManager

Config Paths

ns3::BurstProfileManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BurstProfileManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::CalendarScheduler

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::CaraWifiManager

Config Paths

ns3::CaraWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::CaraWifiManager"


Attributes

    * ProbeThreshold: The number of consecutive transmissions failure to activate the RTS probe.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * FailureThreshold: The number of consecutive transmissions failure to decrease the rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * SuccessThreshold: The minimum number of successful transmissions to try a new rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * Timeout: The 'timer' in the CARA algorithm
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 304 bytes (on a 64-bit architecture).

===============================================================

ns3::CcHelper

Introspection did not find any typical Config paths.

Attributes

    * NumberOfComponentCarriers: Set the number of Component Carriers to setup per eNodeBCurrently the maximum Number of Component Carriers allowed is 2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:2
        * Initial value: 1
        * Flags: construct write read 
   
    * UlEarfcn: Set Ul Channel [EARFCN] for the first carrier component
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * DlEarfcn: Set Dl Channel [EARFCN] for the first carrier component
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * DlBandwidth: Set Dl Bandwidth for the first carrier component
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:100
        * Initial value: 25
        * Flags: construct write read 
   
    * UlBandwidth: Set Dl Bandwidth for the first carrier component
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:100
        * Initial value: 25
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::Channel

Config Paths

ns3::Channel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel"

    * "/ChannelList/[i]"


Attributes

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::ChannelCoordinator

Config Paths

ns3::ChannelCoordinator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelCoordinator"


Attributes

    * CchInterval: CCH Interval, default value is 50ms.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   
    * SchInterval: SCH Interval, default value is 50ms.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   
    * GuardInterval: Guard Interval, default value is 4ms.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +4000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::ChannelListPriv

Config Paths

ns3::ChannelListPriv is accessible through the following paths with Config::Set and Config::Connect:

    * ""


Attributes

    * ChannelList: The list of all channels created during the simulation.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Channel>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::ChannelManager

Config Paths

ns3::ChannelManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::ChannelScheduler

Config Paths

ns3::ChannelScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelScheduler"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Chunk

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 8 bytes (on a 64-bit architecture).

===============================================================

ns3::CoDelQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * MaxSize: The maximum number of packets/bytes accepted by this queue disc.
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 1500000B
        * Flags: construct write read 
   
    * MinBytes: The CoDel algorithm minbytes parameter.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1500
        * Flags: construct write read 
   
    * Interval: The CoDel algorithm interval
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: 100ms
        * Flags: construct write read 
   
    * Target: The CoDel algorithm target queue delay
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: 5ms
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

TraceSources

    * Count: CoDel count
%Callback signature: ns3::TracedValueCallback::Uint32

    * LastCount: CoDel lastcount
%Callback signature: ns3::TracedValueCallback::Uint32

    * DropState: Dropping state
%Callback signature: ns3::TracedValueCallback::Bool

    * DropNext: Time until next packet drop
%Callback signature: ns3::TracedValueCallback::Uint32


TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 1048 bytes (on a 64-bit architecture).

===============================================================

ns3::ComponentCarrier

Introspection did not find any typical Config paths.

Attributes

    * UlBandwidth: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlBandwidth: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:262143
        * Initial value: 100
        * Flags: construct write read 
   
    * UlEarfcn: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 18000:262143
        * Initial value: 18100
        * Flags: construct write read 
   
    * CsgId: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * CsgIndication: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * PrimaryCarrier: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::ComponentCarrierEnb

Config Paths

ns3::ComponentCarrierEnb is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]"


Attributes

    * LteEnbPhy: The PHY associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteEnbPhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteEnbMac: The MAC associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteEnbMac>
        * Initial value: 0
        * Flags: construct write read 
   
    * FfMacScheduler: The scheduler associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::FfMacScheduler>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteFfrAlgorithm: The FFR algorithm associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteFfrAlgorithm>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::ComponentCarrier

    * UlBandwidth: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlBandwidth: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:262143
        * Initial value: 100
        * Flags: construct write read 
   
    * UlEarfcn: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 18000:262143
        * Initial value: 18100
        * Flags: construct write read 
   
    * CsgId: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * CsgIndication: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * PrimaryCarrier: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::ComponentCarrierUe

Config Paths

ns3::ComponentCarrierUe is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]"


Attributes

    * LteUePhy: The PHY associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteUePhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteUeMac: The MAC associated to this UeNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteUeMac>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::ComponentCarrier

    * UlBandwidth: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlBandwidth: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:262143
        * Initial value: 100
        * Flags: construct write read 
   
    * UlEarfcn: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 18000:262143
        * Initial value: 18100
        * Flags: construct write read 
   
    * CsgId: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * CsgIndication: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * PrimaryCarrier: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::ConfigStore

Introspection did not find any typical Config paths.

Attributes

    * Mode: Configuration mode
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: None
        * Flags: construct write 
   
    * Filename: The file where the configuration should be saved to or loaded from.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 
        * Flags: construct write 
   
    * FileFormat: Type of file format
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: RawText
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::ConnectionManager

Config Paths

ns3::ConnectionManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/ConnectionManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::ConstantAccelerationMobilityModel

Config Paths

ns3::ConstantAccelerationMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantAccelerationMobilityModel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 128 bytes (on a 64-bit architecture).

===============================================================

ns3::ConstantPositionMobilityModel

Config Paths

ns3::ConstantPositionMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantPositionMobilityModel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::ConstantRandomVariable

Config Paths

ns3::ConstantRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ConstantRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ConstantRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ConstantRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ConstantRandomVariable"


Attributes

    * Constant: The constant value returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::ConstantRateWifiManager

Config Paths

ns3::ConstantRateWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ConstantRateWifiManager"


Attributes

    * DataMode: The transmission mode to use for every data packet transmission
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: OfdmRate6Mbps
        * Flags: construct write read 
   
    * ControlMode: The transmission mode to use for every RTS packet transmission.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: OfdmRate6Mbps
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 272 bytes (on a 64-bit architecture).

===============================================================

ns3::ConstantSpectrumPropagationLossModel

Introspection did not find any typical Config paths.

Attributes

    * Loss: Path loss (dB) between transmitter and receiver
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::ConstantSpeedPropagationDelayModel

Config Paths

ns3::ConstantSpeedPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::ConstantSpeedPropagationDelayModel"


Attributes

    * Speed: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.99792e+08
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::ConstantVelocityMobilityModel

Config Paths

ns3::ConstantVelocityMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::ConstantVelocityMobilityModel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::consumer

Introspection did not find any typical Config paths.

Attributes

    * RetxTimer: Timeout defining how frequent retransmission timeouts should be checked
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   

TraceSources

    * CongestionWindow: The ITP connection's congestion window
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 384 bytes (on a 64-bit architecture).

===============================================================

ns3::CosineAntennaModel

Introspection did not find any typical Config paths.

Attributes

    * Beamwidth: The 3dB beamwidth (degrees)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:180
        * Initial value: 60
        * Flags: construct write read 
   
    * Orientation: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -360:360
        * Initial value: 0
        * Flags: construct write read 
   
    * MaxGain: The gain (dB) at the antenna boresight (the direction of maximum gain)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::Cost231PropagationLossModel

Config Paths

ns3::Cost231PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::Cost231PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Cost231PropagationLossModel"


Attributes

    * Lambda: The wavelength  (default is 2.3 GHz at 300 000 km/s).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.130435
        * Flags: construct write read 
   
    * Frequency: The Frequency  (default is 2.3 GHz).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.3e+09
        * Flags: construct write read 
   
    * BSAntennaHeight: BS Antenna Height (default is 50m).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 50
        * Flags: construct write read 
   
    * SSAntennaHeight: SS Antenna Height (default is 3m).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3
        * Flags: construct write read 
   
    * MinDistance: The distance under which the propagation model refuses to give results (m) 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.5
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::CqaFfMacScheduler

Config Paths

ns3::CqaFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::CqaFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * CqaMetric: CqaFfMacScheduler metric type that can be: CqaFf, CqaPf
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: CqaFf
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1408 bytes (on a 64-bit architecture).

===============================================================

ns3::CsmaChannel

Config Paths

ns3::CsmaChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::CsmaChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::CsmaChannel"

    * "/ChannelList/[i]/$ns3::CsmaChannel"


Attributes

    * DataRate: The transmission data rate to be provided to devices connected to the channel
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 4294967295bps
        * Flags: construct write read 
   
    * Delay: Transmission delay through the channel
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::CsmaNetDevice

Config Paths

ns3::CsmaNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice"


Attributes

    * Address: The MAC address of this device.
  
        * Set with class:  Mac48AddressValue
        * Underlying type:  Mac48Address
        * Initial value: ff:ff:ff:ff:ff:ff
        * Flags: construct write read 
   
    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1500
        * Flags: construct write read 
   
    * EncapsulationMode: The link-layer encapsulation type to use.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Dix
        * Flags: construct write 
   
    * SendEnable: Enable or disable the transmitter section of the device.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * ReceiveEnable: Enable or disable the receiver section of the device.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * ReceiveErrorModel: The receiver error model used to simulate packet loss
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ErrorModel>
        * Initial value: 0
        * Flags: construct write read 
   
    * TxQueue: A queue to use as the transmit queue in the device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<Packet>>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacTxBackoff: Trace source indicating a packet has been delayed by the CSMA backoff process
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::Packet::TracedCallback

    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback

    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 432 bytes (on a 64-bit architecture).

===============================================================

ns3::CtrlBAckRequestHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::CtrlBAckResponseHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::DataCollectionObject

Introspection did not find any typical Config paths.

Attributes

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Dcd

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::DefaultChannelScheduler

Config Paths

ns3::DefaultChannelScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/ChannelScheduler/$ns3::DefaultChannelScheduler"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::DefaultSimulatorImpl

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 128 bytes (on a 64-bit architecture).

===============================================================

ns3::DeterministicRandomVariable

Config Paths

ns3::DeterministicRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::DeterministicRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::DeterministicRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::DeterministicRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::DeterministicRandomVariable"


No Attributes are defined for this type.

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::DeviceEnergyModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::DeviceNameTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::DhcpClient

Config Paths

ns3::DhcpClient is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient"


Attributes

    * RTRS: Time for retransmission of Discover message
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * Collect: Time for which offer collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * ReRequest: Time after which request will be resent to next server
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * Transactions: The possible value of transaction numbers 
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1000000.0]
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * NewLease: Get a NewLease
%Callback signature: ns3::Ipv4Address::TracedCallback

    * ExpireLease: A lease expires
%Callback signature: ns3::Ipv4Address::TracedCallback


Size of this type is 440 bytes (on a 64-bit architecture).

===============================================================

ns3::DhcpHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 544 bytes (on a 64-bit architecture).

===============================================================

ns3::DhcpServer

Config Paths

ns3::DhcpServer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpServer"


Attributes

    * LeaseTime: Lease for which address will be leased.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * RenewTime: Time after which client should renew.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +15000000000.0ns
        * Flags: construct write read 
   
    * RebindTime: Time after which client should rebind.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000000000.0ns
        * Flags: construct write read 
   
    * PoolAddresses: Pool of addresses to provide on request.
  
        * Set with class:  Ipv4AddressValue
        * Underlying type:  Ipv4Address
        * Initial value: 102.102.102.102
        * Flags: construct write read 
   
    * FirstAddress: The First valid address that can be given.
  
        * Set with class:  Ipv4AddressValue
        * Underlying type:  Ipv4Address
        * Initial value: 102.102.102.102
        * Flags: construct write read 
   
    * LastAddress: The Last valid address that can be given.
  
        * Set with class:  Ipv4AddressValue
        * Underlying type:  Ipv4Address
        * Initial value: 102.102.102.102
        * Flags: construct write read 
   
    * PoolMask: Mask of the pool of addresses.
  
        * Set with class:  Ipv4MaskValue
        * Underlying type:  Ipv4Mask
        * Initial value: 102.102.102.102
        * Flags: construct write read 
   
    * Gateway: Address of default gateway
  
        * Set with class:  Ipv4AddressValue
        * Underlying type:  Ipv4Address
        * Initial value: 102.102.102.102
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 264 bytes (on a 64-bit architecture).

===============================================================

ns3::DistributedSimulatorImpl

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::DlMap

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::AirtimeLinkMetricCalculator

Introspection did not find any typical Config paths.

Attributes

    * TestLength: Number of bytes in test frame (a constant 1024 in the standard)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:65535
        * Initial value: 1024
        * Flags: construct write 
   
    * Dot11MetricTid: TID used to calculate metric (data rate)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::HwmpProtocol

Config Paths

ns3::dot11s::HwmpProtocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol/$ns3::dot11s::HwmpProtocol"


Attributes

    * RandomStart: Random delay at first proactive PREQ
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * MaxQueueSize: Maximum number of packets we can store when resolving route
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:65535
        * Initial value: 255
        * Flags: construct write read 
   
    * Dot11MeshHWMPmaxPREQretries: Maximum number of retries before we suppose the destination to be unreachable
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:255
        * Initial value: 3
        * Flags: construct write read 
   
    * Dot11MeshHWMPnetDiameterTraversalTime: Time we suppose the packet to go from one edge of the network to another
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +102400000.0ns
        * Flags: construct write read 
   
    * Dot11MeshHWMPpreqMinInterval: Minimal interval between to successive PREQs
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +102400000.0ns
        * Flags: construct write read 
   
    * Dot11MeshHWMPperrMinInterval: Minimal interval between to successive PREQs
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +102400000.0ns
        * Flags: construct write read 
   
    * Dot11MeshHWMPactiveRootTimeout: Lifetime of poractive routing information
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5120000000.0ns
        * Flags: construct write read 
   
    * Dot11MeshHWMPactivePathTimeout: Lifetime of reactive routing information
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5120000000.0ns
        * Flags: construct write read 
   
    * Dot11MeshHWMPpathToRootInterval: Interval between two successive proactive PREQs
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2048000000.0ns
        * Flags: construct write read 
   
    * Dot11MeshHWMPrannInterval: Lifetime of poractive routing information
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5120000000.0ns
        * Flags: construct write read 
   
    * MaxTtl: Initial value of Time To Live field
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 2:255
        * Initial value: 32
        * Flags: construct write read 
   
    * UnicastPerrThreshold: Maximum number of PERR receivers, when we send a PERR as a chain of unicasts
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:255
        * Initial value: 32
        * Flags: construct write read 
   
    * UnicastPreqThreshold: Maximum number of PREQ receivers, when we send a PREQ as a chain of unicasts
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:255
        * Initial value: 1
        * Flags: construct write read 
   
    * UnicastDataThreshold: Maximum number ofbroadcast receivers, when we send a broadcast as a chain of unicasts
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:255
        * Initial value: 1
        * Flags: construct write read 
   
    * DoFlag: Destination only HWMP flag
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * RfFlag: Reply and forward flag
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * RouteDiscoveryTime: The time of route discovery procedure
%Callback signature: ns3::Time::TracedCallback

    * RouteChange: Routing table changed
%Callback signature: ns3::HwmpProtocol::RouteChangeTracedCallback


Size of this type is 464 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::HwmpRtable

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::HwmpTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::PeerLink

Introspection did not find any typical Config paths.

Attributes

    * RetryTimeout: Retry timeout
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +40960000.0ns
        * Flags: construct write read 
   
    * HoldingTimeout: Holding timeout
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +40960000.0ns
        * Flags: construct write read 
   
    * ConfirmTimeout: Confirm timeout
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +40960000.0ns
        * Flags: construct write read 
   
    * MaxRetries: Maximum number of retries
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 4
        * Flags: construct write read 
   
    * MaxBeaconLoss: Maximum number of lost beacons before link will be closed
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:65535
        * Initial value: 2
        * Flags: construct write read 
   
    * MaxPacketFailure: Maximum number of failed packets before link will be closed
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:65535
        * Initial value: 2
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 328 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::PeerLinkCloseStart

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::PeerLinkConfirmStart

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::PeerLinkOpenStart

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::dot11s::PeerManagementProtocol

Introspection did not find any typical Config paths.

Attributes

    * MaxNumberOfPeerLinks: Maximum number of peer links
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 32
        * Flags: construct write read 
   
    * MaxBeaconShiftValue: Maximum number of TUs for beacon shifting
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 15
        * Flags: construct write read 
   
    * EnableBeaconCollisionAvoidance: Enable/Disable Beacon collision avoidance.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * LinkOpen: New peer link opened
%Callback signature: ns3::PeerManagementProtocol::LinkOpenCloseTracedCallback

    * LinkClose: New peer link closed
%Callback signature: ns3::PeerManagementProtocol::LinkOpenCloseTracedCallback


Size of this type is 304 bytes (on a 64-bit architecture).

===============================================================

ns3::Dot11sStack

Introspection did not find any typical Config paths.

Attributes

    * Root: The MAC address of root mesh point.
  
        * Set with class:  Mac48AddressValue
        * Underlying type:  Mac48Address
        * Initial value: ff:ff:ff:ff:ff:ff
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::DoubleProbe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The double that serves as output for this probe
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::DropTailQueue<Packet>

Config Paths

ns3::DropTailQueue<Packet> is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue/$ns3::DropTailQueue<Packet>"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice/Queue/$ns3::DropTailQueue<Packet>"


No Attributes are defined for this type.

Attributes defined in parent class ns3::QueueBase

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 100p
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::Queue<Packet>

    * Enqueue: Enqueue a packet in the queue.
%Callback signature: ns3::Packet::TracedCallback

    * Dequeue: Dequeue a packet from the queue.
%Callback signature: ns3::Packet::TracedCallback

    * Drop: Drop a packet (for whatever reason).
%Callback signature: ns3::Packet::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue.
%Callback signature: ns3::Packet::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue.
%Callback signature: ns3::Packet::TracedCallback


TraceSources defined in parent class ns3::QueueBase

    * PacketsInQueue: Number of packets currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 240 bytes (on a 64-bit architecture).

===============================================================

ns3::DropTailQueue<QueueDiscItem>

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::QueueBase

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 100p
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::Queue<QueueDiscItem>

    * Enqueue: Enqueue a packet in the queue.
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue.
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet (for whatever reason).
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue.
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue.
%Callback signature: ns3::QueueDiscItem::TracedCallback


TraceSources defined in parent class ns3::QueueBase

    * PacketsInQueue: Number of packets currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 240 bytes (on a 64-bit architecture).

===============================================================

ns3::DsaAck

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::DsaReq

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 288 bytes (on a 64-bit architecture).

===============================================================

ns3::DsaRsp

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 288 bytes (on a 64-bit architecture).

===============================================================

ns3::dsdv::DsdvHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::dsdv::RoutingProtocol

Config Paths

ns3::dsdv::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::dsdv::RoutingProtocol"


Attributes

    * PeriodicUpdateInterval: Periodic interval between exchange of full routing tables among nodes. 
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +15000000000.0ns
        * Flags: construct write read 
   
    * SettlingTime: Minimum time an update is to be stored in adv table before sending outin case of change in metric (in seconds)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * MaxQueueLen: Maximum number of packets that we allow a routing protocol to buffer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 500
        * Flags: construct write read 
   
    * MaxQueuedPacketsPerDst: Maximum number of packets that we allow per destination to buffer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 5
        * Flags: construct write read 
   
    * MaxQueueTime: Maximum time packets can be queued (in seconds)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * EnableBuffering: Enables buffering of data packets if no route to destination is available
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * EnableWST: Enables Weighted Settling Time for the updates before advertising
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * Holdtimes: Times the forwarding Interval to purge the route.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   
    * WeightedFactor: WeightedFactor for the settling time if Weighted Settling Time is enabled
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.875
        * Flags: construct write read 
   
    * EnableRouteAggregation: Enables Weighted Settling Time for the updates before advertising
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * RouteAggregationTime: Time to aggregate updates before sending them out (in seconds)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 552 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrFsHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrGraReply

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrNetworkQueue

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionAck

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionAckHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionAckReq

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionAckReqHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionPad1

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 168 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionPad1Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionPadn

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 168 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionPadnHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRerr

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRerrHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRerrUnreachHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 120 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRerrUnsupportHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRrep

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRrepHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRreq

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionRreqHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptions

Introspection did not find any typical Config paths.

Attributes

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

TraceSources

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 168 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionSR

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::dsr::DsrOptions

    * Drop: Packet dropped.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: Receive DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback


Size of this type is 176 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrOptionSRHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrPassiveBuffer

Config Paths

ns3::dsr::DsrPassiveBuffer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::dsr::DsrRouting/PassiveBuffer"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrRouteCache

Config Paths

ns3::dsr::DsrRouteCache is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::dsr::DsrRouting/RouteCache"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 560 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrRouting

Config Paths

ns3::dsr::DsrRouting is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::dsr::DsrRouting"


Attributes

    * RouteCache: The route cache for saving routes from route discovery process.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::dsr::DsrRouteCache>
        * Initial value: 0
        * Flags: construct write read 
   
    * RreqTable: The request table to manage route requests.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::dsr::DsrRreqTable>
        * Initial value: 0
        * Flags: construct write read 
   
    * PassiveBuffer: The passive buffer to manage promisucously received passive ack.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::dsr::DsrPassiveBuffer>
        * Initial value: 0
        * Flags: construct write read 
   
    * MaxSendBuffLen: Maximum number of packets that can be stored in send buffer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * MaxSendBuffTime: Maximum time packets can be queued in the send buffer .
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * MaxMaintLen: Maximum number of packets that can be stored in maintenance buffer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 50
        * Flags: construct write read 
   
    * MaxMaintTime: Maximum time packets can be queued in maintenance buffer.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * MaxCacheLen: Maximum number of route entries that can be stored in route cache.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * RouteCacheTimeout: Maximum time the route cache can be queued in route cache.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +300000000000.0ns
        * Flags: construct write read 
   
    * MaxEntriesEachDst: Maximum number of route entries for a single destination to respond.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 20
        * Flags: construct write read 
   
    * SendBuffInterval: How often to check send buffer for packet with route.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000000.0ns
        * Flags: construct write read 
   
    * NodeTraversalTime: The time it takes to traverse two neighboring nodes.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +40000000.0ns
        * Flags: construct write read 
   
    * RreqRetries: Maximum number of retransmissions for request discovery of a route.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 16
        * Flags: construct write read 
   
    * MaintenanceRetries: Maximum number of retransmissions for data packets from maintenance buffer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * RequestTableSize: Maximum number of request entries in the request table, set this as the number of nodes in the simulation.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * RequestIdSize: Maximum number of request source Ids in the request table.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 16
        * Flags: construct write read 
   
    * UniqueRequestIdSize: Maximum number of request Ids in the request table for a single destination.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 256
        * Flags: construct write read 
   
    * NonPropRequestTimeout: The timeout value for non-propagation request.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000.0ns
        * Flags: construct write read 
   
    * DiscoveryHopLimit: The max discovery hop limit for route requests.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 255
        * Flags: construct write read 
   
    * MaxSalvageCount: The max salvage count for a single data packet.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 15
        * Flags: construct write read 
   
    * BlacklistTimeout: The time for a neighbor to stay in blacklist.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3000000000.0ns
        * Flags: construct write read 
   
    * GratReplyHoldoff: The time for gratuitous reply entry to expire.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * BroadcastJitter: The jitter time to avoid collision for broadcast packets.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * LinkAckTimeout: The time a packet in maintenance buffer wait for link acknowledgment.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * TryLinkAcks: The number of link acknowledgment to use.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * PassiveAckTimeout: The time a packet in maintenance buffer wait for passive acknowledgment.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * TryPassiveAcks: The number of passive acknowledgment to use.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * RequestPeriod: The base time interval between route requests.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * MaxRequestPeriod: The max time interval between route requests.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * GraReplyTableSize: The gratuitous reply table size.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * CacheType: Use Link Cache or use Path Cache
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: LinkCache
        * Flags: construct write read 
   
    * StabilityDecrFactor: The stability decrease factor for link cache
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * StabilityIncrFactor: The stability increase factor for link cache
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write read 
   
    * InitStability: The initial stability factor for link cache
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000000000.0ns
        * Flags: construct write read 
   
    * MinLifeTime: The minimal life time for link cache
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * UseExtends: The extension time for link cache
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +120000000000.0ns
        * Flags: construct write read 
   
    * EnableSubRoute: Enables saving of sub route when receiving route error messages, only available when using path route cache
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RetransIncr: The increase time for retransmission timer when facing network congestion
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +20000000.0ns
        * Flags: construct write read 
   
    * MaxNetworkQueueSize: The max number of packet to save in the network queue.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 400
        * Flags: construct write read 
   
    * MaxNetworkQueueDelay: The max time for a packet to stay in the network queue.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * NumPriorityQueues: The max number of packet to save in the network queue.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * LinkAcknowledgment: Enable Link layer acknowledgment mechanism
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

Attributes defined in parent class ns3::IpL4Protocol

    * ProtocolNumber: The IP protocol number.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t 0:255
        * Flags: read 
   

TraceSources

    * Tx: Send DSR packet.
%Callback signature: ns3::dsr::DsrOptionSRHeader::TracedCallback

    * Drop: Drop DSR packet
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 1360 bytes (on a 64-bit architecture).

===============================================================

ns3::dsr::DsrRreqTable

Config Paths

ns3::dsr::DsrRreqTable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::dsr::DsrRouting/RreqTable"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 272 bytes (on a 64-bit architecture).

===============================================================

ns3::DsrRoutingHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::DynamicQueueLimits

Introspection did not find any typical Config paths.

Attributes

    * HoldTime: The DQL algorithm hold time
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: 1s
        * Flags: construct write read 
   
    * MaxLimit: Maximum limit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:1879048192
        * Initial value: 1879048192
        * Flags: construct write read 
   
    * MinLimit: Minimum limit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * Limit: Limit value calculated by DQL
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::EmpiricalRandomVariable

Config Paths

ns3::EmpiricalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::EmpiricalRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::EmpiricalRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::EmpiricalRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::EmpiricalRandomVariable"


No Attributes are defined for this type.

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::EmuEpcHelper

Introspection did not find any typical Config paths.

Attributes

    * sgwDeviceName: The name of the device used for the S1-U interface of the SGW
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: veth0
        * Flags: construct write read 
   
    * enbDeviceName: The name of the device used for the S1-U interface of the eNB
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: veth1
        * Flags: construct write read 
   
    * SgwMacAddress: MAC address used for the SGW 
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 00:00:00:59:00:aa
        * Flags: construct write read 
   
    * EnbMacAddressBase: First 5 bytes of the Enb MAC address base
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 00:00:00:eb:00
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 288 bytes (on a 64-bit architecture).

===============================================================

ns3::EnergyHarvester

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::EnergyHarvesterContainer

Config Paths

ns3::EnergyHarvesterContainer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::EnergyHarvesterContainer"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::EnergySource

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::EnergySourceContainer

Config Paths

ns3::EnergySourceContainer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::EnergySourceContainer"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcHelper

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcMme

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcUeNas

Config Paths

ns3::EpcUeNas is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/EpcUeNas"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/EpcUeNas"


No Attributes are defined for this type.

TraceSources

    * StateTransition: fired upon every UE NAS state transition
%Callback signature: ns3::EpcUeNas::StateTracedCallback


Size of this type is 224 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2HandoverPreparationFailureHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2HandoverRequestAckHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2HandoverRequestHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2LoadInformationHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2ResourceStatusUpdateHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2SnStatusTransferHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::EpcX2UeContextReleaseHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::EpsBearerTag

Introspection did not find any typical Config paths.

Attributes

    * rnti: The rnti that indicates the UE which packet belongs
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Flags: read 
   
    * bid: The EPS bearer id within the UE to which the packet belongs
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::ErlangRandomVariable

Config Paths

ns3::ErlangRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ErlangRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ErlangRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ErlangRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/ErlangRv"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ErlangRandomVariable"


Attributes

    * K: The k value for the Erlang distribution returned by this RNG stream.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * Lambda: The lambda value for the Erlang distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::ErrorChannel

Config Paths

ns3::ErrorChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::ErrorChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SimpleChannel/$ns3::ErrorChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::ErrorChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SimpleChannel/$ns3::ErrorChannel"

    * "/ChannelList/[i]/$ns3::ErrorChannel"

    * "/ChannelList/[i]/$ns3::SimpleChannel/$ns3::ErrorChannel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::SimpleChannel

    * Delay: Transmission delay through the channel
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 168 bytes (on a 64-bit architecture).

===============================================================

ns3::ErrorModel

Config Paths

ns3::ErrorModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel"


Attributes

    * IsEnabled: Whether this ErrorModel is enabled or not.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::ErrorRateModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::EthernetHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::EthernetTrailer

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::ExponentialRandomVariable

Config Paths

ns3::ExponentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ExponentialRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ExponentialRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ExponentialRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ExponentialRandomVariable"


Attributes

    * Mean: The mean of the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Bound: The upper bound on the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::FdBetFfMacScheduler

Config Paths

ns3::FdBetFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdBetFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1352 bytes (on a 64-bit architecture).

===============================================================

ns3::FdMtFfMacScheduler

Config Paths

ns3::FdMtFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdMtFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1344 bytes (on a 64-bit architecture).

===============================================================

ns3::FdNetDevice

Config Paths

ns3::FdNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::FdNetDevice"


Attributes

    * Address: The MAC address of this device.
  
        * Set with class:  Mac48AddressValue
        * Underlying type:  Mac48Address
        * Initial value: ff:ff:ff:ff:ff:ff
        * Flags: construct write read 
   
    * Start: The simulation time at which to spin up the device thread.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: The simulation time at which to tear down the device thread.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * EncapsulationMode: The link-layer encapsulation type to use.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Dix
        * Flags: construct write read 
   
    * RxQueueSize: Maximum size of the read queue.  This value limits number of packets that have been read from the network into a memory buffer but have not yet been processed by the simulator.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   

TraceSources

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback

    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 424 bytes (on a 64-bit architecture).

===============================================================

ns3::FdTbfqFfMacScheduler

Config Paths

ns3::FdTbfqFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::FdTbfqFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * DebtLimit: Flow debt limit (default -625000 bytes)
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t -2147483648:2147483647
        * Initial value: -625000
        * Flags: construct write read 
   
    * CreditLimit: Flow credit limit (default 625000 bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 625000
        * Flags: construct write read 
   
    * TokenPoolSize: The maximum value of flow token pool (default 1 bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * CreditableThreshold: Threshold of flow credit (default 0 bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1368 bytes (on a 64-bit architecture).

===============================================================

ns3::FfMacScheduler

Config Paths

ns3::FfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler"


Attributes

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::FifoQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 1000p
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 904 bytes (on a 64-bit architecture).

===============================================================

ns3::FileAggregator

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 672 bytes (on a 64-bit architecture).

===============================================================

ns3::FixedRoomPositionAllocator

Config Paths

ns3::FixedRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::FixedRoomPositionAllocator"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::FixedRssLossModel

Config Paths

ns3::FixedRssLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::FixedRssLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FixedRssLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FixedRssLossModel"


Attributes

    * Rss: The fixed receiver Rss.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -150
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::flame::FlameHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::flame::FlameProtocol

Config Paths

ns3::flame::FlameProtocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol/$ns3::flame::FlameProtocol"


Attributes

    * BroadcastInterval: How often we must send broadcast packets
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * MaxCost: Cost threshold after which packet will be dropped
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 3:255
        * Initial value: 32
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::flame::FlameRtable

Introspection did not find any typical Config paths.

Attributes

    * Lifetime: The lifetime of the routing entry
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +120000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::flame::FlameTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::FlameStack

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::FlowIdTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::FlowMonitor

Introspection did not find any typical Config paths.

Attributes

    * MaxPerHopDelay: The maximum per-hop delay that should be considered.  Packets still not received after this delay are to be considered lost.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * StartTime: The time when the monitoring starts.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write 
   
    * DelayBinWidth: The width used in the delay histogram.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.001
        * Flags: construct write read 
   
    * JitterBinWidth: The width used in the jitter histogram.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.001
        * Flags: construct write read 
   
    * PacketSizeBinWidth: The width used in the packetSize histogram.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 20
        * Flags: construct write read 
   
    * FlowInterruptionsBinWidth: The width used in the flowInterruptions histogram.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.25
        * Flags: construct write read 
   
    * FlowInterruptionsMinTime: The minimum inter-arrival time that is considered a flow interruption.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 272 bytes (on a 64-bit architecture).

===============================================================

ns3::FqCoDelFlow

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::QueueDiscClass

    * QueueDisc: The queue disc attached to the class
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDisc>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::FqCoDelQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * Interval: The CoDel algorithm interval for each FQCoDel queue
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 100ms
        * Flags: construct write read 
   
    * Target: The CoDel algorithm target queue delay for each FQCoDel queue
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 5ms
        * Flags: construct write read 
   
    * MaxSize: The maximum number of packets accepted by this queue disc
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 10240p
        * Flags: construct write read 
   
    * Flows: The number of queues into which the incoming packets are classified
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1024
        * Flags: construct write read 
   
    * DropBatchSize: The maximum number of packets dropped from the fat flow
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * Perturbation: The salt used as an additional input to the hash function used to classify packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 1064 bytes (on a 64-bit architecture).

===============================================================

ns3::FragmentationSubheader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::FrameCaptureModel

Config Paths

ns3::FrameCaptureModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/FrameCaptureModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/FrameCaptureModel"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::FriisPropagationLossModel

Config Paths

ns3::FriisPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::FriisPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::FriisPropagationLossModel"


Attributes

    * Frequency: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5.15e+09
        * Flags: construct write read 
   
    * SystemLoss: The system loss
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MinLoss: The minimum value (dB) of the total loss, used at short ranges. Note: 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::FriisSpectrumPropagationLossModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::GammaRandomVariable

Config Paths

ns3::GammaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::GammaRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::GammaRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::GammaRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel/GammaRv"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::GammaRandomVariable"


Attributes

    * Alpha: The alpha value for the gamma distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Beta: The beta value for the gamma distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::GaussMarkovMobilityModel

Config Paths

ns3::GaussMarkovMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel"


Attributes

    * Bounds: Bounds of the area to cruise.
  
        * Set with class:  BoxValue
        * Underlying type:  Box
        * Initial value: -100|100|-100|100|0|100
        * Flags: construct write read 
   
    * TimeStep: Change current direction and speed after moving for this time.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * Alpha: A constant representing the tunable parameter in the Gauss-Markov model.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MeanVelocity: A random variable used to assign the average velocity.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * MeanDirection: A random variable used to assign the average direction.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283185307]
        * Flags: construct write read 
   
    * MeanPitch: A random variable used to assign the average pitch.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::ConstantRandomVariable[Constant=0.0]
        * Flags: construct write read 
   
    * NormalVelocity: A gaussian random variable used to calculate the next velocity value.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::NormalRandomVariable>
        * Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]
        * Flags: construct write read 
   
    * NormalDirection: A gaussian random variable used to calculate the next direction value.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::NormalRandomVariable>
        * Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]
        * Flags: construct write read 
   
    * NormalPitch: A gaussian random variable used to calculate the next pitch value.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::NormalRandomVariable>
        * Initial value: ns3::NormalRandomVariable[Mean=0.0|Variance=1.0|Bound=10.0]
        * Flags: construct write read 
   

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 296 bytes (on a 64-bit architecture).

===============================================================

ns3::GenericMacHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::GlobalRouter

Config Paths

ns3::GlobalRouter is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::GlobalRouter"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::GnuplotAggregator

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 232 bytes (on a 64-bit architecture).

===============================================================

ns3::GrantManagementSubheader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::GridBuildingAllocator

Introspection did not find any typical Config paths.

Attributes

    * GridWidth: The number of objects laid out on a line.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * MinX: The x coordinate where the grid starts.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MinY: The y coordinate where the grid starts.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * LengthX:  the length of the wall of each building along the X axis.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * LengthY:  the length of the wall of each building along the X axis.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * DeltaX: The x space between buildings.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * DeltaY: The y space between buildings.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Height: The height of the building (roof level)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * LayoutType: The type of layout.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: RowFirst
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::GridPositionAllocator

Config Paths

ns3::GridPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::GridPositionAllocator"


Attributes

    * GridWidth: The number of objects laid out on a line.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * MinX: The x coordinate where the grid starts.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MinY: The y coordinate where the grid starts.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * DeltaX: The x space between objects.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * DeltaY: The y space between objects.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * LayoutType: The type of layout.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: RowFirst
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::GtpuHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::HalfDuplexIdealPhy

Introspection did not find any typical Config paths.

Attributes

    * Rate: The PHY rate used by this device
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 1000000bps
        * Flags: construct write read 
   

TraceSources

    * TxStart: Trace fired when a new transmission is started
%Callback signature: ns3::Packet::TracedCallback

    * TxEnd: Trace fired when a previously started transmission is finished
%Callback signature: ns3::Packet::TracedCallback

    * RxStart: Trace fired when the start of a signal is detected
%Callback signature: ns3::Packet::TracedCallback

    * RxAbort: Trace fired when a previously started RX is aborted before time
%Callback signature: ns3::Packet::TracedCallback

    * RxEndOk: Trace fired when a previously started RX terminates successfully
%Callback signature: ns3::Packet::TracedCallback

    * RxEndError: Trace fired when a previously started RX terminates with an error (packet is corrupted)
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 336 bytes (on a 64-bit architecture).

===============================================================

ns3::Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 8 bytes (on a 64-bit architecture).

===============================================================

ns3::HeapScheduler

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::HierarchicalMobilityModel

Config Paths

ns3::HierarchicalMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::HierarchicalMobilityModel"


Attributes

    * Child: The child mobility model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::MobilityModel>
        * Initial value: 0
        * Flags: construct write read 
   
    * Parent: The parent mobility model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::MobilityModel>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::HigherLayerTxVectorTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::HybridBuildingsPropagationLossModel

Config Paths

ns3::HybridBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::HybridBuildingsPropagationLossModel"


Attributes

    * Frequency: The Frequency  (default is 2.106 GHz).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.16e+09
        * Flags: construct write 
   
    * Los2NlosThr:  Threshold from LoS to NLoS in ITU 1411 [m].
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 200
        * Flags: construct write read 
   
    * Environment: Environment Scenario
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Urban
        * Flags: construct write 
   
    * CitySize: Dimension of the city
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Large
        * Flags: construct write 
   
    * RooftopLevel: The height of the rooftop level in meters
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:90
        * Initial value: 20
        * Flags: construct write 
   

Attributes defined in parent class ns3::BuildingsPropagationLossModel

    * ShadowSigmaOutdoor: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 7
        * Flags: construct write read 
   
    * ShadowSigmaIndoor: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 8
        * Flags: construct write read 
   
    * ShadowSigmaExtWalls: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   
    * InternalWallLoss: Additional loss for each internal wall [dB]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv4DestinationUnreachable

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv4Echo

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv4Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv4L4Protocol

Config Paths

ns3::Icmpv4L4Protocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Icmpv4L4Protocol"

    * "/NodeList/[i]/$ns3::Icmpv4L4Protocol"


No Attributes are defined for this type.

Attributes defined in parent class ns3::IpL4Protocol

    * ProtocolNumber: The IP protocol number.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv4TimeExceeded

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6DestinationUnreachable

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6Echo

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6L4Protocol

Config Paths

ns3::Icmpv6L4Protocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol"


Attributes

    * DAD: Always do DAD check.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * SolicitationJitter: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=10.0]
        * Flags: construct write read 
   
    * MaxMulticastSolicit: Neighbor Discovery node constants: max multicast solicitations.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 3
        * Flags: construct write read 
   
    * MaxUnicastSolicit: Neighbor Discovery node constants: max unicast solicitations.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 3
        * Flags: construct write read 
   
    * ReachableTime: Neighbor Discovery node constants: reachable time.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * RetransmissionTime: Neighbor Discovery node constants: retransmission timer.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * DelayFirstProbe: Neighbor Discovery node constants: delay for the first probe.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::IpL4Protocol

    * ProtocolNumber: The IP protocol number.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6NA

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6NS

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6OptionHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6OptionLinkLayerAddress

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6OptionMtu

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6OptionPrefixInformation

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6OptionRedirected

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6ParameterError

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6RA

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6Redirection

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6RS

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6TimeExceeded

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::Icmpv6TooBig

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::IdealWifiManager

Config Paths

ns3::IdealWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::IdealWifiManager"


Attributes

    * BerThreshold: The maximum Bit Error Rate acceptable at any transmission mode
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1e-05
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::InetTopologyReader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::InfrastructureWifiMac

Config Paths

ns3::InfrastructureWifiMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac"


Attributes

    * PcfSupported: This Boolean attribute is set to enable PCF support at this STA
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RegularWifiMac

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write 
   
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Txop: The Txop object.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Txop>
        * Flags: read 
   
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   

Attributes defined in parent class ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::RegularWifiMac

    * TxOkHeader: The header of successfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback

    * TxErrHeader: The header of unsuccessfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback


TraceSources defined in parent class ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 360 bytes (on a 64-bit architecture).

===============================================================

ns3::IpcsClassifier

Config Paths

ns3::IpcsClassifier is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/BsIpcsPacketClassifier"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/Classifier"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/BsIpcsPacketClassifier"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/Classifier"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::IpL4Protocol

Introspection did not find any typical Config paths.

Attributes

    * ProtocolNumber: The IP protocol number.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4

Introspection did not find any typical Config paths.

Attributes

    * IpForward: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * WeakEsModel: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4GlobalRouting

Introspection did not find any typical Config paths.

Attributes

    * RandomEcmpRouting: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * RespondToInterfaceEvents: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4Interface

Config Paths

ns3::Ipv4Interface is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Ipv4L3Protocol/InterfaceList/[i]"


Attributes

    * ArpCache: The arp cache for this ipv4 interface
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ArpCache>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4L3Protocol

Config Paths

ns3::Ipv4L3Protocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Ipv4L3Protocol"


Attributes

    * DefaultTtl: The TTL value set by default on all outgoing packets generated on this node.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 64
        * Flags: construct write read 
   
    * FragmentExpirationTimeout: When this timeout expires, the fragments will be cleared from the buffer.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * InterfaceList: The set of Ipv4 interfaces associated to this Ipv4 stack.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Ipv4Interface>
        * Flags: read 
   

Attributes defined in parent class ns3::Ipv4

    * IpForward: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * WeakEsModel: RFC1122 term for whether host accepts datagram with a dest. address on another interface
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Tx: Send ipv4 packet to outgoing interface.
%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback

    * Rx: Receive ipv4 packet from incoming interface.
%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback

    * Drop: Drop ipv4 packet
%Callback signature: ns3::Ipv4L3Protocol::DropTracedCallback

    * SendOutgoing: A newly-generated packet by this node is about to be queued for transmission
%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback

    * UnicastForward: A unicast IPv4 packet was received by this node and is being forwarded to another node
%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback

    * LocalDeliver: An IPv4 packet was received by/for this node, and it is being forward up the stack
%Callback signature: ns3::Ipv4L3Protocol::SentTracedCallback


Size of this type is 544 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4ListRouting

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4NixVectorRouting

Config Paths

ns3::Ipv4NixVectorRouting is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Ipv4NixVectorRouting"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4PacketFilter

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4PacketProbe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The packet plus its IPv4 object and interface that serve as the output for this probe
%Callback signature: ns3::Ipv4L3Protocol::TxRxTracedCallback

    * OutputBytes: The number of bytes in the packet
%Callback signature: ns3::Packet::SizeTracedCallback


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4RawSocketFactory

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4RawSocketImpl

Introspection did not find any typical Config paths.

Attributes

    * Protocol: Protocol number to match.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * IcmpFilter: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * IpHeaderInclude: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 208 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4RoutingProtocol

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv4StaticRouting

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6

Introspection did not find any typical Config paths.

Attributes

    * IpForward: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * MtuDiscover: If disabled, every interface will have its MTU set to 1280 bytes.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6Extension

Introspection did not find any typical Config paths.

Attributes

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionAH

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionAHHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionDemux

Introspection did not find any typical Config paths.

Attributes

    * Extensions: The set of IPv6 extensions registered with this demux.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Ipv6Extension>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionDestination

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionDestinationHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionESP

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionESPHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionFragment

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionFragmentHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionHopByHop

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionHopByHopHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionLooseRouting

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionLooseRoutingHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionRouting

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionRoutingDemux

Introspection did not find any typical Config paths.

Attributes

    * RoutingExtensions: The set of IPv6 Routing extensions registered with this demux.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Ipv6ExtensionRouting>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ExtensionRoutingHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6Interface

Config Paths

ns3::Ipv6Interface is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Ipv6L3Protocol/InterfaceList/[i]"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6L3Protocol

Config Paths

ns3::Ipv6L3Protocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::Ipv6L3Protocol"


Attributes

    * DefaultTtl: The TTL value set by default on all outgoing packets generated on this node.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 64
        * Flags: construct write read 
   
    * DefaultTclass: The TCLASS value set by default on all outgoing packets generated on this node.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * InterfaceList: The set of IPv6 interfaces associated to this IPv6 stack.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Ipv6Interface>
        * Flags: read 
   
    * SendIcmpv6Redirect: Send the ICMPv6 Redirect when appropriate.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * StrongEndSystemModel: Reject packets for an address not configured on the interface they're coming from (RFC1222).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Ipv6

    * IpForward: Globally enable or disable IP forwarding for all current and future IPv6 devices.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * MtuDiscover: If disabled, every interface will have its MTU set to 1280 bytes.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Tx: Send IPv6 packet to outgoing interface.
%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback

    * Rx: Receive IPv6 packet from incoming interface.
%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback

    * Drop: Drop IPv6 packet
%Callback signature: ns3::Ipv6L3Protocol::DropTracedCallback

    * SendOutgoing: A newly-generated packet by this node is about to be queued for transmission
%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback

    * UnicastForward: A unicast IPv6 packet was received by this node and is being forwarded to another node
%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback

    * LocalDeliver: An IPv6 packet was received by/for this node, and it is being forward up the stack
%Callback signature: ns3::Ipv6L3Protocol::SentTracedCallback


Size of this type is 424 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6ListRouting

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6Option

Introspection did not find any typical Config paths.

Attributes

    * OptionNumber: The IPv6 option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionDemux

Introspection did not find any typical Config paths.

Attributes

    * Options: The set of IPv6 options registered with this demux.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Ipv6Option>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionJumbogram

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Option

    * OptionNumber: The IPv6 option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionJumbogramHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionPad1

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Option

    * OptionNumber: The IPv6 option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionPad1Header

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionPadn

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Option

    * OptionNumber: The IPv6 option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionPadnHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionRouterAlert

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Ipv6Option

    * OptionNumber: The IPv6 option number.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6OptionRouterAlertHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6PacketFilter

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6PacketProbe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The packet plus its IPv6 object and interface that serve as the output for this probe
%Callback signature: ns3::Ipv6L3Protocol::TxRxTracedCallback

    * OutputBytes: The number of bytes in the packet
%Callback signature: ns3::Packet::SizeTracedCallback


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6PmtuCache

Introspection did not find any typical Config paths.

Attributes

    * CacheExpiryTime: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time +300000000000.0ns:+9223372036854775807.0ns
        * Initial value: +600000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6RawSocketFactory

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6RawSocketImpl

Introspection did not find any typical Config paths.

Attributes

    * Protocol: Protocol number to match.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 256 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6RoutingProtocol

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Ipv6StaticRouting

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::IsotropicAntennaModel

Introspection did not find any typical Config paths.

Attributes

    * Gain: The gain of the antenna in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::itp

Introspection did not find any typical Config paths.

Attributes

    * consumer: Consumer
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Object>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * CongestionWindow: The ITP connection's congestion window
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::ItpCache

Introspection did not find any typical Config paths.

Attributes

    * PayloadSize: The destination port of the outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1500
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::ItpHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::ItpSink

Config Paths

ns3::ItpSink is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::ItpSink"


Attributes

    * Port: Port on which we listen for incoming packets.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 9
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::ItpSource

Config Paths

ns3::ItpSource is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::ItpSource"


Attributes

    * MaxPackets: The maximum number of packets the application will send
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   
    * Interval: The time to wait between packets
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RemoteAddress: The destination Address of the outbound packets
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * RemotePort: The destination port of the outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * PacketSize: Size of echo data in outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 208 bytes (on a 64-bit architecture).

===============================================================

ns3::ItuR1238PropagationLossModel

Config Paths

ns3::ItuR1238PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1238PropagationLossModel"


Attributes

    * Frequency: The Frequency  (default is 2.106 GHz).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.16e+09
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::ItuR1411LosPropagationLossModel

Config Paths

ns3::ItuR1411LosPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411LosPropagationLossModel"


Attributes

    * Frequency: The propagation frequency in Hz
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.16e+09
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::ItuR1411NlosOverRooftopPropagationLossModel

Config Paths

ns3::ItuR1411NlosOverRooftopPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ItuR1411NlosOverRooftopPropagationLossModel"


Attributes

    * Frequency: The Frequency  (default is 2.106 GHz).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.16e+09
        * Flags: construct write 
   
    * Environment: Environment Scenario
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Urban
        * Flags: construct write read 
   
    * CitySize: Dimension of the city
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Large
        * Flags: construct write read 
   
    * RooftopLevel: The height of the rooftop level in meters
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:90
        * Initial value: 20
        * Flags: construct write read 
   
    * StreetsOrientation: The orientation of streets in degrees [0,90] with respect to the direction of propagation
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:90
        * Initial value: 45
        * Flags: construct write read 
   
    * StreetsWidth: The width of streets
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1000
        * Initial value: 20
        * Flags: construct write read 
   
    * BuildingsExtend: The distance over which the buildings extend
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 80
        * Flags: construct write read 
   
    * BuildingSeparation: The separation between buildings
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 50
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::JakesProcess

Introspection did not find any typical Config paths.

Attributes

    * DopplerFrequencyHz: Corresponding doppler frequency[Hz]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:10000
        * Initial value: 80
        * Flags: construct write 
   
    * NumberOfOscillators: The number of oscillators
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 4:1000
        * Initial value: 20
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::JakesPropagationLossModel

Config Paths

ns3::JakesPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::JakesPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::JakesPropagationLossModel"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::Kun2600MhzPropagationLossModel

Config Paths

ns3::Kun2600MhzPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::Kun2600MhzPropagationLossModel"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::LiIonEnergySource

Introspection did not find any typical Config paths.

Attributes

    * LiIonEnergySourceInitialEnergyJ: Initial energy stored in basic energy source.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 31752
        * Flags: construct write read 
   
    * LiIonEnergyLowBatteryThreshold: Low battery threshold for LiIon energy source.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.1
        * Flags: construct write read 
   
    * InitialCellVoltage: Initial (maximum) voltage of the cell (fully charged).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 4.05
        * Flags: construct write read 
   
    * NominalCellVoltage: Nominal voltage of the cell.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3.6
        * Flags: construct write read 
   
    * ExpCellVoltage: Cell voltage at the end of the exponential zone.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3.6
        * Flags: construct write read 
   
    * RatedCapacity: Rated capacity of the cell.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.45
        * Flags: construct write read 
   
    * NomCapacity: Cell capacity at the end of the nominal zone.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.1
        * Flags: construct write read 
   
    * ExpCapacity: Cell Capacity at the end of the exponential zone.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.2
        * Flags: construct write read 
   
    * InternalResistance: Internal resistance of the cell
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.083
        * Flags: construct write read 
   
    * TypCurrent: Typical discharge current used to fit the curves
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.33
        * Flags: construct write read 
   
    * ThresholdVoltage: Minimum threshold voltage to consider the battery depleted.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3.3
        * Flags: construct write read 
   
    * PeriodicEnergyUpdateInterval: Time between two consecutive periodic energy updates.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

TraceSources

    * RemainingEnergy: Remaining energy at BasicEnergySource.
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 256 bytes (on a 64-bit architecture).

===============================================================

ns3::LinearWifiTxCurrentModel

Introspection did not find any typical Config paths.

Attributes

    * Eta: The efficiency of the power amplifier.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.1
        * Flags: construct write read 
   
    * Voltage: The supply voltage (in Volts).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3
        * Flags: construct write read 
   
    * IdleCurrent: The current in the IDLE state (in Watts).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.273333
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::ListErrorModel

Config Paths

ns3::ListErrorModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ListErrorModel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::ErrorModel

    * IsEnabled: Whether this ErrorModel is enabled or not.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::ListPositionAllocator

Config Paths

ns3::ListPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::ListPositionAllocator"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::ListScheduler

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::LlcSnapHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::LogDistancePropagationLossModel

Config Paths

ns3::LogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::LogDistancePropagationLossModel"


Attributes

    * Exponent: The exponent of the Path Loss propagation model
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3
        * Flags: construct write read 
   
    * ReferenceDistance: The distance at which the reference loss is calculated (m)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * ReferenceLoss: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 46.6777
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::LogNormalRandomVariable

Config Paths

ns3::LogNormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::LogNormalRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::LogNormalRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::LogNormalRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::LogNormalRandomVariable"


Attributes

    * Mu: The mu value for the log-normal distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Sigma: The sigma value for the log-normal distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::LoopbackNetDevice

Config Paths

ns3::LoopbackNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LoopbackNetDevice"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanCsmaCa

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanErrorModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 168 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanLqiTag

Introspection did not find any typical Config paths.

Attributes

    * Lqi: The lqi of the last packet received
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanMac

Config Paths

ns3::LrWpanMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Mac"


Attributes

    * PanId: 16-bit identifier of the associated PAN
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * MacTxEnqueue: Trace source indicating a packet has been enqueued in the transaction queue
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDequeue: Trace source indicating a packet has was dequeued from the transaction queue
%Callback signature: ns3::Packet::TracedCallback

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
%Callback signature: ns3::Packet::TracedCallback

    * MacTxOk: Trace source indicating a packet has been successfully sent
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: Trace source indicating a packet has been dropped during transmission
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: Trace source indicating a packet was received, but dropped before being forwarded up the stack
%Callback signature: ns3::Packet::TracedCallback

    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback

    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback

    * MacStateValue: The state of LrWpan Mac
%Callback signature: ns3::TracedValueCallback::LrWpanMacState

    * MacState: The state of LrWpan Mac
%Callback signature: ns3::LrWpanMac::StateTracedCallback

    * MacSentPkt: Trace source reporting some information about the sent packet
%Callback signature: ns3::LrWpanMac::SentTracedCallback


Size of this type is 512 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanMacHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanMacTrailer

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanNetDevice

Config Paths

ns3::LrWpanNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice"


Attributes

    * Channel: The channel attached to this device
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::SpectrumChannel>
        * Flags: read 
   
    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LrWpanPhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * Mac: The MAC layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LrWpanMac>
        * Initial value: 0
        * Flags: construct write read 
   
    * UseAcks: Request acknowledgments for data frames.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::LrWpanPhy

Config Paths

ns3::LrWpanPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Phy"


No Attributes are defined for this type.

TraceSources

    * TrxStateValue: The state of the transceiver
%Callback signature: ns3::TracedValueCallback::LrWpanPhyEnumeration

    * TrxState: The state of the transceiver
%Callback signature: ns3::LrWpanPhy::StateTracedCallback

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
%Callback signature: ns3::Packet::SinrTracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 648 bytes (on a 64-bit architecture).

===============================================================

ns3::LteAmc

Introspection did not find any typical Config paths.

Attributes

    * Ber: The requested BER in assigning MCS (default is 0.00005).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5e-05
        * Flags: construct write read 
   
    * AmcModel: AMC model used to assign CQI
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Vienna
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::LteAnr

Config Paths

ns3::LteAnr is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteAnr"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteAnr"


Attributes

    * Threshold: Minimum RSRQ range value required for detecting a neighbour cell
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:34
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::LteDataRadioBearerInfo

Config Paths

ns3::LteDataRadioBearerInfo is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]"


Attributes

    * DrbIdentity: The id of this Data Radio Bearer
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   
    * EpsBearerIdentity: The id of the EPS bearer corresponding to this Data Radio Bearer
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   
    * logicalChannelIdentity: The id of the Logical Channel corresponding to this Data Radio Bearer
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   
    * LteRlc: RLC instance of the radio bearer.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteRlc>
        * Initial value: 0
        * Flags: construct write read 
   
    * LtePdcp: PDCP instance of the radio bearer.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LtePdcp>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 18446744073709551615 bytes (on a 64-bit architecture).

===============================================================

ns3::LteEnbComponentCarrierManager

Config Paths

ns3::LteEnbComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 368 bytes (on a 64-bit architecture).

===============================================================

ns3::LteEnbMac

Config Paths

ns3::LteEnbMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbMac"


Attributes

    * NumberOfRaPreambles: how many random access preambles are available for the contention based RACH process
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 4:64
        * Initial value: 52
        * Flags: construct write read 
   
    * PreambleTransMax: Maximum number of random access preamble transmissions
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 3:200
        * Initial value: 50
        * Flags: construct write read 
   
    * RaResponseWindowSize: length of the window (in TTIs) for the reception of the random access response (RAR); the resulting RAR timeout is this value + 3 ms
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 2:10
        * Initial value: 3
        * Flags: construct write read 
   
    * ComponentCarrierId: ComponentCarrier Id, needed to reply on the appropriate sap.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:4
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * DlScheduling: Information regarding DL scheduling.
%Callback signature: ns3::LteEnbMac::DlSchedulingTracedCallback

    * UlScheduling: Information regarding UL scheduling.
%Callback signature: ns3::LteEnbMac::UlSchedulingTracedCallback


Size of this type is 552 bytes (on a 64-bit architecture).

===============================================================

ns3::LteEnbNetDevice

Config Paths

ns3::LteEnbNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice"


Attributes

    * LteEnbRrc: The RRC associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteEnbRrc>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteHandoverAlgorithm: The handover algorithm associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteHandoverAlgorithm>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteAnr: The automatic neighbour relation function associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteAnr>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteFfrAlgorithm: The FFR algorithm associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteFfrAlgorithm>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteEnbComponentCarrierManager: The RRC associated to this EnbNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteEnbComponentCarrierManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * ComponentCarrierMap: List of component carriers.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::ComponentCarrierEnb>
        * Flags: read 
   
    * UlBandwidth: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlBandwidth: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * CellId: Cell Identifier
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:262143
        * Initial value: 100
        * Flags: construct write read 
   
    * UlEarfcn: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:262143
        * Initial value: 18100
        * Flags: construct write read 
   
    * CsgId: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * CsgIndication: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 30000
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::LteEnbPhy

Config Paths

ns3::LteEnbPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy"


Attributes

    * TxPower: Transmission power in dBm
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 30
        * Flags: construct write read 
   
    * NoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.  According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an ideal receiver with the same overall gain and bandwidth when the receivers are connected to sources at the standard noise temperature T0."  In this model, we consider T0 = 290K.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   
    * MacToChannelDelay: The delay in TTI units that occurs between a scheduling decision in the MAC and the actual start of the transmission by the PHY. This is intended to be used to model the latency of real PHY and MAC implementations.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 2
        * Flags: construct write read 
   
    * UeSinrSamplePeriod: The sampling period for reporting UEs' SINR stats.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1
        * Flags: construct write read 
   
    * InterferenceSamplePeriod: The sampling period for reporting interference stats
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1
        * Flags: construct write read 
   
    * DlSpectrumPhy: The downlink LteSpectrumPhy associated to this LtePhy
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSpectrumPhy>
        * Flags: read 
   
    * UlSpectrumPhy: The uplink LteSpectrumPhy associated to this LtePhy
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSpectrumPhy>
        * Flags: read 
   

TraceSources

    * ReportUeSinr: Report UEs' averaged linear SINR
%Callback signature: ns3::LteEnbPhy::ReportUeSinrTracedCallback

    * ReportInterference: Report linear interference power per PHY RB
%Callback signature: ns3::LteEnbPhy::ReportInterferenceTracedCallback

    * DlPhyTransmission: DL transmission PHY layer statistics.
%Callback signature: ns3::PhyTransmissionStatParameters::TracedCallback


Size of this type is 640 bytes (on a 64-bit architecture).

===============================================================

ns3::LteEnbRrc

Config Paths

ns3::LteEnbRrc is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc"


Attributes

    * UeMap: List of UeManager by C-RNTI.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::UeManager>
        * Flags: read 
   
    * DefaultTransmissionMode: The default UEs' transmission mode (0: SISO)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EpsBearerToRlcMapping: Specify which type of RLC will be used for each type of EPS bearer. 
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: RlcSmAlways
        * Flags: construct write read 
   
    * SystemInformationPeriodicity: The interval for sending system information (Time value)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +80000000.0ns
        * Flags: construct write read 
   
    * SrsPeriodicity: The SRS periodicity in milliseconds
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 40
        * Flags: construct write read 
   
    * ConnectionRequestTimeoutDuration: After a RA attempt, if no RRC CONNECTION REQUEST is received before this time, the UE context is destroyed. Must account for reception of RAR and transmission of RRC CONNECTION REQUEST over UL GRANT.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +15000000.0ns
        * Flags: construct write read 
   
    * ConnectionSetupTimeoutDuration: After accepting connection request, if no RRC CONNECTION SETUP COMPLETE is received before this time, the UE context is destroyed. Must account for the UE's reception of RRC CONNECTION SETUP and transmission of RRC CONNECTION SETUP COMPLETE.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +150000000.0ns
        * Flags: construct write read 
   
    * ConnectionRejectedTimeoutDuration: Time to wait between sending a RRC CONNECTION REJECT and destroying the UE context
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000.0ns
        * Flags: construct write read 
   
    * HandoverJoiningTimeoutDuration: After accepting a handover request, if no RRC CONNECTION RECONFIGURATION COMPLETE is received before this time, the UE context is destroyed. Must account for reception of X2 HO REQ ACK by source eNB, transmission of the Handover Command, non-contention-based random access and reception of the RRC CONNECTION RECONFIGURATION COMPLETE message.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   
    * HandoverLeavingTimeoutDuration: After issuing a Handover Command, if neither RRC CONNECTION RE-ESTABLISHMENT nor X2 UE Context Release has been previously received, the UE context is destroyed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * QRxLevMin: One of information transmitted within the SIB1 message, indicating the required minimum RSRP level that any UE must receive from this cell before it is allowed to camp to this cell. The default value -70 corresponds to -140 dBm and is the lowest possible value as defined by Section 6.3.4 of 3GPP TS 36.133. This restriction, however, only applies to initial cell selection and EPC-enabled simulation.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int8_t -70:-22
        * Initial value: -70
        * Flags: construct read 
   
    * NumberOfComponentCarriers: Number of Component Carriers 
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int16_t 1:5
        * Initial value: 1
        * Flags: construct write read 
   
    * AdmitHandoverRequest: Whether to admit an X2 handover request from another eNB
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * AdmitRrcConnectionRequest: Whether to admit a connection request from a UE
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RsrpFilterCoefficient: Determines the strength of smoothing effect induced by layer 3 filtering of RSRP in all attached UE; if set to 0, no layer 3 filtering is applicable
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 4
        * Flags: construct write read 
   
    * RsrqFilterCoefficient: Determines the strength of smoothing effect induced by layer 3 filtering of RSRQ in all attached UE; if set to 0, no layer 3 filtering is applicable
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 4
        * Flags: construct write read 
   

TraceSources

    * NewUeContext: Fired upon creation of a new UE context.
%Callback signature: ns3::LteEnbRrc::NewUeContextTracedCallback

    * ConnectionEstablished: Fired upon successful RRC connection establishment.
%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback

    * ConnectionReconfiguration: trace fired upon RRC connection reconfiguration
%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback

    * HandoverStart: trace fired upon start of a handover procedure
%Callback signature: ns3::LteEnbRrc::HandoverStartTracedCallback

    * HandoverEndOk: trace fired upon successful termination of a handover procedure
%Callback signature: ns3::LteEnbRrc::ConnectionHandoverTracedCallback

    * RecvMeasurementReport: trace fired when measurement report is received
%Callback signature: ns3::LteEnbRrc::ReceiveReportTracedCallback


Size of this type is 1024 bytes (on a 64-bit architecture).

===============================================================

ns3::LteEnbRrcProtocolIdeal

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::LteEnbRrcProtocolReal

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFfrAlgorithm

Config Paths

ns3::LteFfrAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm"


Attributes

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFfrDistributedAlgorithm

Config Paths

ns3::LteFfrDistributedAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrDistributedAlgorithm"


Attributes

    * CalculationInterval: Time interval between calculation of Edge sub-band, Default value 1 second
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 20
        * Flags: construct write read 
   
    * RsrpDifferenceThreshold: If the difference between the power of the signal received by UE from the serving cell and the power of the signal received from the adjacent cell is less than a RsrpDifferenceThreshold value, the cell weight is incremented
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 20
        * Flags: construct write read 
   
    * CenterPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * EdgePowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * EdgeRbNum: Number of RB that can be used in edge Sub-band
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 8
        * Flags: construct write read 
   
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 512 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFfrEnhancedAlgorithm

Config Paths

ns3::LteFfrEnhancedAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrEnhancedAlgorithm"


Attributes

    * UlSubBandOffset: Uplink SubBand Offset for this cell in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * UlReuse3SubBandwidth: Uplink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 4
        * Flags: construct write read 
   
    * UlReuse1SubBandwidth: Uplink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 4
        * Flags: construct write read 
   
    * DlSubBandOffset: Downlink SubBand Offset for this cell in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * DlReuse3SubBandwidth: Downlink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 4
        * Flags: construct write read 
   
    * DlReuse1SubBandwidth: Downlink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 4
        * Flags: construct write read 
   
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 26
        * Flags: construct write read 
   
    * CenterAreaPowerOffset: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * EdgeAreaPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * DlCqiThreshold: If the DL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 15
        * Flags: construct write read 
   
    * UlCqiThreshold: If the UL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 15
        * Flags: construct write read 
   
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 744 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFfrSoftAlgorithm

Config Paths

ns3::LteFfrSoftAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFfrSoftAlgorithm"


Attributes

    * UlCommonSubBandwidth: Uplink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 6
        * Flags: construct write read 
   
    * UlEdgeSubBandOffset: Uplink Edge SubBand Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * UlEdgeSubBandwidth: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 6
        * Flags: construct write read 
   
    * DlCommonSubBandwidth: Downlink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 6
        * Flags: construct write read 
   
    * DlEdgeSubBandOffset: Downlink Edge SubBand Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * DlEdgeSubBandwidth: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * CenterRsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Medium sub-band
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 30
        * Flags: construct write read 
   
    * EdgeRsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 20
        * Flags: construct write read 
   
    * CenterAreaPowerOffset: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * MediumAreaPowerOffset: PdschConfigDedicated::Pa value for Medium Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * EdgeAreaPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * MediumAreaTpc: TPC value which will be set in DL-DCI for UEs in medium areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 464 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFrHardAlgorithm

Config Paths

ns3::LteFrHardAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrHardAlgorithm"


Attributes

    * UlSubBandOffset: Uplink Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * UlSubBandwidth: Uplink Transmission SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlSubBandOffset: Downlink Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * DlSubBandwidth: Downlink Transmission SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFrNoOpAlgorithm

Config Paths

ns3::LteFrNoOpAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrNoOpAlgorithm"


No Attributes are defined for this type.

Attributes defined in parent class ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFrSoftAlgorithm

Config Paths

ns3::LteFrSoftAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrSoftAlgorithm"


Attributes

    * UlEdgeSubBandOffset: Uplink Edge SubBand Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * UlEdgeSubBandwidth: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * DlEdgeSubBandOffset: Downlink Edge SubBand Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * DlEdgeSubBandwidth: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * AllowCenterUeUseEdgeSubBand: If true center UEs can receive on Edge SubBand RBGs
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 20
        * Flags: construct write read 
   
    * CenterPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * EdgePowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::LteFrStrictAlgorithm

Config Paths

ns3::LteFrStrictAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteFfrAlgorithm/$ns3::LteFrStrictAlgorithm"


Attributes

    * UlCommonSubBandwidth: Uplink Common SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * UlEdgeSubBandOffset: Uplink Edge SubBand Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * UlEdgeSubBandwidth: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * DlCommonSubBandwidth: Downlink Common SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 25
        * Flags: construct write read 
   
    * DlEdgeSubBandOffset: Downlink Edge SubBand Offset in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * DlEdgeSubBandwidth: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 20
        * Flags: construct write read 
   
    * CenterPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * EdgePowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 5
        * Flags: construct write read 
   
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::LteHandoverAlgorithm

Config Paths

ns3::LteHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::LteHelper

Introspection did not find any typical Config paths.

Attributes

    * Scheduler: The type of scheduler to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::FfMacScheduler.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: ns3::PfFfMacScheduler
        * Flags: construct write read 
   
    * FfrAlgorithm: The type of FFR algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteFfrAlgorithm.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: ns3::LteFrNoOpAlgorithm
        * Flags: construct write read 
   
    * HandoverAlgorithm: The type of handover algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteHandoverAlgorithm.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: ns3::NoOpHandoverAlgorithm
        * Flags: construct write read 
   
    * PathlossModel: The type of pathloss model to be used. The allowed values for this attributes are the type names of any class inheriting from ns3::PropagationLossModel.
  
        * Set with class:  TypeIdValue
        * Underlying type:  TypeId
        * Initial value: ns3::FriisPropagationLossModel
        * Flags: construct write 
   
    * FadingModel: The type of fading model to be used.The allowed values for this attributes are the type names of any class inheriting from ns3::SpectrumPropagationLossModel.If the type is set to an empty string, no fading model is used.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 
        * Flags: construct write 
   
    * UseIdealRrc: If true, LteRrcProtocolIdeal will be used for RRC signaling. If false, LteRrcProtocolReal will be used.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * AnrEnabled: Activate or deactivate Automatic Neighbour Relation function
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UsePdschForCqiGeneration: If true, DL-CQI will be calculated from PDCCH as signal and PDSCH as interference If false, DL-CQI will be calculated from PDCCH as signal and PDCCH as interference  
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * EnbComponentCarrierManager: The type of Component Carrier Manager to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting ns3::LteEnbComponentCarrierManager.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: ns3::NoOpComponentCarrierManager
        * Flags: construct write read 
   
    * UeComponentCarrierManager: The type of Component Carrier Manager to be used for UEs. The allowed values for this attributes are the type names of any class inheriting ns3::LteUeComponentCarrierManager.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: ns3::SimpleUeComponentCarrierManager
        * Flags: construct write read 
   
    * UseCa: If true, Carrier Aggregation feature is enabled and a valid Component Carrier Map is expected.If false, single carrier simulation.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * NumberOfComponentCarriers: Set the number of Component carrier to use If it is more than one and m_useCa is false, it will raise an error 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:5
        * Initial value: 1
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 672 bytes (on a 64-bit architecture).

===============================================================

ns3::LteHexGridEnbTopologyHelper

Introspection did not find any typical Config paths.

Attributes

    * InterSiteDistance: The distance [m] between nearby sites
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 500
        * Flags: construct write read 
   
    * SectorOffset: The offset [m] in the position for the node of each sector with respect to the center of the three-sector site
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.5
        * Flags: construct write read 
   
    * SiteHeight: The height [m] of each site
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 30
        * Flags: construct write read 
   
    * MinX: The x coordinate where the hex grid starts.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * MinY: The y coordinate where the hex grid starts.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * GridWidth: The number of sites in even rows (odd rows will have one additional site).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::LteNetDevice

Config Paths

ns3::LteNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 30000
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::LtePdcp

Config Paths

ns3::LtePdcp is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LtePdcp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LtePdcp"


No Attributes are defined for this type.

TraceSources

    * TxPDU: PDU transmission notified to the RLC.
%Callback signature: ns3::LtePdcp::PduTxTracedCallback

    * RxPDU: PDU received.
%Callback signature: ns3::LtePdcp::PduRxTracedCallback


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::LtePdcpHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::LtePhy

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::LtePhyTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRadioBearerInfo

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRadioBearerTag

Introspection did not find any typical Config paths.

Attributes

    * rnti: The rnti that indicates the UE to which packet belongs
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Flags: read 
   
    * lcid: The id within the UE identifying the logical channel to which the packet belongs
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlc

Config Paths

ns3::LteRlc is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc"


No Attributes are defined for this type.

TraceSources

    * TxPDU: PDU transmission notified to the MAC.
%Callback signature: ns3::LteRlc::NotifyTxTracedCallback

    * RxPDU: PDU received.
%Callback signature: ns3::LteRlc::ReceiveTracedCallback


Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlcAm

Config Paths

ns3::LteRlcAm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcAm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcAm"


Attributes

    * PollRetransmitTimer: Value of the t-PollRetransmit timer (See section 7.3 of 3GPP TS 36.322)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +20000000.0ns
        * Flags: construct write read 
   
    * ReorderingTimer: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000.0ns
        * Flags: construct write read 
   
    * StatusProhibitTimer: Value of the t-StatusProhibit timer (See section 7.3 of 3GPP TS 36.322)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000.0ns
        * Flags: construct write read 
   
    * ReportBufferStatusTimer: How much to wait to issue a new Report Buffer Status since the last time a new SDU was received
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +20000000.0ns
        * Flags: construct write read 
   
    * TxOpportunityForRetxAlwaysBigEnough: If true, always pretend that the size of a TxOpportunity is big enough for retransmission. If false (default and realistic behavior), no retx is performed unless the corresponding TxOpportunity is big enough.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::LteRlc

    * TxPDU: PDU transmission notified to the MAC.
%Callback signature: ns3::LteRlc::NotifyTxTracedCallback

    * RxPDU: PDU received.
%Callback signature: ns3::LteRlc::ReceiveTracedCallback


Size of this type is 480 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlcAmHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlcHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlcSduStatusTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlcSm

Config Paths

ns3::LteRlcSm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcSm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcSm"


No Attributes are defined for this type.

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::LteRlc

    * TxPDU: PDU transmission notified to the MAC.
%Callback signature: ns3::LteRlc::NotifyTxTracedCallback

    * RxPDU: PDU received.
%Callback signature: ns3::LteRlc::ReceiveTracedCallback


Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlcTm

Config Paths

ns3::LteRlcTm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcTm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcTm"


Attributes

    * MaxTxBufferSize: Maximum Size of the Transmission Buffer (in Bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2097152
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::LteRlc

    * TxPDU: PDU transmission notified to the MAC.
%Callback signature: ns3::LteRlc::NotifyTxTracedCallback

    * RxPDU: PDU received.
%Callback signature: ns3::LteRlc::ReceiveTracedCallback


Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::LteRlcUm

Config Paths

ns3::LteRlcUm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/DataRadioBearerMap/[i]/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0/LteRlc/$ns3::LteRlcUm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1/LteRlc/$ns3::LteRlcUm"


Attributes

    * MaxTxBufferSize: Maximum Size of the Transmission Buffer (in Bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10240
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::LteRlc

    * TxPDU: PDU transmission notified to the MAC.
%Callback signature: ns3::LteRlc::NotifyTxTracedCallback

    * RxPDU: PDU received.
%Callback signature: ns3::LteRlc::ReceiveTracedCallback


Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::LteSignalingRadioBearerInfo

Config Paths

ns3::LteSignalingRadioBearerInfo is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb0"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc/Srb1"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb0"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]/Srb1"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb0"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc/Srb1"


Attributes

    * SrbIdentity: The id of this Signaling Radio Bearer
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Flags: read 
   
    * LteRlc: RLC instance of the radio bearer.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteRlc>
        * Initial value: 0
        * Flags: construct write read 
   
    * LtePdcp: PDCP instance of the radio bearer.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LtePdcp>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 18446744073709551615 bytes (on a 64-bit architecture).

===============================================================

ns3::LteSpectrumPhy

Config Paths

ns3::LteSpectrumPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/DlSpectrumPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/UlSpectrumPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/DlSpectrumPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/UlSpectrumPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/DlSpectrumPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/LteEnbPhy/UlSpectrumPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/DlSpectrumPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy/UlSpectrumPhy"


Attributes

    * DataErrorModelEnabled: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * CtrlErrorModelEnabled: Activate/Deactivate the error model of control (PCFICH-PDCCH decodification) [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * TxStart: Trace fired when a new transmission is started
%Callback signature: ns3::PacketBurst::TracedCallback

    * TxEnd: Trace fired when a previously started transmission is finished
%Callback signature: ns3::PacketBurst::TracedCallback

    * RxStart: Trace fired when the start of a signal is detected
%Callback signature: ns3::PacketBurst::TracedCallback

    * RxEndOk: Trace fired when a previously started RX terminates successfully
%Callback signature: ns3::Packet::TracedCallback

    * RxEndError: Trace fired when a previously started RX terminates with an error
%Callback signature: ns3::Packet::TracedCallback

    * DlPhyReception: DL reception PHY layer statistics.
%Callback signature: ns3::PhyReceptionStatParameters::TracedCallback

    * UlPhyReception: DL reception PHY layer statistics.
%Callback signature: ns3::PhyReceptionStatParameters::TracedCallback


Size of this type is 584 bytes (on a 64-bit architecture).

===============================================================

ns3::LteStatsCalculator

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUeComponentCarrierManager

Config Paths

ns3::LteUeComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUeMac

Config Paths

ns3::LteUeMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUeMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUeMac"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 304 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUeNetDevice

Config Paths

ns3::LteUeNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice"


Attributes

    * EpcUeNas: The NAS associated to this UeNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::EpcUeNas>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteUeRrc: The RRC associated to this UeNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteUeRrc>
        * Initial value: 0
        * Flags: construct write read 
   
    * LteUeComponentCarrierManager: The ComponentCarrierManager associated to this UeNetDevice
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteUeComponentCarrierManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * ComponentCarrierMapUe: List of all component Carrier.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::ComponentCarrierUe>
        * Flags: read 
   
    * Imsi: International Mobile Subscriber Identity assigned to this UE
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint64_t 0:18446744073709551615
        * Initial value: 0
        * Flags: construct write read 
   
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:262143
        * Initial value: 100
        * Flags: construct write read 
   
    * CsgId: The Closed Subscriber Group (CSG) identity that this UE is associated with, i.e., giving the UE access to cells which belong to this particular CSG. This restriction only applies to initial cell selection and EPC-enabled simulation. This does not revoke the UE's access to non-CSG cells. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::LteNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 30000
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUePhy

Config Paths

ns3::LteUePhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/ComponentCarrierMapUe/[i]/LteUePhy"


Attributes

    * TxPower: Transmission power in dBm
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * NoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 9
        * Flags: construct write read 
   
    * TxMode1Gain: Transmission mode 1 gain in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write 
   
    * TxMode2Gain: Transmission mode 2 gain in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 4.2
        * Flags: construct write 
   
    * TxMode3Gain: Transmission mode 3 gain in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -2.8
        * Flags: construct write 
   
    * TxMode4Gain: Transmission mode 4 gain in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write 
   
    * TxMode5Gain: Transmission mode 5 gain in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write 
   
    * TxMode6Gain: Transmission mode 6 gain in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write 
   
    * TxMode7Gain: Transmission mode 7 gain in dB
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write 
   
    * RsrpSinrSamplePeriod: The sampling period for reporting RSRP-SINR stats (default value 1)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1
        * Flags: construct write read 
   
    * DlSpectrumPhy: The downlink LteSpectrumPhy associated to this LtePhy
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSpectrumPhy>
        * Flags: read 
   
    * UlSpectrumPhy: The uplink LteSpectrumPhy associated to this LtePhy
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSpectrumPhy>
        * Flags: read 
   
    * RsrqUeMeasThreshold: Receive threshold for PSS on RSRQ [dB]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -1000
        * Flags: construct write read 
   
    * UeMeasurementsFilterPeriod: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   
    * EnableUplinkPowerControl: If true, Uplink Power Control will be enabled.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * ReportCurrentCellRsrpSinr: RSRP and SINR statistics.
%Callback signature: ns3::LteUePhy::RsrpSinrTracedCallback

    * UlPhyTransmission: DL transmission PHY layer statistics.
%Callback signature: ns3::PhyTransmissionStatParameters::TracedCallback

    * ReportUeMeasurements: Report UE measurements RSRP (dBm) and RSRQ (dB).
%Callback signature: ns3::LteUePhy::RsrpRsrqTracedCallback

    * StateTransition: Trace fired upon every UE PHY state transition
%Callback signature: ns3::LteUePhy::StateTracedCallback


Size of this type is 736 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUePowerControl

Introspection did not find any typical Config paths.

Attributes

    * ClosedLoop: If true Closed Loop mode will be active, otherwise Open Loop
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * AccumulationEnabled: If true TCP accumulation mode will be active, otherwise absolute mode will be active
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * Alpha: Value of Alpha parameter
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write 
   
    * Pcmax: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 23
        * Flags: construct write read 
   
    * Pcmin: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -40
        * Flags: construct write read 
   
    * PoNominalPusch: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int16_t -32768:32767
        * Initial value: -80
        * Flags: construct write 
   
    * PoUePusch: P_O_UE_PUSCH   INT(-8...7), Default value 0
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int16_t -32768:32767
        * Initial value: 0
        * Flags: construct write 
   
    * PsrsOffset: P_SRS_OFFSET   INT(0...15), Default value 7
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int16_t -32768:32767
        * Initial value: 7
        * Flags: construct write read 
   

TraceSources

    * ReportPuschTxPower: Report PUSCH TxPower in dBm
%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback

    * ReportPucchTxPower: Report PUCCH TxPower in dBm
%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback

    * ReportSrsTxPower: Report SRS TxPower in dBm
%Callback signature: ns3::LteUePowerControl::TxPowerTracedCallback


Size of this type is 288 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUeRrc

Config Paths

ns3::LteUeRrc is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeRrc"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeRrc"


Attributes

    * DataRadioBearerMap: List of UE RadioBearerInfo for Data Radio Bearers by LCID.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::LteDataRadioBearerInfo>
        * Flags: read 
   
    * Srb0: SignalingRadioBearerInfo for SRB0
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSignalingRadioBearerInfo>
        * Initial value: 0
        * Flags: construct write read 
   
    * Srb1: SignalingRadioBearerInfo for SRB1
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSignalingRadioBearerInfo>
        * Initial value: 0
        * Flags: construct write read 
   
    * CellId: Serving cell identifier
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Flags: read 
   
    * C-RNTI: Cell Radio Network Temporary Identifier
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Flags: read 
   
    * T300: Timer for the RRC Connection Establishment procedure (i.e., the procedure is deemed as failed if it takes longer than this)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   

TraceSources

    * MibReceived: trace fired upon reception of Master Information Block
%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback

    * Sib1Received: trace fired upon reception of System Information Block Type 1
%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback

    * Sib2Received: trace fired upon reception of System Information Block Type 2
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * StateTransition: trace fired upon every UE RRC state transition
%Callback signature: ns3::LteUeRrc::StateTracedCallback

    * InitialCellSelectionEndOk: trace fired upon successful initial cell selection procedure
%Callback signature: ns3::LteUeRrc::CellSelectionTracedCallback

    * InitialCellSelectionEndError: trace fired upon failed initial cell selection procedure
%Callback signature: ns3::LteUeRrc::CellSelectionTracedCallback

    * RandomAccessSuccessful: trace fired upon successful completion of the random access procedure
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * RandomAccessError: trace fired upon failure of the random access procedure
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * ConnectionEstablished: trace fired upon successful RRC connection establishment
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * ConnectionTimeout: trace fired upon timeout RRC connection establishment because of T300
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * ConnectionReconfiguration: trace fired upon RRC connection reconfiguration
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * HandoverStart: trace fired upon start of a handover procedure
%Callback signature: ns3::LteUeRrc::MibSibHandoverTracedCallback

    * HandoverEndOk: trace fired upon successful termination of a handover procedure
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * HandoverEndError: trace fired upon failure of a handover procedure
%Callback signature: ns3::LteUeRrc::ImsiCidRntiTracedCallback

    * SCarrierConfigured: trace fired after configuring secondary carriers
%Callback signature: ns3::LteUeRrc::SCarrierConfiguredTracedCallback


Size of this type is 1184 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUeRrcProtocolIdeal

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::LteUeRrcProtocolReal

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::MacHeaderType

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::MacLow

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 18446744073709551615 bytes (on a 64-bit architecture).

===============================================================

ns3::MacStatsCalculator

Introspection did not find any typical Config paths.

Attributes

    * DlOutputFilename: Name of the file where the downlink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: DlMacStats.txt
        * Flags: construct write 
   
    * UlOutputFilename: Name of the file where the uplink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: UlMacStats.txt
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::ManagementMessageType

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::MapScheduler

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::MatrixPropagationLossModel

Config Paths

ns3::MatrixPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::MatrixPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::MatrixPropagationLossModel"


Attributes

    * DefaultLoss: The default value for propagation loss, dB.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.79769e+308
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::MeshInformationElementVector

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::MeshL2RoutingProtocol

Config Paths

ns3::MeshL2RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice/RoutingProtocol"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::MeshPointDevice

Config Paths

ns3::MeshPointDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::MeshPointDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write read 
   
    * RoutingProtocol: The mesh routing protocol used by this mesh point.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::MeshL2RoutingProtocol>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::MeshStack

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::MeshWifiInterfaceMac

Config Paths

ns3::MeshWifiInterfaceMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::MeshWifiInterfaceMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::MeshWifiInterfaceMac"


Attributes

    * BeaconInterval: Beacon Interval
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * RandomStart: Window when beacon generating starts (uniform random) in seconds
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * BeaconGeneration: Enable/Disable Beaconing.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RegularWifiMac

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write 
   
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Txop: The Txop object.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Txop>
        * Flags: read 
   
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   

Attributes defined in parent class ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::RegularWifiMac

    * TxOkHeader: The header of successfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback

    * TxErrHeader: The header of unsuccessfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback


TraceSources defined in parent class ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 480 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtAddBaRequestHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtAddBaResponseHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtAssocRequestHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 616 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtAssocResponseHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 800 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtBeaconHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 920 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtDelBaHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtProbeRequestHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 600 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtProbeResponseHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 920 bytes (on a 64-bit architecture).

===============================================================

ns3::MgtReassocRequestHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 624 bytes (on a 64-bit architecture).

===============================================================

ns3::MinstrelHtWifiManager

Config Paths

ns3::MinstrelHtWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::MinstrelHtWifiManager"


Attributes

    * UpdateStatistics: The interval between updating statistics table 
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * LookAroundRate: The percentage to try other rates (for legacy Minstrel)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:100
        * Initial value: 10
        * Flags: construct write read 
   
    * EWMA: EWMA level
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:100
        * Initial value: 75
        * Flags: construct write read 
   
    * SampleColumn: The number of columns used for sampling
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 10
        * Flags: construct write read 
   
    * PacketLength: The packet length used for calculating mode TxTime
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1200
        * Flags: construct write read 
   
    * UseVhtOnly: Use only VHT MCSs (and not HT) when VHT is available
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * PrintStats: Control the printing of the statistics table
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 352 bytes (on a 64-bit architecture).

===============================================================

ns3::MinstrelWifiManager

Config Paths

ns3::MinstrelWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::MinstrelWifiManager"


Attributes

    * UpdateStatistics: The interval between updating statistics table 
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * LookAroundRate: the percentage to try other rates
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 10
        * Flags: construct write read 
   
    * EWMA: EWMA level
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 75
        * Flags: construct write read 
   
    * SampleColumn: The number of columns used for sampling
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 10
        * Flags: construct write read 
   
    * PacketLength: The packet length used for calculating mode TxTime
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1200
        * Flags: construct write read 
   
    * PrintStats: Print statistics table
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * PrintSamples: Print samples table
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 368 bytes (on a 64-bit architecture).

===============================================================

ns3::MobilityBuildingInfo

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::MobilityModel

Config Paths

ns3::MobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel"


Attributes

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

TraceSources

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::MpduAggregator

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::MqQueueDisc

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 904 bytes (on a 64-bit architecture).

===============================================================

ns3::MsduAggregator

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::MultiModelSpectrumChannel

Config Paths

ns3::MultiModelSpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/$ns3::MultiModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::MultiModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::MultiModelSpectrumChannel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/$ns3::MultiModelSpectrumChannel"

    * "/ChannelList/[i]/$ns3::MultiModelSpectrumChannel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::SpectrumChannel

    * MaxLossDb: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1e+09
        * Flags: construct write read 
   
    * PropagationLossModel: A pointer to the propagation loss model attached to this channel.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::PropagationLossModel>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::SpectrumChannel

    * Gain: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss
%Callback signature: ns3::SpectrumChannel::GainTracedCallback

    * PathLoss: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. 
%Callback signature: ns3::SpectrumChannel::LossTracedCallback

    * TxSigParams: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.
%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback


Size of this type is 216 bytes (on a 64-bit architecture).

===============================================================

ns3::NakagamiPropagationLossModel

Config Paths

ns3::NakagamiPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::NakagamiPropagationLossModel"


Attributes

    * Distance1: Beginning of the second distance field. Default is 80m.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 80
        * Flags: construct write read 
   
    * Distance2: Beginning of the third distance field. Default is 200m.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 200
        * Flags: construct write read 
   
    * m0: m0 for distances smaller than Distance1. Default is 1.5.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.5
        * Flags: construct write read 
   
    * m1: m1 for distances smaller than Distance2. Default is 0.75.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.75
        * Flags: construct write read 
   
    * m2: m2 for distances greater than Distance2. Default is 0.75.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.75
        * Flags: construct write read 
   
    * ErlangRv: Access to the underlying ErlangRandomVariable
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ErlangRandomVariable>
        * Initial value: ns3::ErlangRandomVariable
        * Flags: construct write read 
   
    * GammaRv: Access to the underlying GammaRandomVariable
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::GammaRandomVariable>
        * Initial value: ns3::GammaRandomVariable
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::NdiscCache

Introspection did not find any typical Config paths.

Attributes

    * UnresolvedQueueSize: Size of the queue for packets pending an NA reply.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::NetDevice

Config Paths

ns3::NetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::NetDeviceQueueInterface

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 120 bytes (on a 64-bit architecture).

===============================================================

ns3::NistErrorRateModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::Node

Config Paths

ns3::Node is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]"


Attributes

    * DeviceList: The list of devices associated to this Node.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::NetDevice>
        * Flags: read 
   
    * ApplicationList: The list of applications associated to this Node.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Application>
        * Flags: read 
   
    * Id: The id (unique integer) of this Node.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   
    * SystemId: The systemId of this node: a unique integer used for parallel simulations.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: write read 
   

No TraceSources are defined for this type.

Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::NodeListPriv

Config Paths

ns3::NodeListPriv is accessible through the following paths with Config::Set and Config::Connect:

    * ""


Attributes

    * NodeList: The list of all nodes created during the simulation.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Node>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::NonCommunicatingNetDevice

Config Paths

ns3::NonCommunicatingNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::NonCommunicatingNetDevice"


Attributes

    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Object>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::NoOpComponentCarrierManager

Config Paths

ns3::NoOpComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 416 bytes (on a 64-bit architecture).

===============================================================

ns3::NoOpHandoverAlgorithm

Config Paths

ns3::NoOpHandoverAlgorithm is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::NoOpHandoverAlgorithm"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteHandoverAlgorithm/$ns3::NoOpHandoverAlgorithm"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::NormalRandomVariable

Config Paths

ns3::NormalRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalVelocity"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalDirection"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/NormalPitch"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::NormalRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::NormalRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::NormalRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::NormalRandomVariable"


Attributes

    * Mean: The mean value for the normal distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Variance: The variance value for the normal distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Bound: The bound on the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1e+307
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::NullMessageSimulatorImpl

Introspection did not find any typical Config paths.

Attributes

    * SchedulerTune: Null Message scheduler tuning parameter
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0.01:1
        * Initial value: 1
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::Object

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::ObjectBase

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 8 bytes (on a 64-bit architecture).

===============================================================

ns3::OcbWifiMac

Config Paths

ns3::OcbWifiMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::OcbWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::OcbWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/MacEntities/[i]"


No Attributes are defined for this type.

Attributes defined in parent class ns3::RegularWifiMac

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write 
   
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Txop: The Txop object.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Txop>
        * Flags: read 
   
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   

Attributes defined in parent class ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::RegularWifiMac

    * TxOkHeader: The header of successfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback

    * TxErrHeader: The header of unsuccessfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback


TraceSources defined in parent class ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 416 bytes (on a 64-bit architecture).

===============================================================

ns3::OhBuildingsPropagationLossModel

Config Paths

ns3::OhBuildingsPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::BuildingsPropagationLossModel/$ns3::OhBuildingsPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OhBuildingsPropagationLossModel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::BuildingsPropagationLossModel

    * ShadowSigmaOutdoor: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 7
        * Flags: construct write read 
   
    * ShadowSigmaIndoor: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 8
        * Flags: construct write read 
   
    * ShadowSigmaExtWalls: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   
    * InternalWallLoss: Additional loss for each internal wall [dB]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::OkumuraHataPropagationLossModel

Config Paths

ns3::OkumuraHataPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::OkumuraHataPropagationLossModel"


Attributes

    * Frequency: The propagation frequency in Hz
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2.16e+09
        * Flags: construct write read 
   
    * Environment: Environment Scenario
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Urban
        * Flags: construct write read 
   
    * CitySize: Dimension of the city
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Large
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::olsr::MessageHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::olsr::PacketHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::olsr::RoutingProtocol

Config Paths

ns3::olsr::RoutingProtocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::olsr::RoutingProtocol"


Attributes

    * HelloInterval: HELLO messages emission interval.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000000000.0ns
        * Flags: construct write read 
   
    * TcInterval: TC messages emission interval.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * MidInterval: MID messages emission interval.  Normally it is equal to TcInterval.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * HnaInterval: HNA messages emission interval.  Normally it is equal to TcInterval.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * Willingness: Willingness of a node to carry and forward traffic for other nodes.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: default
        * Flags: construct write read 
   

TraceSources

    * Rx: Receive OLSR packet.
%Callback signature: ns3::olsr::RoutingProtocol::PacketTxRxTracedCallback

    * Tx: Send OLSR packet.
%Callback signature: ns3::olsr::RoutingProtocol::PacketTxRxTracedCallback

    * RoutingTableChanged: The OLSR routing table has changed.
%Callback signature: ns3::olsr::RoutingProtocol::TableChangeTracedCallback


Size of this type is 968 bytes (on a 64-bit architecture).

===============================================================

ns3::OnoeWifiManager

Config Paths

ns3::OnoeWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::OnoeWifiManager"


Attributes

    * UpdatePeriod: The interval between decisions about rate control changes
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RaiseThreshold: Attempt to raise the rate if we hit that threshold
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * AddCreditThreshold: Add credit threshold
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 304 bytes (on a 64-bit architecture).

===============================================================

ns3::OnOffApplication

Config Paths

ns3::OnOffApplication is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication"


Attributes

    * DataRate: The data rate in on state.
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 500000bps
        * Flags: construct write read 
   
    * PacketSize: The size of packets sent in on state
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 1:4294967295
        * Initial value: 512
        * Flags: construct write read 
   
    * Remote: The address of the destination
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * OnTime: A RandomVariableStream used to pick the duration of the 'On' state.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::ConstantRandomVariable[Constant=1.0]
        * Flags: construct write read 
   
    * OffTime: A RandomVariableStream used to pick the duration of the 'Off' state.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::ConstantRandomVariable[Constant=1.0]
        * Flags: construct write read 
   
    * MaxBytes: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint64_t 0:18446744073709551615
        * Initial value: 0
        * Flags: construct write read 
   
    * Protocol: The type of protocol to use. This should be a subclass of ns3::SocketFactory
  
        * Set with class:  TypeIdValue
        * Underlying type:  TypeId
        * Initial value: ns3::UdpSocketFactory
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Tx: A new packet is created and is sent
%Callback signature: ns3::Packet::TracedCallback

    * TxWithAddresses: A new packet is created and is sent
%Callback signature: ns3::Packet::TwoAddressTracedCallback


Size of this type is 288 bytes (on a 64-bit architecture).

===============================================================

ns3::OrbisTopologyReader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::OutdoorPositionAllocator

Config Paths

ns3::OutdoorPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator"


Attributes

    * X: A random variable which represents the x coordinate of a position in a random box.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * Y: A random variable which represents the y coordinate of a position in a random box.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * Z: A random variable which represents the z coordinate of a position in a random box.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * MaxAttempts: Maximum number of attempts for the rejection sampling before giving up.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketBurst

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketFilter

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketProbe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The packet that serve as the output for this probe
%Callback signature: ns3::Packet::TracedCallback

    * OutputBytes: The number of bytes in the packet
%Callback signature: ns3::Packet::SizeTracedCallback


Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketSink

Config Paths

ns3::PacketSink is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSink"


Attributes

    * Local: The Address on which to Bind the rx socket.
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * Protocol: The type id of the protocol to use for the rx socket.
  
        * Set with class:  TypeIdValue
        * Underlying type:  TypeId
        * Initial value: ns3::UdpSocketFactory
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Rx: A packet has been received
%Callback signature: ns3::Packet::AddressTracedCallback

    * RxWithAddresses: A packet has been received
%Callback signature: ns3::Packet::TwoAddressTracedCallback


Size of this type is 200 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketSocket

Introspection did not find any typical Config paths.

Attributes

    * RcvBufSize: PacketSocket maximum receive buffer size (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 131072
        * Flags: construct write read 
   

TraceSources

    * Drop: Drop packet due to receive buffer overflow
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketSocketClient

Config Paths

ns3::PacketSocketClient is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketClient"


Attributes

    * MaxPackets: The maximum number of packets the application will send (zero means infinite)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   
    * Interval: The time to wait between packets
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * PacketSize: Size of packets generated (bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1024
        * Flags: construct write read 
   
    * Priority: Priority assigned to the packets generated.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Tx: A packet has been sent
%Callback signature: ns3::Packet::AddressTracedCallback


Size of this type is 224 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketSocketFactory

Config Paths

ns3::PacketSocketFactory is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::PacketSocketFactory"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketSocketServer

Config Paths

ns3::PacketSocketServer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::PacketSocketServer"


No Attributes are defined for this type.

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Rx: A packet has been received
%Callback signature: ns3::Packet::AddressTracedCallback


Size of this type is 176 bytes (on a 64-bit architecture).

===============================================================

ns3::PacketSocketTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::ParabolicAntennaModel

Introspection did not find any typical Config paths.

Attributes

    * Beamwidth: The 3dB beamwidth (degrees)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:180
        * Initial value: 60
        * Flags: construct write read 
   
    * Orientation: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -360:360
        * Initial value: 0
        * Flags: construct write read 
   
    * MaxAttenuation: The maximum attenuation (dB) of the antenna radiation pattern.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 20
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::ParetoRandomVariable

Config Paths

ns3::ParetoRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ParetoRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ParetoRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ParetoRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ParetoRandomVariable"


Attributes

    * Mean: The mean parameter for the Pareto distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Scale: The scale parameter for the Pareto distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Shape: The shape parameter for the Pareto distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * Bound: The upper bound on the values returned by this RNG stream (if non-zero).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::ParfWifiManager

Config Paths

ns3::ParfWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::ParfWifiManager"


Attributes

    * AttemptThreshold: The minimum number of transmission attempts to try a new power or rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   
    * SuccessThreshold: The minimum number of successful transmissions to try a new power or rate.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * PowerChange: The transmission power has change
%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback

    * RateChange: The transmission rate has change
%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 312 bytes (on a 64-bit architecture).

===============================================================

ns3::PbbPacket

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::PcapFileWrapper

Introspection did not find any typical Config paths.

Attributes

    * CaptureSize: Maximum length of captured packets (cf. pcap snaplen)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:65535
        * Initial value: 65535
        * Flags: construct write read 
   
    * NanosecMode: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 608 bytes (on a 64-bit architecture).

===============================================================

ns3::PdcpTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::PfFfMacScheduler

Config Paths

ns3::PfFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PfFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1352 bytes (on a 64-bit architecture).

===============================================================

ns3::PfifoFastQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * MaxSize: The maximum number of packets accepted by this queue disc.
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 1000p
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 904 bytes (on a 64-bit architecture).

===============================================================

ns3::PhyRxStatsCalculator

Introspection did not find any typical Config paths.

Attributes

    * DlRxOutputFilename: Name of the file where the downlink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: DlRxPhyStats.txt
        * Flags: construct write 
   
    * UlRxOutputFilename: Name of the file where the uplink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: UlRxPhyStats.txt
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::PhyStatsCalculator

Introspection did not find any typical Config paths.

Attributes

    * DlRsrpSinrFilename: Name of the file where the RSRP/SINR statistics will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: DlRsrpSinrStats.txt
        * Flags: construct write 
   
    * UlSinrFilename: Name of the file where the UE SINR statistics will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: UlSinrStats.txt
        * Flags: construct write 
   
    * UlInterferenceFilename: Name of the file where the interference statistics will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: UlInterferenceStats.txt
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 176 bytes (on a 64-bit architecture).

===============================================================

ns3::PhyTxStatsCalculator

Introspection did not find any typical Config paths.

Attributes

    * DlTxOutputFilename: Name of the file where the downlink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: DlTxPhyStats.txt
        * Flags: construct write 
   
    * UlTxOutputFilename: Name of the file where the uplink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: UlTxPhyStats.txt
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::PieQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * MeanPktSize: Average of packet size
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * A: Value of alpha
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.125
        * Flags: construct write read 
   
    * B: Value of beta
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.25
        * Flags: construct write read 
   
    * Tupdate: Time period to calculate drop probability
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +29999999.0ns
        * Flags: construct write read 
   
    * Supdate: Start time of the update timer
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * MaxSize: The maximum number of packets accepted by this queue disc
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 25p
        * Flags: construct write read 
   
    * DequeueThreshold: Minimum queue size in bytes before dequeue rate is measured
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10000
        * Flags: construct write read 
   
    * QueueDelayReference: Desired queue delay
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +20000000.0ns
        * Flags: construct write read 
   
    * MaxBurstAllowance: Current max burst allowance in seconds before random drop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 1072 bytes (on a 64-bit architecture).

===============================================================

ns3::Ping6

Config Paths

ns3::Ping6 is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::Ping6"


Attributes

    * MaxPackets: The maximum number of packets the application will send
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   
    * Interval: The time to wait between packets
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RemoteIpv6: The Ipv6Address of the outbound packets
  
        * Set with class:  Ipv6AddressValue
        * Underlying type:  Ipv6Address
        * Initial value: ::
        * Flags: construct write read 
   
    * LocalIpv6: Local Ipv6Address of the sender
  
        * Set with class:  Ipv6AddressValue
        * Underlying type:  Ipv6Address
        * Initial value: ::
        * Flags: construct write read 
   
    * PacketSize: Size of packets generated
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 248 bytes (on a 64-bit architecture).

===============================================================

ns3::PointToPointChannel

Config Paths

ns3::PointToPointChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::PointToPointChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::PointToPointChannel"

    * "/ChannelList/[i]/$ns3::PointToPointChannel"


Attributes

    * Delay: Propagation delay through the channel
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

TraceSources

    * TxRxPointToPoint: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.
%Callback signature: ns3::PointToPointChannel::TxRxAnimationCallback


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::PointToPointEpcHelper

Introspection did not find any typical Config paths.

Attributes

    * S1uLinkDataRate: The data rate to be used for the next S1-U link to be created
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 10000000000bps
        * Flags: construct write read 
   
    * S1uLinkDelay: The delay to be used for the next S1-U link to be created
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * S1uLinkMtu: The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 2000
        * Flags: construct write read 
   
    * X2LinkDataRate: The data rate to be used for the next X2 link to be created
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 10000000000bps
        * Flags: construct write read 
   
    * X2LinkDelay: The delay to be used for the next X2 link to be created
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * X2LinkMtu: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 3000
        * Flags: construct write read 
   
    * S1uLinkPcapPrefix: Prefix for Pcap generated by S1-U link
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: s1-u
        * Flags: construct write read 
   
    * X2LinkPcapPrefix: Prefix for Pcap generated by X2 link
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: x2
        * Flags: construct write read 
   
    * X2LinkEnablePcap: Enable Pcap for X2 link
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * S1uLinkEnablePcap: Enable Pcap for X2 link
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::PointToPointNetDevice

Config Paths

ns3::PointToPointNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1500
        * Flags: construct write read 
   
    * Address: The MAC address of this device.
  
        * Set with class:  Mac48AddressValue
        * Underlying type:  Mac48Address
        * Initial value: ff:ff:ff:ff:ff:ff
        * Flags: construct write read 
   
    * DataRate: The default data rate for point to point links
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 32768bps
        * Flags: construct write read 
   
    * ReceiveErrorModel: The receiver error model used to simulate packet loss
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ErrorModel>
        * Initial value: 0
        * Flags: construct write read 
   
    * InterframeGap: The time to wait between packet (frame) transmissions
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * TxQueue: A queue to use as the transmit queue in the device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<Packet>>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::Packet::TracedCallback

    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback

    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 360 bytes (on a 64-bit architecture).

===============================================================

ns3::PointToPointRemoteChannel

Config Paths

ns3::PointToPointRemoteChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::PointToPointChannel/$ns3::PointToPointRemoteChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::PointToPointRemoteChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::PointToPointChannel/$ns3::PointToPointRemoteChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::PointToPointRemoteChannel"

    * "/ChannelList/[i]/$ns3::PointToPointChannel/$ns3::PointToPointRemoteChannel"

    * "/ChannelList/[i]/$ns3::PointToPointRemoteChannel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::PointToPointChannel

    * Delay: Propagation delay through the channel
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::PointToPointChannel

    * TxRxPointToPoint: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.
%Callback signature: ns3::PointToPointChannel::TxRxAnimationCallback


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::PositionAllocator

Config Paths

ns3::PositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::PppHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::PrioQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * Priomap: The priority to band mapping.
  
        * Set with class:  PriomapValue
        * Underlying type:  Priomap
        * Initial value: 1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 936 bytes (on a 64-bit architecture).

===============================================================

ns3::Probe

Introspection did not find any typical Config paths.

Attributes

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::producer

Introspection did not find any typical Config paths.

Attributes

    * PayloadSize: The destination port of the outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1500
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::PropagationDelayModel

Config Paths

ns3::PropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::PropagationLossModel

Config Paths

ns3::PropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::PssFfMacScheduler

Config Paths

ns3::PssFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::PssFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * PssFdSchedulerType: FD scheduler in PSS (default value is PFsch)
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: PFsch
        * Flags: construct write read 
   
    * nMux: The number of UE selected by TD scheduler (default value is 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1360 bytes (on a 64-bit architecture).

===============================================================

ns3::QosTxop

Config Paths

ns3::QosTxop is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/Txop/$ns3::QosTxop"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/VO_Txop"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/VI_Txop"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/BE_Txop"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/BK_Txop"


No Attributes are defined for this type.

Attributes defined in parent class ns3::Txop

    * MinCw: The minimum value of the contention window.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   
    * MaxCw: The maximum value of the contention window.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1023
        * Flags: construct write read 
   
    * Aifsn: The AIFSN: the default value conforms to non-QOS.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 2
        * Flags: construct write read 
   
    * TxopLimit: The TXOP limit: the default value conforms to non-QoS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Queue: The WifiMacQueue object
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiMacQueue>
        * Flags: read 
   

TraceSources

    * BackoffTrace: Trace source for backoff values
%Callback signature: ns3::TracedValueCallback::Uint32

    * CwTrace: Trace source for contention window values
%Callback signature: ns3::TracedValueCallback::Uint32

    * TxopTrace: Trace source for txop start and duration times
%Callback signature: ns3::TracedValueCallback::Time


Size of this type is 448 bytes (on a 64-bit architecture).

===============================================================

ns3::Queue<Packet>

Config Paths

ns3::Queue<Packet> is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::AlohaNoackNetDevice/Queue"


No Attributes are defined for this type.

Attributes defined in parent class ns3::QueueBase

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 100p
        * Flags: construct write read 
   

TraceSources

    * Enqueue: Enqueue a packet in the queue.
%Callback signature: ns3::Packet::TracedCallback

    * Dequeue: Dequeue a packet from the queue.
%Callback signature: ns3::Packet::TracedCallback

    * Drop: Drop a packet (for whatever reason).
%Callback signature: ns3::Packet::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue.
%Callback signature: ns3::Packet::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue.
%Callback signature: ns3::Packet::TracedCallback


TraceSources defined in parent class ns3::QueueBase

    * PacketsInQueue: Number of packets currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 232 bytes (on a 64-bit architecture).

===============================================================

ns3::Queue<QueueDiscItem>

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::QueueBase

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 100p
        * Flags: construct write read 
   

TraceSources

    * Enqueue: Enqueue a packet in the queue.
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue.
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet (for whatever reason).
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue.
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue.
%Callback signature: ns3::QueueDiscItem::TracedCallback


TraceSources defined in parent class ns3::QueueBase

    * PacketsInQueue: Number of packets currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 232 bytes (on a 64-bit architecture).

===============================================================

ns3::Queue<WifiMacQueueItem>

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::QueueBase

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 100p
        * Flags: construct write read 
   

TraceSources

    * Enqueue: Enqueue a packet in the queue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * Drop: Drop a packet (for whatever reason).
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback


TraceSources defined in parent class ns3::QueueBase

    * PacketsInQueue: Number of packets currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 232 bytes (on a 64-bit architecture).

===============================================================

ns3::QueueBase

Introspection did not find any typical Config paths.

Attributes

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 100p
        * Flags: construct write read 
   

TraceSources

    * PacketsInQueue: Number of packets currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 128 bytes (on a 64-bit architecture).

===============================================================

ns3::QueueDisc

Introspection did not find any typical Config paths.

Attributes

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

TraceSources

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 904 bytes (on a 64-bit architecture).

===============================================================

ns3::QueueDiscClass

Introspection did not find any typical Config paths.

Attributes

    * QueueDisc: The queue disc attached to the class
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDisc>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::QueueLimits

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::RadioBearerStatsCalculator

Introspection did not find any typical Config paths.

Attributes

    * StartTime: Start time of the on going epoch.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * EpochDuration: Epoch duration.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +250000000.0ns
        * Flags: construct write read 
   
    * DlRlcOutputFilename: Name of the file where the downlink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: DlRlcStats.txt
        * Flags: construct write 
   
    * UlRlcOutputFilename: Name of the file where the uplink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: UlRlcStats.txt
        * Flags: construct write 
   
    * DlPdcpOutputFilename: Name of the file where the downlink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: DlPdcpStats.txt
        * Flags: construct write 
   
    * UlPdcpOutputFilename: Name of the file where the uplink results will be saved.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: UlPdcpStats.txt
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 936 bytes (on a 64-bit architecture).

===============================================================

ns3::RadioEnvironmentMapHelper

Introspection did not find any typical Config paths.

Attributes

    * ChannelPath: The path to the channel for which the Radio Environment Map is to be generated
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: /ChannelList/0
        * Flags: construct write read 
   
    * OutputFile: the filename to which the Radio Environment Map is saved
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: rem.out
        * Flags: construct write read 
   
    * XMin: The min x coordinate of the map.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * YMin: The min y coordinate of the map.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * XMax: The max x coordinate of the map.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * YMax: The max y coordinate of the map.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * XRes: The resolution (number of points) of the map along the x axis.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 2:65535
        * Initial value: 100
        * Flags: construct write read 
   
    * YRes: The resolution (number of points) of the map along the y axis.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 2:65535
        * Initial value: 100
        * Flags: construct write read 
   
    * Z: The value of the z coordinate for which the map is to be generated
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * StopWhenDone: If true, Simulator::Stop () will be called as soon as the REM has been generated
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * NoisePower: the power of the measuring instrument noise, in Watts. Default to a kT of -174 dBm with a noise figure of 9 dB and a bandwidth of 25 LTE Resource Blocks
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.423e-13
        * Flags: construct write read 
   
    * MaxPointsPerIteration: Maximum number of REM points to be calculated per iteration. Every point consumes approximately 5KB of memory.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 1:4294967295
        * Initial value: 20000
        * Flags: construct write read 
   
    * Earfcn: E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 100
        * Flags: construct write read 
   
    * Bandwidth: Transmission Bandwidth Configuration (in number of RBs) over which the SINR will be calculated
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 25
        * Flags: construct write read 
   
    * UseDataChannel: If true, REM will be generated for PDSCH and for PDCCH otherwise 
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * RbId: Resource block Id, for which REM will be generated,default value is -1, what means REM will be averaged from all RBs
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t -2147483648:2147483647
        * Initial value: -1
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 688 bytes (on a 64-bit architecture).

===============================================================

ns3::RadiotapHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::Radvd

Config Paths

ns3::Radvd is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::Radvd"


Attributes

    * AdvertisementJitter: Uniform variable to provide jitter between min and max values of AdvInterval
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UniformRandomVariable>
        * Initial value: ns3::UniformRandomVariable
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 280 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomBoxPositionAllocator

Config Paths

ns3::RandomBoxPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator"


Attributes

    * X: A random variable which represents the x coordinate of a position in a random box.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * Y: A random variable which represents the y coordinate of a position in a random box.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * Z: A random variable which represents the z coordinate of a position in a random box.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomBuildingPositionAllocator

Config Paths

ns3::RandomBuildingPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBuildingPositionAllocator"


Attributes

    * WithReplacement: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomDirection2dMobilityModel

Config Paths

ns3::RandomDirection2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel"


Attributes

    * Bounds: The 2d bounding area
  
        * Set with class:  RectangleValue
        * Underlying type:  Rectangle
        * Initial value: -100|100|-100|100
        * Flags: construct write read 
   
    * Speed: A random variable to control the speed (m/s).
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=1.0|Max=2.0]
        * Flags: construct write read 
   
    * Pause: A random variable to control the pause (s).
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::ConstantRandomVariable[Constant=2.0]
        * Flags: construct write read 
   

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomDiscPositionAllocator

Config Paths

ns3::RandomDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator"


Attributes

    * Theta: A random variable which represents the angle (gradients) of a position in a random disc.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.2830]
        * Flags: construct write read 
   
    * Rho: A random variable which represents the radius of a position in a random disc.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=200.0]
        * Flags: construct write read 
   
    * X: The x coordinate of the center of the random position disc.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Y: The y coordinate of the center of the random position disc.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomPropagationDelayModel

Config Paths

ns3::RandomPropagationDelayModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel"


Attributes

    * Variable: The random variable which generates random delays (s).
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomPropagationLossModel

Config Paths

ns3::RandomPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel"


Attributes

    * Variable: The random variable used to pick a loss every time CalcRxPower is invoked.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::ConstantRandomVariable[Constant=1.0]
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomRectanglePositionAllocator

Config Paths

ns3::RandomRectanglePositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator"


Attributes

    * X: A random variable which represents the x coordinate of a position in a random rectangle.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   
    * Y: A random variable which represents the y coordinate of a position in a random rectangle.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomRoomPositionAllocator

Config Paths

ns3::RandomRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRoomPositionAllocator"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomVariableStream

Config Paths

ns3::RandomVariableStream is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable"


Attributes

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomWalk2dMobilityModel

Config Paths

ns3::RandomWalk2dMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel"


Attributes

    * Bounds: Bounds of the area to cruise.
  
        * Set with class:  RectangleValue
        * Underlying type:  Rectangle
        * Initial value: 0|100|0|100
        * Flags: construct write read 
   
    * Time: Change current direction and speed after moving for this delay.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * Distance: Change current direction and speed after moving for this distance.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Mode: The mode indicates the condition used to change the current speed and direction
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Distance
        * Flags: construct write read 
   
    * Direction: A random variable used to pick the direction (radians).
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=6.283184]
        * Flags: construct write read 
   
    * Speed: A random variable used to pick the speed (m/s).
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=2.0|Max=4.0]
        * Flags: construct write read 
   

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 208 bytes (on a 64-bit architecture).

===============================================================

ns3::RandomWaypointMobilityModel

Config Paths

ns3::RandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel"


Attributes

    * Speed: A random variable used to pick the speed of a random waypoint model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.3|Max=0.7]
        * Flags: construct write read 
   
    * Pause: A random variable used to pick the pause of a random waypoint model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::ConstantRandomVariable[Constant=2.0]
        * Flags: construct write read 
   
    * PositionAllocator: The position model used to pick a destination point.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::PositionAllocator>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::RangePropagationLossModel

Config Paths

ns3::RangePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RangePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RangePropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RangePropagationLossModel"


Attributes

    * MaxRange: Maximum Transmission Range (meters)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 250
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::RateErrorModel

Config Paths

ns3::RateErrorModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel"


Attributes

    * ErrorUnit: The error unit
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ERROR_UNIT_BYTE
        * Flags: construct write read 
   
    * ErrorRate: The error rate.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * RanVar: The decision variable attached to this error model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::UniformRandomVariable[Min=0.0|Max=1.0]
        * Flags: construct write read 
   

Attributes defined in parent class ns3::ErrorModel

    * IsEnabled: Whether this ErrorModel is enabled or not.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::RealtimeSimulatorImpl

Introspection did not find any typical Config paths.

Attributes

    * SynchronizationMode: What to do if the simulation cannot keep up with real time.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: BestEffort
        * Flags: construct write 
   
    * HardLimit: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::ReceiveListErrorModel

Config Paths

ns3::ReceiveListErrorModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::ReceiveListErrorModel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::ErrorModel

    * IsEnabled: Whether this ErrorModel is enabled or not.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::RedQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * MeanPktSize: Average of packet size
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 500
        * Flags: construct write read 
   
    * IdlePktSize: Average packet size used during idle times. Used when m_cautions = 3
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * Wait: True for waiting between dropped packets
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * Gentle: True to increases dropping probability slowly when average queue exceeds maxthresh
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * ARED: True to enable ARED
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * AdaptMaxP: True to adapt m_curMaxP
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * FengAdaptive: True to enable Feng's Adaptive RED
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * NLRED: True to enable Nonlinear RED
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * MinTh: Minimum average length threshold in packets/bytes
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   
    * MaxTh: Maximum average length threshold in packets/bytes
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 15
        * Flags: construct write read 
   
    * MaxSize: The maximum number of packets accepted by this queue disc
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 25p
        * Flags: construct write read 
   
    * QW: Queue weight related to the exponential weighted moving average (EWMA)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.002
        * Flags: construct write read 
   
    * LInterm: The maximum probability of dropping a packet
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 50
        * Flags: construct write read 
   
    * TargetDelay: Target average queuing delay in ARED
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000.0ns
        * Flags: construct write read 
   
    * Interval: Time interval to update m_curMaxP
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * Top: Upper bound for m_curMaxP in ARED
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.5
        * Flags: construct write read 
   
    * Bottom: Lower bound for m_curMaxP in ARED
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0
        * Flags: construct write read 
   
    * Alpha: Increment parameter for m_curMaxP in ARED
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.01
        * Flags: construct write 
   
    * Beta: Decrement parameter for m_curMaxP in ARED
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.9
        * Flags: construct write 
   
    * FengAlpha: Decrement parameter for m_curMaxP in Feng's Adaptive RED
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3
        * Flags: construct write 
   
    * FengBeta: Increment parameter for m_curMaxP in Feng's Adaptive RED
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 2
        * Flags: construct write 
   
    * LastSet: Store the last time m_curMaxP was updated
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Rtt: Round Trip Time to be considered while automatically setting m_bottom
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * Ns1Compat: NS-1 compatibility
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * LinkBandwidth: The RED link bandwidth
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 1500000bps
        * Flags: construct write read 
   
    * LinkDelay: The RED link delay
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +20000000.0ns
        * Flags: construct write read 
   
    * UseEcn: True to use ECN (packets are marked instead of being dropped)
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * UseHardDrop: True to always drop packets above max threshold
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 1184 bytes (on a 64-bit architecture).

===============================================================

ns3::RegularWifiMac

Config Paths

ns3::RegularWifiMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac"


Attributes

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write 
   
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Txop: The Txop object.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Txop>
        * Flags: read 
   
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   

Attributes defined in parent class ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

TraceSources

    * TxOkHeader: The header of successfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback

    * TxErrHeader: The header of unsuccessfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback


TraceSources defined in parent class ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 360 bytes (on a 64-bit architecture).

===============================================================

ns3::RemSpectrumPhy

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::Rip

Introspection did not find any typical Config paths.

Attributes

    * UnsolicitedRoutingUpdate: The time between two Unsolicited Routing Updates.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * StartupDelay: Maximum random delay for protocol startup (send route requests).
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * TimeoutDelay: The delay to invalidate a route.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +180000000000.0ns
        * Flags: construct write read 
   
    * GarbageCollectionDelay: The delay to delete an expired route.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +120000000000.0ns
        * Flags: construct write read 
   
    * MinTriggeredCooldown: Min cooldown delay after a Triggered Update.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * MaxTriggeredCooldown: Max cooldown delay after a Triggered Update.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * SplitHorizon: Split Horizon strategy.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: PoisonReverse
        * Flags: construct write read 
   
    * LinkDownValue: Value for link down in count to infinity.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 16
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 328 bytes (on a 64-bit architecture).

===============================================================

ns3::RipHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::RipNg

Config Paths

ns3::RipNg is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::RipNg"


Attributes

    * UnsolicitedRoutingUpdate: The time between two Unsolicited Routing Updates.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write read 
   
    * StartupDelay: Maximum random delay for protocol startup (send route requests).
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * TimeoutDelay: The delay to invalidate a route.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +180000000000.0ns
        * Flags: construct write read 
   
    * GarbageCollectionDelay: The delay to delete an expired route.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +120000000000.0ns
        * Flags: construct write read 
   
    * MinTriggeredCooldown: Min cooldown delay after a Triggered Update.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * MaxTriggeredCooldown: Max cooldown delay after a Triggered Update.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000000.0ns
        * Flags: construct write read 
   
    * SplitHorizon: Split Horizon strategy.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: PoisonReverse
        * Flags: construct write read 
   
    * LinkDownValue: Value for link down in count to infinity.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 16
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::RipNgHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::RipNgRte

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::RipRte

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::RlcTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::RngReq

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::RngRsp

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::RocketfuelTopologyReader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::RraaWifiManager

Config Paths

ns3::RraaWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::RraaWifiManager"


Attributes

    * Basic: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Timeout: Timeout for the RRAA BASIC loss estimation block (s)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   
    * FrameLength: The data frame length (in bytes) used for calculating mode TxTime.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1420
        * Flags: construct write read 
   
    * AckFrameLength: The ACK frame length (in bytes) used for calculating mode TxTime.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 14
        * Flags: construct write read 
   
    * Alpha: Constant for calculating the MTL threshold.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 1:1.79769e+308
        * Initial value: 1.25
        * Flags: construct write read 
   
    * Beta: Constant for calculating the ORI threshold.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 1:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * Tau: Constant for calculating the EWND size.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1.79769e+308
        * Initial value: 0.012
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * Rate: Traced value for rate changes (b/s)
%Callback signature: ns3::TracedValueCallback::Uint64


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 376 bytes (on a 64-bit architecture).

===============================================================

ns3::RrComponentCarrierManager

Config Paths

ns3::RrComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::NoOpComponentCarrierManager/$ns3::RrComponentCarrierManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbComponentCarrierManager/$ns3::RrComponentCarrierManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 416 bytes (on a 64-bit architecture).

===============================================================

ns3::RrFfMacScheduler

Config Paths

ns3::RrFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::RrFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1120 bytes (on a 64-bit architecture).

===============================================================

ns3::RrpaaWifiManager

Config Paths

ns3::RrpaaWifiManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager/$ns3::RrpaaWifiManager"


Attributes

    * Basic: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * Timeout: Timeout for the RRAA-BASIC loss estimation block (s).
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * FrameLength: The data frame length (in bytes) used for calculating mode TxTime.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1420
        * Flags: construct write read 
   
    * AckFrameLength: The ACK frame length (in bytes) used for calculating mode TxTime.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 14
        * Flags: construct write read 
   
    * Alpha: Constant for calculating the MTL threshold.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 1:1.79769e+308
        * Initial value: 1.25
        * Flags: construct write read 
   
    * Beta: Constant for calculating the ORI threshold.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 1:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * Tau: Constant for calculating the EWND size.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1.79769e+308
        * Initial value: 0.015
        * Flags: construct write read 
   
    * Gamma: Constant for Probabilistic Decision Table decrements.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 1:1.79769e+308
        * Initial value: 2
        * Flags: construct write read 
   
    * Delta: Constant for Probabilistic Decision Table increments.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 1:1.79769e+308
        * Initial value: 1.0905
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * RateChange: The transmission rate has change.
%Callback signature: ns3::WifiRemoteStationManager::RateChangeTracedCallback

    * PowerChange: The transmission power has change.
%Callback signature: ns3::WifiRemoteStationManager::PowerChangeTracedCallback


TraceSources defined in parent class ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 416 bytes (on a 64-bit architecture).

===============================================================

ns3::RttEstimator

Introspection did not find any typical Config paths.

Attributes

    * InitialEstimation: Initial RTT estimate
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::RttEstimator1

Introspection did not find any typical Config paths.

Attributes

    * MaxMultiplier: Maximum RTO Multiplier
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 64
        * Flags: construct write read 
   
    * InitialEstimation: Initial RTT estimation
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * MinRTO: Minimum retransmit timeout value
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * FastRetxTimer: Timeout defining how frequent FasterRetransmission timeouts should be checked
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 272 bytes (on a 64-bit architecture).

===============================================================

ns3::RttMeanDeviation

Introspection did not find any typical Config paths.

Attributes

    * Alpha: Gain used in estimating the RTT, must be 0 <= alpha <= 1
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.125
        * Flags: construct write read 
   
    * Beta: Gain used in estimating the RTT variation, must be 0 <= beta <= 1
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.25
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RttEstimator

    * InitialEstimation: Initial RTT estimate
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::RttMeanDeviation1

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::RttEstimator1

    * MaxMultiplier: Maximum RTO Multiplier
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 64
        * Flags: construct write read 
   
    * InitialEstimation: Initial RTT estimation
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * MinRTO: Minimum retransmit timeout value
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * FastRetxTimer: Timeout defining how frequent FasterRetransmission timeouts should be checked
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +5000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 296 bytes (on a 64-bit architecture).

===============================================================

ns3::RvBatteryModel

Introspection did not find any typical Config paths.

Attributes

    * RvBatteryModelPeriodicEnergyUpdateInterval: RV battery model sampling interval.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RvBatteryModelLowBatteryThreshold: Low battery threshold.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.1
        * Flags: construct write read 
   
    * RvBatteryModelOpenCircuitVoltage: RV battery model open circuit voltage.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 4.1
        * Flags: construct write read 
   
    * RvBatteryModelCutoffVoltage: RV battery model cutoff voltage.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3
        * Flags: construct write read 
   
    * RvBatteryModelAlphaValue: RV battery model alpha value.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 35220
        * Flags: construct write read 
   
    * RvBatteryModelBetaValue: RV battery model beta value.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.637
        * Flags: construct write read 
   
    * RvBatteryModelNumOfTerms: The number of terms of the infinite sum for estimating battery level.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t -2147483648:2147483647
        * Initial value: 10
        * Flags: construct write read 
   

TraceSources

    * RvBatteryModelBatteryLevel: RV battery model battery level.
%Callback signature: ns3::TracedValueCallback::Double

    * RvBatteryModelBatteryLifetime: RV battery model battery lifetime.
%Callback signature: ns3::TracedValueCallback::Time


Size of this type is 280 bytes (on a 64-bit architecture).

===============================================================

ns3::SameRoomPositionAllocator

Config Paths

ns3::SameRoomPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::SameRoomPositionAllocator"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::Scheduler

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::SeqTsHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::SequentialRandomVariable

Config Paths

ns3::SequentialRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::SequentialRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::SequentialRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::SequentialRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::SequentialRandomVariable"


Attributes

    * Min: The first value of the sequence.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Max: One more than the last value of the sequence.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Increment: The sequence random variable increment.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::RandomVariableStream>
        * Initial value: ns3::ConstantRandomVariable[Constant=1]
        * Flags: construct write read 
   
    * Consecutive: The number of times each member of the sequence is repeated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::ServiceFlowManager

Config Paths

ns3::ServiceFlowManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/ServiceFlowManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/ServiceFlowManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::ShannonSpectrumErrorModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::SimpleChannel

Config Paths

ns3::SimpleChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SimpleChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SimpleChannel"

    * "/ChannelList/[i]/$ns3::SimpleChannel"


Attributes

    * Delay: Transmission delay through the channel
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::SimpleDeviceEnergyModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

TraceSources

    * TotalEnergyConsumption: Total energy consumption of the radio device.
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::SimpleFrameCaptureModel

Config Paths

ns3::SimpleFrameCaptureModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/FrameCaptureModel/$ns3::SimpleFrameCaptureModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/FrameCaptureModel/$ns3::SimpleFrameCaptureModel"


Attributes

    * Margin: Reception is switched if the newly arrived frame has a power higher than this value above the frame currently being received (expressed in dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::SimpleNetDevice

Config Paths

ns3::SimpleNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice"


Attributes

    * ReceiveErrorModel: The receiver error model used to simulate packet loss
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ErrorModel>
        * Initial value: 0
        * Flags: construct write read 
   
    * PointToPointMode: The device is configured in Point to Point mode
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * TxQueue: A queue to use as the transmit queue in the device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<Packet>>
        * Initial value: ns3::DropTailQueue<Packet>
        * Flags: construct write read 
   
    * DataRate: The default data rate for point to point links. Zero means infinite
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 0bps
        * Flags: construct write read 
   

TraceSources

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 176 bytes (on a 64-bit architecture).

===============================================================

ns3::SimpleOfdmWimaxPhy

Config Paths

ns3::SimpleOfdmWimaxPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy/$ns3::SimpleOfdmWimaxPhy"


Attributes

    * NoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5
        * Flags: construct write read 
   
    * TxPower: Transmission power (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 30
        * Flags: construct write read 
   
    * G: This is the ratio of CP time to useful time.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.25
        * Flags: construct write read 
   
    * TxGain: Transmission gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * RxGain: Reception gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Nfft: FFT size
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 256:1024
        * Initial value: 256
        * Flags: construct write read 
   
    * TraceFilePath: Path to the directory containing SNR to block error rate files
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WimaxPhy

    * Channel: Wimax channel
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxChannel>
        * Initial value: 0
        * Flags: construct write read 
   
    * FrameDuration: The frame duration in seconds.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000.0ns
        * Flags: construct write read 
   
    * Frequency: The central frequency in KHz.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 1000000:11000000
        * Initial value: 5000000
        * Flags: construct write read 
   
    * Bandwidth: The channel bandwidth in Hz.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 5000000:30000000
        * Initial value: 10000000
        * Flags: construct write read 
   

TraceSources

    * Rx: Receive trace
%Callback signature: ns3::PacketBurst::TracedCallback

    * Tx: Transmit trace
%Callback signature: ns3::PacketBurst::TracedCallback

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
%Callback signature: ns3::PacketBurst::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel
%Callback signature: ns3::PacketBurst::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
%Callback signature: ns3::PacketBurst::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
%Callback signature: ns3::PacketBurst::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
%Callback signature: ns3::PacketBurst::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::PacketBurst::TracedCallback


Size of this type is 464 bytes (on a 64-bit architecture).

===============================================================

ns3::SimpleTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::SimpleUeComponentCarrierManager

Config Paths

ns3::SimpleUeComponentCarrierManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteUeNetDevice/LteUeComponentCarrierManager/$ns3::SimpleUeComponentCarrierManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 216 bytes (on a 64-bit architecture).

===============================================================

ns3::SimulatorImpl

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::SingleModelSpectrumChannel

Config Paths

ns3::SingleModelSpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/$ns3::SingleModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SingleModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SingleModelSpectrumChannel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/$ns3::SingleModelSpectrumChannel"

    * "/ChannelList/[i]/$ns3::SingleModelSpectrumChannel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::SpectrumChannel

    * MaxLossDb: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1e+09
        * Flags: construct write read 
   
    * PropagationLossModel: A pointer to the propagation loss model attached to this channel.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::PropagationLossModel>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::SpectrumChannel

    * Gain: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss
%Callback signature: ns3::SpectrumChannel::GainTracedCallback

    * PathLoss: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. 
%Callback signature: ns3::SpectrumChannel::LossTracedCallback

    * TxSigParams: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.
%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback


Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanFrag1

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanFragN

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanHc1

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanIphc

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanIpv6

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 8 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanNetDevice

Config Paths

ns3::SixLowPanNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SixLowPanNetDevice"


Attributes

    * Rfc6282: Use RFC6282 (IPHC) if true, RFC4944 (HC1) otherwise.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * OmitUdpChecksum: Omit the UDP checksum in IPHC compression.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * FragmentReassemblyListSize: The maximum size of the reassembly buffer (in packets). Zero meaning infinite.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * FragmentExpirationTimeout: When this timeout expires, the fragments will be cleared from the buffer.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000000000.0ns
        * Flags: construct write read 
   
    * CompressionThreshold: The minimum MAC layer payload size.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * ForceEtherType: Force a specific EtherType in L2 frames.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * EtherType: The specific EtherType to be used in L2 frames.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write read 
   

TraceSources

    * Tx: Send - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.
%Callback signature: ns3::SixLowPanNetDevice::RxTxTracedCallback

    * Rx: Receive - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.
%Callback signature: ns3::SixLowPanNetDevice::RxTxTracedCallback

    * Drop: Drop - DropReason, packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.
%Callback signature: ns3::SixLowPanNetDevice::DropTracedCallback


Size of this type is 248 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanNhcExtension

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 272 bytes (on a 64-bit architecture).

===============================================================

ns3::SixLowPanUdpNhcExtension

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::SllHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::SnrTag

Introspection did not find any typical Config paths.

Attributes

    * Snr: The snr of the last packet received
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::Socket

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::SocketFactory

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::SocketIpTtlTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::SocketIpv6HopLimitTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::SocketSetDontFragmentTag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::SpectrumAnalyzer

Introspection did not find any typical Config paths.

Attributes

    * Resolution: The length of the time interval over which the power spectral density of incoming signals is averaged
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000.0ns
        * Flags: construct write read 
   
    * NoisePowerSpectralDensity: The power spectral density of the measuring instrument noise, in Watt/Hz. Mostly useful to make spectrograms look more similar to those obtained by real devices. Defaults to the value for thermal noise at 300K.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 4.14e-21
        * Flags: construct write read 
   

TraceSources

    * AveragePowerSpectralDensityReport: Trace fired whenever a new value for the average Power Spectral Density is calculated
%Callback signature: ns3::SpectrumValue::TracedCallback


Size of this type is 136 bytes (on a 64-bit architecture).

===============================================================

ns3::SpectrumChannel

Config Paths

ns3::SpectrumChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel"


Attributes

    * MaxLossDb: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. 
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1e+09
        * Flags: construct write read 
   
    * PropagationLossModel: A pointer to the propagation loss model attached to this channel.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::PropagationLossModel>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

TraceSources

    * Gain: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss
%Callback signature: ns3::SpectrumChannel::GainTracedCallback

    * PathLoss: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. 
%Callback signature: ns3::SpectrumChannel::LossTracedCallback

    * TxSigParams: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.
%Callback signature: ns3::SpectrumChannel::SignalParametersTracedCallback


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::SpectrumErrorModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::SpectrumPhy

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::SpectrumPropagationLossModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::SpectrumWifiPhy

Config Paths

ns3::SpectrumWifiPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/$ns3::SpectrumWifiPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/$ns3::SpectrumWifiPhy"


Attributes

    * DisableWifiReception: Prevent Wi-Fi frame sync from ever happening
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WifiPhy

    * Frequency: The operating center frequency (MHz)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelWidth: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 5:160
        * Initial value: 20
        * Flags: construct write read 
   
    * ChannelNumber: If set to non-zero defined value, will control Frequency and ChannelWidth assignment
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:196
        * Initial value: 0
        * Flags: construct write read 
   
    * EnergyDetectionThreshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -96
        * Flags: construct write 
   
    * CcaMode1Threshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -99
        * Flags: construct write read 
   
    * TxGain: Transmission gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * RxGain: Reception gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * TxPowerLevels: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * TxPowerEnd: Maximum available transmission level (dbm).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 16.0206
        * Flags: construct write read 
   
    * TxPowerStart: Minimum available transmission level (dbm).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 16.0206
        * Flags: construct write read 
   
    * RxNoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 7
        * Flags: construct write 
   
    * State: The state of the PHY layer.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiPhyStateHelper>
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelSwitchDelay: Delay between two short frames transmitted on different frequencies.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +250000.0ns
        * Flags: construct write read 
   
    * Antennas: The number of antennas on the device.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxSupportedTxSpatialStreams: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxSupportedRxSpatialStreams: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * ShortGuardEnabled: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * GuardInterval: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time +400.0ns:+3200.0ns
        * Initial value: +3200.0ns
        * Flags: construct write read 
   
    * LdpcEnabled: Whether or not LDPC is enabled (not supported yet!).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * STBCEnabled: Whether or not STBC is enabled (not supported yet!).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * GreenfieldEnabled: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * ShortPlcpPreambleSupported: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * FrameCaptureModel: Ptr to an object that implements the frame capture model
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::FrameCaptureModel>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * SignalArrival: Signal arrival
%Callback signature: ns3::SpectrumWifiPhy::SignalArrivalCallback


TraceSources defined in parent class ns3::WifiPhy

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::Packet::TracedCallback

    * MonitorSnifferRx: Trace source simulating a wifi device in monitor mode sniffing all received frames
%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback

    * MonitorSnifferTx: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted
%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback


Size of this type is 672 bytes (on a 64-bit architecture).

===============================================================

ns3::SSLinkManager

Config Paths

ns3::SSLinkManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/LinkManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/LinkManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::SSManager

Config Paths

ns3::SSManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/SSManager"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/SSManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::SSScheduler

Config Paths

ns3::SSScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/SSScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/SSScheduler"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::StaWifiMac

Config Paths

ns3::StaWifiMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac/$ns3::StaWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::StaWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac/$ns3::StaWifiMac"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::StaWifiMac"


Attributes

    * ProbeRequestTimeout: The duration to actively probe the channel.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   
    * WaitBeaconTimeout: The duration to dwell on a channel while passively scanning for beacon
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +120000000.0ns
        * Flags: construct write read 
   
    * AssocRequestTimeout: The interval between two consecutive association request attempts.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * MaxMissedBeacons: Number of beacons which much be consecutively missed before we attempt to restart association.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * ActiveProbing: If true, we send probe requests. If false, we don't.NOTE: if more than one STA in your simulation is using active probing, you should enable it at a different simulation time for each STA, otherwise all the STAs will start sending probes at the same time resulting in collisions. See bug 1060 for more info.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::InfrastructureWifiMac

    * PcfSupported: This Boolean attribute is set to enable PCF support at this STA
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RegularWifiMac

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write 
   
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:11426
        * Initial value: 0
        * Flags: construct write 
   
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write 
   
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:64
        * Initial value: 0
        * Flags: construct write 
   
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write 
   
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Txop: The Txop object.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Txop>
        * Flags: read 
   
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::QosTxop>
        * Flags: read 
   

Attributes defined in parent class ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

TraceSources

    * Assoc: Associated with an access point.
%Callback signature: ns3::Mac48Address::TracedCallback

    * DeAssoc: Association with an access point lost.
%Callback signature: ns3::Mac48Address::TracedCallback

    * BeaconArrival: Time of beacons arrival from associated AP
%Callback signature: ns3::Time::TracedCallback


TraceSources defined in parent class ns3::RegularWifiMac

    * TxOkHeader: The header of successfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback

    * TxErrHeader: The header of unsuccessfully transmitted packet.
%Callback signature: ns3::WifiMacHeader::TracedCallback


TraceSources defined in parent class ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 568 bytes (on a 64-bit architecture).

===============================================================

ns3::SteadyStateRandomWaypointMobilityModel

Config Paths

ns3::SteadyStateRandomWaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::SteadyStateRandomWaypointMobilityModel"


Attributes

    * MinSpeed: Minimum speed value, [m/s]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.3
        * Flags: construct write read 
   
    * MaxSpeed: Maximum speed value, [m/s]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.7
        * Flags: construct write read 
   
    * MinPause: Minimum pause value, [s]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * MaxPause: Maximum pause value, [s]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * MinX: Minimum X value of traveling region, [m]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxX: Maximum X value of traveling region, [m]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MinY: Minimum Y value of traveling region, [m]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxY: Maximum Y value of traveling region, [m]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Z: Z value of traveling region (fixed), [m]
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 296 bytes (on a 64-bit architecture).

===============================================================

ns3::SubscriberStationNetDevice

Config Paths

ns3::SubscriberStationNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice"


Attributes

    * BasicConnection: Basic connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   
    * PrimaryConnection: Primary connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   
    * LostDlMapInterval: Time since last received DL-MAP message before downlink synchronization is considered lost. Maximum is 600ms
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * LostUlMapInterval: Time since last received UL-MAP before uplink synchronization is considered lost, maximum is 600.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * MaxDcdInterval: Maximum time between transmission of DCD messages. Maximum is 10s
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * MaxUcdInterval: Maximum time between transmission of UCD messages. Maximum is 10s
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * IntervalT1: Wait for DCD timeout. Maximum is 5*maxDcdInterval
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000000.0ns
        * Flags: construct write read 
   
    * IntervalT2: Wait for broadcast ranging timeout, i.e., wait for initial ranging opportunity. Maximum is 5*Ranging interval
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * IntervalT3: ranging Response reception timeout following the transmission of a ranging request. Maximum is 200ms
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   
    * IntervalT7: wait for DSA/DSC/DSD Response timeout. Maximum is 1s
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * IntervalT12: Wait for UCD descriptor.Maximum is 5*MaxUcdInterval
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * IntervalT20: Time the SS searches for preambles on a given channel. Minimum is 2 MAC frames
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * IntervalT21: time the SS searches for (decodable) DL-MAP on a given channel
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write read 
   
    * MaxContentionRangingRetries: Number of retries on contention Ranging Requests
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:16
        * Initial value: 16
        * Flags: construct write read 
   
    * SSScheduler: The ss scheduler attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::SSScheduler>
        * Initial value: 0
        * Flags: construct write read 
   
    * LinkManager: The ss link manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::SSLinkManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * Classifier: The ss classifier attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::IpcsClassifier>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::WimaxNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:1500
        * Initial value: 1400
        * Flags: construct write read 
   
    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxPhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * Channel: The channel attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxChannel>
        * Initial value: 0
        * Flags: construct write read 
   
    * RTG: receive/transmit transition gap.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:120
        * Initial value: 0
        * Flags: construct write read 
   
    * TTG: transmit/receive transition gap.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:120
        * Initial value: 0
        * Flags: construct write read 
   
    * ConnectionManager: The connection manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ConnectionManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * BurstProfileManager: The burst profile manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BurstProfileManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * BandwidthManager: The bandwidth manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BandwidthManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * InitialRangingConnection: Initial ranging connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   
    * BroadcastConnection: Broadcast connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * SSTxDrop: A packet has been dropped in the MAC layer before being queued for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * SSPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * SSRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * SSRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


TraceSources defined in parent class ns3::WimaxNetDevice

    * Rx: Receive trace
%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback

    * Tx: Transmit trace
%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback


Size of this type is 800 bytes (on a 64-bit architecture).

===============================================================

ns3::Synchronizer

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::Tag

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 8 bytes (on a 64-bit architecture).

===============================================================

ns3::TapBridge

Config Paths

ns3::TapBridge is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::TapBridge"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * DeviceName: The name of the tap device to create.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 
        * Flags: construct write read 
   
    * Gateway: The IP address of the default gateway to assign to the host machine, when in ConfigureLocal mode.
  
        * Set with class:  Ipv4AddressValue
        * Underlying type:  Ipv4Address
        * Initial value: 255.255.255.255
        * Flags: construct write read 
   
    * IpAddress: The IP address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered IP address of the simulated device.
  
        * Set with class:  Ipv4AddressValue
        * Underlying type:  Ipv4Address
        * Initial value: 255.255.255.255
        * Flags: construct write read 
   
    * MacAddress: The MAC address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
  
        * Set with class:  Mac48AddressValue
        * Underlying type:  Mac48Address
        * Initial value: ff:ff:ff:ff:ff:ff
        * Flags: construct write read 
   
    * Netmask: The network mask to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
  
        * Set with class:  Ipv4MaskValue
        * Underlying type:  Ipv4Mask
        * Initial value: 255.255.255.255
        * Flags: construct write read 
   
    * Start: The simulation time at which to spin up the tap device read thread.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: The simulation time at which to tear down the tap device read thread.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Mode: The operating and configuration mode to use.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: UseLocal
        * Flags: construct write 
   

No TraceSources are defined for this type.

Size of this type is 240 bytes (on a 64-bit architecture).

===============================================================

ns3::TbfQueueDisc

Introspection did not find any typical Config paths.

Attributes

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 1000p
        * Flags: construct write read 
   
    * Burst: Size of the first bucket in bytes
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 125000
        * Flags: construct write 
   
    * Mtu: Size of the second bucket in bytes. If null, it is initialized to the MTU of the attached NetDevice (if any)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write 
   
    * Rate: Rate at which tokens enter the first bucket in bps or Bps.
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 1000000bps
        * Flags: construct write 
   
    * PeakRate: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 0bps
        * Flags: construct write 
   

Attributes defined in parent class ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 64
        * Flags: construct write read 
   
    * InternalQueueList: The list of internal queues.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::Queue<QueueDiscItem>>
        * Flags: read 
   
    * PacketFilterList: The list of packet filters.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::PacketFilter>
        * Flags: read 
   
    * QueueDiscClassList: The list of queue disc classes.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDiscClass>
        * Flags: read 
   

TraceSources

    * TokensInFirstBucket: Number of First Bucket Tokens in bytes
%Callback signature: ns3::TracedValueCallback::Uint32

    * TokensInSecondBucket: Number of Second Bucket Tokens in bytes
%Callback signature: ns3::TracedValueCallback::Uint32


TraceSources defined in parent class ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Requeue: Requeue a packet in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Drop: Drop a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * Mark: Mark a packet stored in the queue disc
%Callback signature: ns3::QueueDiscItem::TracedCallback

    * PacketsInQueue: Number of packets currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue disc
%Callback signature: ns3::TracedValueCallback::Uint32

    * SojournTime: Sojourn time of the last packet dequeued from the queue disc
%Callback signature: ns3::Time::TracedCallback


Size of this type is 1008 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpBic

Introspection did not find any typical Config paths.

Attributes

    * FastConvergence: Turn on/off fast convergence.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * Beta: Beta for multiplicative decrease
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1.79769e+308
        * Initial value: 0.8
        * Flags: construct write read 
   
    * MaxIncr: Limit on increment allowed during binary search
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 1:4294967295
        * Initial value: 16
        * Flags: construct write read 
   
    * LowWnd: Threshold window size (in segments) for engaging BIC response
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 14
        * Flags: construct write read 
   
    * SmoothPart: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 1:4294967295
        * Initial value: 5
        * Flags: construct write read 
   
    * BinarySearchCoefficient: Inverse of the coefficient for the binary search. Default 4, as in Linux
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 2:255
        * Initial value: 4
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpClassicRecovery

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpCongestionOps

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpHighSpeed

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpHtcp

Introspection did not find any typical Config paths.

Attributes

    * DefaultBackoff: The default AIMD backoff factor
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.5
        * Flags: construct write read 
   
    * ThroughputRatio: Threshold value for updating beta
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.2
        * Flags: construct write read 
   
    * DeltaL: Delta_L parameter in increase function
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 120 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpHybla

Introspection did not find any typical Config paths.

Attributes

    * RRTT: Reference RTT
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +50000000.0ns
        * Flags: construct write read 
   

TraceSources

    * Rho: Rho parameter of Hybla
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpIllinois

Introspection did not find any typical Config paths.

Attributes

    * AlphaMin: Minimum alpha threshold
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.3
        * Flags: construct write read 
   
    * AlphaMax: Maximum alpha threshold
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * AlphaBase: Alpha base threshold
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * BetaMin: Minimum beta threshold
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.125
        * Flags: construct write read 
   
    * BetaMax: Maximum beta threshold
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.5
        * Flags: construct write read 
   
    * BetaBase: Beta base threshold
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.5
        * Flags: construct write read 
   
    * WinThresh: Window threshold
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   
    * Theta: Theta threshold
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 5
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpL4Protocol

Config Paths

ns3::TcpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::TcpL4Protocol"


Attributes

    * RttEstimatorType: Type of RttEstimator objects.
  
        * Set with class:  TypeIdValue
        * Underlying type:  TypeId
        * Initial value: ns3::RttMeanDeviation
        * Flags: construct write read 
   
    * SocketType: Socket type of TCP objects.
  
        * Set with class:  TypeIdValue
        * Underlying type:  TypeId
        * Initial value: ns3::TcpNewReno
        * Flags: construct write read 
   
    * RecoveryType: Recovery type of TCP objects.
  
        * Set with class:  TypeIdValue
        * Underlying type:  TypeId
        * Initial value: ns3::TcpClassicRecovery
        * Flags: construct write read 
   
    * SocketList: The list of sockets associated to this protocol.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::TcpSocketBase>
        * Flags: read 
   

Attributes defined in parent class ns3::IpL4Protocol

    * ProtocolNumber: The IP protocol number.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpLedbat

Introspection did not find any typical Config paths.

Attributes

    * TargetDelay: Targeted Queue Delay
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +100000000.0ns
        * Flags: construct write read 
   
    * BaseHistoryLen: Number of Base delay samples
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * NoiseFilterLen: Number of Current delay samples
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write read 
   
    * Gain: Offset Gain
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * SSParam: Possibility of Slow Start
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: yes
        * Flags: construct write 
   
    * MinCwnd: Minimum cWnd for Ledbat
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpLp

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpNewReno

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOption

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionEnd

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionMSS

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionNOP

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionSack

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionSackPermitted

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionTS

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionUnknown

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpOptionWinScale

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpPrrRecovery

Introspection did not find any typical Config paths.

Attributes

    * ReductionBound: Type of Reduction Bound
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: SSRB
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpRecoveryOps

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpRxBuffer

Config Paths

ns3::TcpRxBuffer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/RxBuffer"


No Attributes are defined for this type.

TraceSources

    * NextRxSequence: Next sequence number expected (RCV.NXT)
%Callback signature: ns3::SequenceNumber32TracedValueCallback


Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpScalable

Introspection did not find any typical Config paths.

Attributes

    * AIFactor: Additive Increase Factor
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 50
        * Flags: construct write read 
   
    * MDFactor: Multiplicative Decrease Factor
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.125
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpSocket

Introspection did not find any typical Config paths.

Attributes

    * SndBufSize: TcpSocket maximum transmit buffer size (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 131072
        * Flags: construct write read 
   
    * RcvBufSize: TcpSocket maximum receive buffer size (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 131072
        * Flags: construct write read 
   
    * SegmentSize: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 536
        * Flags: construct write read 
   
    * InitialSlowStartThreshold: TCP initial slow start threshold (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4294967295
        * Flags: construct write read 
   
    * InitialCwnd: TCP initial congestion window size (segments)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * ConnTimeout: TCP retransmission timeout when opening connection (seconds)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3000000000.0ns
        * Flags: construct write read 
   
    * ConnCount: Number of connection attempts (SYN retransmissions) before returning failure
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 6
        * Flags: construct write read 
   
    * DataRetries: Number of data retransmission attempts
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 6
        * Flags: construct write read 
   
    * DelAckTimeout: Timeout value for TCP delayed acks, in seconds
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   
    * DelAckCount: Number of packets to wait before sending a TCP ack
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * TcpNoDelay: Set to true to disable Nagle's algorithm
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * PersistTimeout: Persist timeout to probe for rx window
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +6000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpSocketBase

Config Paths

ns3::TcpSocketBase is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]"


Attributes

    * MaxSegLifetime: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1.79769e+308
        * Initial value: 120
        * Flags: construct write read 
   
    * MaxWindowSize: Max size of advertised window
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 65535
        * Flags: construct write read 
   
    * IcmpCallback: Callback invoked whenever an icmp error is received on this socket.
  
        * Set with class:  CallbackValue
        * Underlying type:  Callback
        * Initial value: 0
        * Flags: construct write read 
   
    * IcmpCallback6: Callback invoked whenever an icmpv6 error is received on this socket.
  
        * Set with class:  CallbackValue
        * Underlying type:  Callback
        * Initial value: 0
        * Flags: construct write read 
   
    * WindowScaling: Enable or disable Window Scaling option
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * Sack: Enable or disable Sack option
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * Timestamp: Enable or disable Timestamp option
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * MinRto: Minimum retransmit timeout value
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * ClockGranularity: Clock Granularity used in RTO calculations
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000.0ns
        * Flags: construct write read 
   
    * TxBuffer: TCP Tx buffer
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::TcpTxBuffer>
        * Flags: read 
   
    * RxBuffer: TCP Rx buffer
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::TcpRxBuffer>
        * Flags: read 
   
    * ReTxThreshold: Threshold for fast retransmit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   
    * LimitedTransmit: Enable limited transmit
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * EcnMode: Determines the mode of ECN
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: NoEcn
        * Flags: construct write read 
   

Attributes defined in parent class ns3::TcpSocket

    * SndBufSize: TcpSocket maximum transmit buffer size (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 131072
        * Flags: construct write read 
   
    * RcvBufSize: TcpSocket maximum receive buffer size (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 131072
        * Flags: construct write read 
   
    * SegmentSize: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 536
        * Flags: construct write read 
   
    * InitialSlowStartThreshold: TCP initial slow start threshold (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4294967295
        * Flags: construct write read 
   
    * InitialCwnd: TCP initial congestion window size (segments)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * ConnTimeout: TCP retransmission timeout when opening connection (seconds)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3000000000.0ns
        * Flags: construct write read 
   
    * ConnCount: Number of connection attempts (SYN retransmissions) before returning failure
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 6
        * Flags: construct write read 
   
    * DataRetries: Number of data retransmission attempts
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 6
        * Flags: construct write read 
   
    * DelAckTimeout: Timeout value for TCP delayed acks, in seconds
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   
    * DelAckCount: Number of packets to wait before sending a TCP ack
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * TcpNoDelay: Set to true to disable Nagle's algorithm
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * PersistTimeout: Persist timeout to probe for rx window
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +6000000000.0ns
        * Flags: construct write read 
   

TraceSources

    * RTO: Retransmission timeout
%Callback signature: ns3::TracedValueCallback::Time

    * RTT: Last RTT sample
%Callback signature: ns3::TracedValueCallback::Time

    * NextTxSequence: Next sequence number to send (SND.NXT)
%Callback signature: ns3::SequenceNumber32TracedValueCallback

    * HighestSequence: Highest sequence number ever sent in socket's life time
%Callback signature: ns3::TracedValueCallback::SequenceNumber32

    * State: TCP state
%Callback signature: ns3::TcpStatesTracedValueCallback

    * CongState: TCP Congestion machine state
%Callback signature: ns3::TcpSocketState::TcpCongStatesTracedValueCallback

    * EcnState: Trace ECN state change of socket
%Callback signature: ns3::TcpSocketState::EcnStatesTracedValueCallback

    * AdvWND: Advertised Window Size
%Callback signature: ns3::TracedValueCallback::Uint32

    * RWND: Remote side's flow control window
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInFlight: Socket estimation of bytes in flight
%Callback signature: ns3::TracedValueCallback::Uint32

    * HighestRxSequence: Highest sequence number received from peer
%Callback signature: ns3::TracedValueCallback::SequenceNumber32

    * HighestRxAck: Highest ack received from peer
%Callback signature: ns3::TracedValueCallback::SequenceNumber32

    * CongestionWindow: The TCP connection's congestion window
%Callback signature: ns3::TracedValueCallback::Uint32

    * CongestionWindowInflated: The TCP connection's congestion window inflates as in older RFC
%Callback signature: ns3::TracedValueCallback::Uint32

    * SlowStartThreshold: TCP slow start threshold (bytes)
%Callback signature: ns3::TracedValueCallback::Uint32

    * Tx: Send tcp packet to IP protocol
%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback

    * Rx: Receive tcp packet from IP protocol
%Callback signature: ns3::TcpSocketBase::TcpTxRxTracedCallback

    * EcnEchoSeq: Sequence of last received ECN Echo
%Callback signature: ns3::SequenceNumber32TracedValueCallback

    * EcnCeSeq: Sequence of last received CE 
%Callback signature: ns3::SequenceNumber32TracedValueCallback

    * EcnCwrSeq: Sequence of last received CWR
%Callback signature: ns3::SequenceNumber32TracedValueCallback


Size of this type is 1080 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpSocketFactory

Config Paths

ns3::TcpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::TcpSocketFactory"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpSocketState

Introspection did not find any typical Config paths.

Attributes

    * EnablePacing: Enable Pacing
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * MaxPacingRate: Set Max Pacing Rate
  
        * Set with class:  DataRateValue
        * Underlying type:  DataRate
        * Initial value: 4000000000bps
        * Flags: construct write read 
   

TraceSources

    * CongestionWindow: The TCP connection's congestion window
%Callback signature: ns3::TracedValueCallback::Uint32

    * CongestionWindowInflated: The TCP connection's inflated congestion window
%Callback signature: ns3::TracedValueCallback::Uint32

    * SlowStartThreshold: TCP slow start threshold (bytes)
%Callback signature: ns3::TracedValueCallback::Uint32

    * CongState: TCP Congestion machine state
%Callback signature: ns3::TracedValueCallback::TcpCongState

    * EcnState: Trace ECN state change of socket
%Callback signature: ns3::TracedValueCallback::EcnState

    * HighestSequence: Highest sequence number received from peer
%Callback signature: ns3::TracedValueCallback::SequenceNumber32

    * NextTxSequence: Next sequence number to send (SND.NXT)
%Callback signature: ns3::TracedValueCallback::SequenceNumber32

    * BytesInFlight: The TCP connection's congestion window
%Callback signature: ns3::TracedValueCallback::Uint32

    * RTT: Last RTT sample
%Callback signature: ns3::TracedValueCallback::Time


Size of this type is 304 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpTxBuffer

Config Paths

ns3::TcpTxBuffer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::TcpL4Protocol/SocketList/[i]/TxBuffer"


No Attributes are defined for this type.

TraceSources

    * UnackSequence: First unacknowledged sequence number (SND.UNA)
%Callback signature: ns3::SequenceNumber32TracedValueCallback


Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpVegas

Introspection did not find any typical Config paths.

Attributes

    * Alpha: Lower bound of packets in network
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write read 
   
    * Beta: Upper bound of packets in network
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write read 
   
    * Gamma: Limit on increase
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpVeno

Introspection did not find any typical Config paths.

Attributes

    * Beta: Threshold for congestion detection
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpWestwood

Introspection did not find any typical Config paths.

Attributes

    * FilterType: Use this to choose no filter or Tustin's approximation filter
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Tustin
        * Flags: construct write read 
   
    * ProtocolType: Use this to let the code run as Westwood or WestwoodPlus
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Westwood
        * Flags: construct write read 
   

TraceSources

    * EstimatedBW: The estimated bandwidth
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::TcpYeah

Introspection did not find any typical Config paths.

Attributes

    * Alpha: Maximum backlog allowed at the bottleneck queue
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 80
        * Flags: construct write read 
   
    * Gamma: Fraction of queue to be removed per RTT
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * Delta: Log minimum fraction of cwnd to be removed on loss
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 3
        * Flags: construct write read 
   
    * Epsilon: Log maximum fraction to be removed on early decongestion
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * Phy: Maximum delta from base
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 8
        * Flags: construct write read 
   
    * Rho: Minimum # of consecutive RTT to consider competition on loss
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 16
        * Flags: construct write read 
   
    * Zeta: Minimum # of state switches to reset m_renoCount
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 50
        * Flags: construct write read 
   
    * StcpAiFactor: STCP additive increase factor
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 120 bytes (on a 64-bit architecture).

===============================================================

ns3::TdBetFfMacScheduler

Config Paths

ns3::TdBetFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdBetFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1352 bytes (on a 64-bit architecture).

===============================================================

ns3::TdMtFfMacScheduler

Config Paths

ns3::TdMtFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdMtFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1344 bytes (on a 64-bit architecture).

===============================================================

ns3::TdTbfqFfMacScheduler

Config Paths

ns3::TdTbfqFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TdTbfqFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * DebtLimit: Flow debt limit (default -625000 bytes)
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t -2147483648:2147483647
        * Initial value: -625000
        * Flags: construct write read 
   
    * CreditLimit: Flow credit limit (default 625000 bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 625000
        * Flags: construct write read 
   
    * TokenPoolSize: The maximum value of flow token pool (default 1 bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * CreditableThreshold: Threshold of flow credit (default 0 bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1368 bytes (on a 64-bit architecture).

===============================================================

ns3::ThreeGppHttpClient

Config Paths

ns3::ThreeGppHttpClient is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient"


Attributes

    * Variables: Variable collection, which is used to control e.g. timing and HTTP request size.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ThreeGppHttpVariables>
        * Initial value: 0
        * Flags: construct write read 
   
    * RemoteServerAddress: The address of the destination server.
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * RemoteServerPort: The destination port of the outbound packets.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 80
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * ConnectionEstablished: Connection to the destination web server has been established.
%Callback signature: ns3::ThreeGppHttpClient::TracedCallback

    * ConnectionClosed: Connection to the destination web server is closed.
%Callback signature: ns3::ThreeGppHttpClient::TracedCallback

    * Tx: General trace for sending a packet of any kind.
%Callback signature: ns3::Packet::TracedCallback

    * TxMainObjectRequest: Sent a request for a main object.
%Callback signature: ns3::Packet::TracedCallback

    * TxEmbeddedObjectRequest: Sent a request for an embedded object.
%Callback signature: ns3::Packet::TracedCallback

    * RxMainObjectPacket: A packet of main object has been received.
%Callback signature: ns3::Packet::TracedCallback

    * RxMainObject: Received a whole main object. Header is included.
%Callback signature: ns3::ThreeGppHttpClient::TracedCallback

    * RxEmbeddedObjectPacket: A packet of embedded object has been received.
%Callback signature: ns3::Packet::TracedCallback

    * RxEmbeddedObject: Received a whole embedded object. Header is included.
%Callback signature: ns3::ThreeGppHttpClient::TracedCallback

    * Rx: General trace for receiving a packet of any kind.
%Callback signature: ns3::Packet::PacketAddressTracedCallback

    * RxDelay: General trace of delay for receiving a complete object.
%Callback signature: ns3::Application::DelayAddressCallback

    * RxRtt: General trace of round trip delay time for receiving a complete object.
%Callback signature: ns3::Application::DelayAddressCallback

    * StateTransition: Trace fired upon every HTTP client state transition.
%Callback signature: ns3::Application::StateTransitionCallback


Size of this type is 472 bytes (on a 64-bit architecture).

===============================================================

ns3::ThreeGppHttpHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::ThreeGppHttpServer

Config Paths

ns3::ThreeGppHttpServer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer"


Attributes

    * Variables: Variable collection, which is used to control e.g. processing and object generation delays.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ThreeGppHttpVariables>
        * Initial value: 0
        * Flags: construct write read 
   
    * LocalAddress: The local address of the server, i.e., the address on which to bind the Rx socket.
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * LocalPort: Port on which the application listen for incoming packets.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 80
        * Flags: construct write read 
   
    * Mtu: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * ConnectionEstablished: Connection to a remote web client has been established.
%Callback signature: ns3::HttpServer::ConnectionEstablishedCallback

    * MainObject: A main object has been generated.
%Callback signature: ns3::HttpServer::HttpObjectCallback

    * EmbeddedObject: An embedded object has been generated.
%Callback signature: ns3::HttpServer::HttpObjectCallback

    * Tx: A packet has been sent.
%Callback signature: ns3::Packet::TracedCallback

    * Rx: A packet has been received.
%Callback signature: ns3::Packet::PacketAddressTracedCallback

    * RxDelay: A packet has been received with delay information.
%Callback signature: ns3::Application::DelayAddressCallback

    * StateTransition: Trace fired upon every HTTP client state transition.
%Callback signature: ns3::Application::StateTransitionCallback


Size of this type is 280 bytes (on a 64-bit architecture).

===============================================================

ns3::ThreeGppHttpVariables

Config Paths

ns3::ThreeGppHttpVariables is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpClient/Variables"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::ThreeGppHttpServer/Variables"


Attributes

    * RequestSize: The constant size of HTTP request packet (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 328
        * Flags: construct write 
   
    * MainObjectGenerationDelay: The constant time needed by HTTP server to generate a main object as a response.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write 
   
    * MainObjectSizeMean: The mean of main object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10710
        * Flags: construct write 
   
    * MainObjectSizeStdDev: The standard deviation of main object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 25032
        * Flags: construct write 
   
    * MainObjectSizeMin: The minimum value of main object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 22:4294967295
        * Initial value: 100
        * Flags: construct write read 
   
    * MainObjectSizeMax: The maximum value of main object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2000000
        * Flags: construct write read 
   
    * EmbeddedObjectGenerationDelay: The constant time needed by HTTP server to generate an embedded object as a response.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write 
   
    * EmbeddedObjectSizeMean: The mean of embedded object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7758
        * Flags: construct write 
   
    * EmbeddedObjectSizeStdDev: The standard deviation of embedded object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 126168
        * Flags: construct write 
   
    * EmbeddedObjectSizeMin: The minimum value of embedded object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 22:4294967295
        * Initial value: 50
        * Flags: construct write read 
   
    * EmbeddedObjectSizeMax: The maximum value of embedded object sizes (in bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2000000
        * Flags: construct write read 
   
    * NumOfEmbeddedObjectsMax: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 55
        * Flags: construct write 
   
    * NumOfEmbeddedObjectsShape: The shape parameter of Pareto distribution for the number of embedded objects per web page.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.1
        * Flags: construct write 
   
    * NumOfEmbeddedObjectsScale: The scale parameter of Pareto distribution for the number of embedded objects per web page.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 2
        * Flags: construct write 
   
    * ReadingTimeMean: The mean of reading time.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +30000000000.0ns
        * Flags: construct write 
   
    * ParsingTimeMean: The mean of parsing time.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +130000000.0ns
        * Flags: construct write 
   
    * LowMtuSize: The lower MTU size.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 536
        * Flags: construct write read 
   
    * HighMtuSize: The higher MTU size.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1460
        * Flags: construct write read 
   
    * HighMtuProbability: The probability that higher MTU size is used.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0.76
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::ThreeLogDistancePropagationLossModel

Config Paths

ns3::ThreeLogDistancePropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::ThreeLogDistancePropagationLossModel"


Attributes

    * Distance0: Beginning of the first (near) distance field
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Distance1: Beginning of the second (middle) distance field.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 200
        * Flags: construct write read 
   
    * Distance2: Beginning of the third (far) distance field.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 500
        * Flags: construct write read 
   
    * Exponent0: The exponent for the first field.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.9
        * Flags: construct write read 
   
    * Exponent1: The exponent for the second field.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3.8
        * Flags: construct write read 
   
    * Exponent2: The exponent for the third field.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3.8
        * Flags: construct write read 
   
    * ReferenceLoss: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 46.6777
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::TimeProbe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The double valued (units of seconds) probe output
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::TimeSeriesAdaptor

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The current simulation time versus the current value converted to a double
%Callback signature: ns3::TimeSeriesAdaptor::OutputTracedCallback


Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::TopologyReader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::TraceFadingLossModel

Introspection did not find any typical Config paths.

Attributes

    * TraceFilename: Name of file to load a trace from.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 
        * Flags: construct write 
   
    * TraceLength: The total length of the fading trace (default value 10 s.)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000000.0ns
        * Flags: construct write 
   
    * SamplesNum: The number of samples the trace is made of (default 10000)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10000
        * Flags: construct write read 
   
    * WindowSize: The size of the window for the fading trace (default value 0.5 s.)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write read 
   
    * RbNum: The number of RB the trace is made of (default 100)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 100
        * Flags: construct write read 
   
    * RngStreamSetSize: The number of RNG streams reserved for the fading model. The maximum number of streams that are needed for an LTE FDD scenario is 2 * numUEs * numeNBs.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint64_t 0:18446744073709551615
        * Initial value: 200000
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 248 bytes (on a 64-bit architecture).

===============================================================

ns3::TrafficControlLayer

Introspection did not find any typical Config paths.

Attributes

    * RootQueueDiscList: The list of root queue discs associated to this Traffic Control layer.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::QueueDisc>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 112 bytes (on a 64-bit architecture).

===============================================================

ns3::Trailer

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 8 bytes (on a 64-bit architecture).

===============================================================

ns3::TriangularRandomVariable

Config Paths

ns3::TriangularRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::TriangularRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::TriangularRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::TriangularRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::TriangularRandomVariable"


Attributes

    * Mean: The mean value for the triangular distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.5
        * Flags: construct write read 
   
    * Min: The lower bound on the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Max: The upper bound on the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::TtaFfMacScheduler

Config Paths

ns3::TtaFfMacScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/ComponentCarrierMap/[i]/FfMacScheduler/$ns3::TtaFfMacScheduler"


Attributes

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: ALL_UL_CQI
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 1344 bytes (on a 64-bit architecture).

===============================================================

ns3::TvSpectrumTransmitter

Introspection did not find any typical Config paths.

Attributes

    * TvType: The type of TV transmitter/modulation to be used.
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: 8vsb
        * Flags: construct write read 
   
    * StartFrequency: The lower end frequency (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1.79769e+308
        * Initial value: 5e+08
        * Flags: construct write read 
   
    * ChannelBandwidth: The bandwidth (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1.79769e+308
        * Initial value: 6e+06
        * Flags: construct write read 
   
    * BasePsd: The base power spectral density (in dBm/Hz) of the TV transmitter's transmitted spectrum. Base PSD is the maximum PSD of the spectrum excluding pilots. For analog and COFDM transmitters this is the maximum PSD, but for 8-VSB transmitters this is the maximum PSD of the main signal spectrum (flat-top segment) since the pilot actually has the maximum PSD overall.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 20
        * Flags: construct write read 
   
    * Antenna: The AntennaModel to be used. Allows classes inherited from ns3::AntennaModel. Defaults to ns3::IsotropicAntennaModel.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::AntennaModel>
        * Initial value: ns3::IsotropicAntennaModel
        * Flags: construct write read 
   
    * StartingTime: The time point after the simulation begins in which the TV transmitter will begin transmitting.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * TransmitDuration: The duration of time that the TV transmitter will transmit for.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 128 bytes (on a 64-bit architecture).

===============================================================

ns3::TwoRayGroundPropagationLossModel

Config Paths

ns3::TwoRayGroundPropagationLossModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::TwoRayGroundPropagationLossModel"


Attributes

    * Frequency: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 5.15e+09
        * Flags: construct write read 
   
    * SystemLoss: The system loss
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * MinDistance: The distance under which the propagation model refuses to give results (m)
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.5
        * Flags: construct write read 
   
    * HeightAboveZ: The height of the antenna (m) above the node's Z coordinate
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::Txop

Config Paths

ns3::Txop is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/Txop"


Attributes

    * MinCw: The minimum value of the contention window.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 15
        * Flags: construct write read 
   
    * MaxCw: The maximum value of the contention window.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1023
        * Flags: construct write read 
   
    * Aifsn: The AIFSN: the default value conforms to non-QOS.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 2
        * Flags: construct write read 
   
    * TxopLimit: The TXOP limit: the default value conforms to non-QoS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Queue: The WifiMacQueue object
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiMacQueue>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 232 bytes (on a 64-bit architecture).

===============================================================

ns3::UanChannel

Config Paths

ns3::UanChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel"

    * "/ChannelList/[i]/$ns3::UanChannel"


Attributes

    * PropagationModel: A pointer to the propagation model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPropModel>
        * Initial value: ns3::UanPropModelIdeal
        * Flags: construct write read 
   
    * NoiseModel: A pointer to the model of the channel ambient noise.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanNoiseModel>
        * Initial value: ns3::UanNoiseModelDefault
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::UanHeaderCommon

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::UanHeaderRcAck

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::UanHeaderRcCts

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::UanHeaderRcCtsGlobal

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanHeaderRcData

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 24 bytes (on a 64-bit architecture).

===============================================================

ns3::UanHeaderRcRts

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanMac

Config Paths

ns3::UanMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::UanMacAloha

Config Paths

ns3::UanMacAloha is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacAloha"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::UanMacCw

Config Paths

ns3::UanMacCw is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacCw"


Attributes

    * CW: The MAC parameter CW.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * SlotTime: Time slot duration for MAC backoff.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +20000000.0ns
        * Flags: construct write read 
   

TraceSources

    * Enqueue: A packet arrived at the MAC for transmission.
%Callback signature: ns3::UanMacCw::QueueTracedCallback

    * Dequeue: A was passed down to the PHY from the MAC.
%Callback signature: ns3::UanMacCw::QueueTracedCallback

    * RX: A packet was destined for this MAC and was received.
%Callback signature: ns3::UanMac::PacketModeTracedCallback


Size of this type is 248 bytes (on a 64-bit architecture).

===============================================================

ns3::UanMacRc

Config Paths

ns3::UanMacRc is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacRc"


Attributes

    * RetryRate: Number of retry attempts per second (of RTS/GWPING).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.2
        * Flags: construct write read 
   
    * MaxFrames: Maximum number of frames to include in a single RTS.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * QueueLimit: Maximum packets to queue at MAC.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * SIFS: Spacing to give between frames (this should match gateway).
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   
    * NumberOfRates: Number of rate divisions supported by each PHY.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 0
        * Flags: construct write read 
   
    * MinRetryRate: Smallest allowed RTS retry rate.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.01
        * Flags: construct write read 
   
    * RetryStep: Retry rate increment.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.01
        * Flags: construct write read 
   
    * MaxPropDelay: Maximum possible propagation delay to gateway.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000000000.0ns
        * Flags: construct write read 
   

TraceSources

    * Enqueue: A  (data) packet arrived at MAC for transmission.
%Callback signature: ns3::UanMacRc::QueueTracedCallback

    * Dequeue: A  (data) packet was passed down to PHY from MAC.
%Callback signature: ns3::UanMacRc::QueueTracedCallback

    * RX: A packet was destined for and received at this MAC layer.
%Callback signature: ns3::UanMac::PacketModeTracedCallback


Size of this type is 320 bytes (on a 64-bit architecture).

===============================================================

ns3::UanMacRcGw

Config Paths

ns3::UanMacRcGw is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Mac/$ns3::UanMacRcGw"


Attributes

    * MaxReservations: Maximum number of reservations to accept per cycle.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * NumberOfRates: Number of rates per Phy layer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1023
        * Flags: construct write read 
   
    * MaxPropDelay: Maximum propagation delay between gateway and non-gateway nodes.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000000000.0ns
        * Flags: construct write read 
   
    * SIFS: Spacing between frames to account for timing error and processing delay.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +200000000.0ns
        * Flags: construct write read 
   
    * NumberOfNodes: Number of non-gateway nodes in this gateway's neighborhood.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 10
        * Flags: construct write read 
   
    * MinRetryRate: Smallest allowed RTS retry rate.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.01
        * Flags: construct write read 
   
    * RetryStep: Retry rate increment.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.01
        * Flags: construct write read 
   
    * TotalRate: Total available channel rate in bps (for a single channel, without splitting reservation channel).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4096
        * Flags: construct write read 
   
    * RateStep: Increments available for rate assignment in bps.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write read 
   
    * FrameSize: Size of data frames in bytes.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1000
        * Flags: construct write read 
   

TraceSources

    * RX: A packet was destined for and received at this MAC layer.
%Callback signature: ns3::UanMac::PacketModeTracedCallback

    * Cycle: Trace cycle statistics.
%Callback signature: ns3::UanMacRcGw::CycleCallback


Size of this type is 400 bytes (on a 64-bit architecture).

===============================================================

ns3::UanNetDevice

Config Paths

ns3::UanNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice"


Attributes

    * Channel: The channel attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanChannel>
        * Initial value: 0
        * Flags: construct write read 
   
    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * Mac: The MAC layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanMac>
        * Initial value: 0
        * Flags: construct write read 
   
    * Transducer: The Transducer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanTransducer>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * Rx: Received payload from the MAC layer.
%Callback signature: ns3::UanNetDevice::RxTxTracedCallback

    * Tx: Send payload to the MAC layer.
%Callback signature: ns3::UanNetDevice::RxTxTracedCallback


Size of this type is 144 bytes (on a 64-bit architecture).

===============================================================

ns3::UanNoiseModel

Config Paths

ns3::UanNoiseModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/NoiseModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/NoiseModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/NoiseModel"

    * "/ChannelList/[i]/$ns3::UanChannel/NoiseModel"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanNoiseModelDefault

Config Paths

ns3::UanNoiseModelDefault is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/NoiseModel/$ns3::UanNoiseModelDefault"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"

    * "/ChannelList/[i]/$ns3::UanChannel/NoiseModel/$ns3::UanNoiseModelDefault"


Attributes

    * Wind: Wind speed in m/s.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Shipping: Shipping contribution to noise between 0 and 1.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double 0:1
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 48 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhy

Config Paths

ns3::UanPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy"


No Attributes are defined for this type.

TraceSources

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 128 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyCalcSinr

Config Paths

ns3::UanPhyCalcSinr is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyCalcSinrDefault

Config Paths

ns3::UanPhyCalcSinrDefault is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrDefault"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrDefault"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrDefault"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyCalcSinrDual

Config Paths

ns3::UanPhyCalcSinrDual is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrDual"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrDual"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrDual"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyCalcSinrFhFsk

Config Paths

ns3::UanPhyCalcSinrFhFsk is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/SinrModel/$ns3::UanPhyCalcSinrFhFsk"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy1/$ns3::UanPhyCalcSinrFhFsk"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/SinrModelPhy2/$ns3::UanPhyCalcSinrFhFsk"


Attributes

    * NumberOfHops: Number of frequencies in hopping pattern.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 13
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyDual

Config Paths

ns3::UanPhyDual is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual"


Attributes

    * CcaThresholdPhy1: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy1.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * CcaThresholdPhy2: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy2.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * TxPowerPhy1: Transmission output power in dB of Phy1.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 190
        * Flags: construct write read 
   
    * TxPowerPhy2: Transmission output power in dB of Phy2.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 190
        * Flags: construct write read 
   
    * SupportedModesPhy1: List of modes supported by Phy1.
  
        * Set with class:  UanModesListValue
        * Underlying type:  UanModesList
        * Initial value: 3|0|1|1|
        * Flags: construct write read 
   
    * SupportedModesPhy2: List of modes supported by Phy2.
  
        * Set with class:  UanModesListValue
        * Underlying type:  UanModesList
        * Initial value: 3|0|1|1|
        * Flags: construct write read 
   
    * PerModelPhy1: Functor to calculate PER based on SINR and TxMode for Phy1.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPhyPer>
        * Initial value: ns3::UanPhyPerGenDefault
        * Flags: construct write read 
   
    * PerModelPhy2: Functor to calculate PER based on SINR and TxMode for Phy2.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPhyPer>
        * Initial value: ns3::UanPhyPerGenDefault
        * Flags: construct write read 
   
    * SinrModelPhy1: Functor to calculate SINR based on pkt arrivals and modes for Phy1.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPhyCalcSinr>
        * Initial value: ns3::UanPhyCalcSinrDual
        * Flags: construct write read 
   
    * SinrModelPhy2: Functor to calculate SINR based on pkt arrivals and modes for Phy2.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPhyCalcSinr>
        * Initial value: ns3::UanPhyCalcSinrDual
        * Flags: construct write read 
   

TraceSources

    * RxOk: A packet was received successfully.
%Callback signature: ns3::UanPhy::TracedCallback

    * RxError: A packet was received unsuccessfully.
%Callback signature: ns3::UanPhy::TracedCallback

    * Tx: Packet transmission beginning.
%Callback signature: ns3::UanPhy::TracedCallback


TraceSources defined in parent class ns3::UanPhy

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 208 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyGen

Config Paths

ns3::UanPhyGen is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen"


Attributes

    * CcaThreshold: Aggregate energy of incoming signals to move to CCA Busy state dB.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * RxThreshold: Required SNR for signal acquisition in dB.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 10
        * Flags: construct write read 
   
    * TxPower: Transmission output power in dB.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 190
        * Flags: construct write read 
   
    * SupportedModes: List of modes supported by this PHY.
  
        * Set with class:  UanModesListValue
        * Underlying type:  UanModesList
        * Initial value: 3|0|1|1|
        * Flags: construct write read 
   
    * PerModel: Functor to calculate PER based on SINR and TxMode.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPhyPer>
        * Initial value: ns3::UanPhyPerGenDefault
        * Flags: construct write read 
   
    * SinrModel: Functor to calculate SINR based on pkt arrivals and modes.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::UanPhyCalcSinr>
        * Initial value: ns3::UanPhyCalcSinrDefault
        * Flags: construct write read 
   

TraceSources

    * RxOk: A packet was received successfully.
%Callback signature: ns3::UanPhy::TracedCallback

    * RxError: A packet was received unsuccessfully.
%Callback signature: ns3::UanPhy::TracedCallback

    * Tx: Packet transmission beginning.
%Callback signature: ns3::UanPhy::TracedCallback


TraceSources defined in parent class ns3::UanPhy

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device.
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 464 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyPer

Config Paths

ns3::UanPhyPer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyPerCommonModes

Config Paths

ns3::UanPhyPerCommonModes is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerCommonModes"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerCommonModes"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerCommonModes"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyPerGenDefault

Config Paths

ns3::UanPhyPerGenDefault is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerGenDefault"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerGenDefault"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerGenDefault"


Attributes

    * Threshold: SINR cutoff for good packet reception.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 8
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPhyPerUmodem

Config Paths

ns3::UanPhyPerUmodem is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyGen/PerModel/$ns3::UanPhyPerUmodem"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy1/$ns3::UanPhyPerUmodem"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Phy/$ns3::UanPhyDual/PerModelPhy2/$ns3::UanPhyPerUmodem"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPropModel

Config Paths

ns3::UanPropModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/PropagationModel"

    * "/ChannelList/[i]/$ns3::UanChannel/PropagationModel"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPropModelIdeal

Config Paths

ns3::UanPropModelIdeal is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel/$ns3::UanPropModelIdeal"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"

    * "/ChannelList/[i]/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelIdeal"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanPropModelThorp

Config Paths

ns3::UanPropModelThorp is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Channel/PropagationModel/$ns3::UanPropModelThorp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"

    * "/ChannelList/[i]/$ns3::UanChannel/PropagationModel/$ns3::UanPropModelThorp"


Attributes

    * SpreadCoef: Spreading coefficient used in calculation of Thorp's approximation.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1.5
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::UanTransducer

Config Paths

ns3::UanTransducer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Transducer"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UanTransducerHd

Config Paths

ns3::UanTransducerHd is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::UanNetDevice/Transducer/$ns3::UanTransducerHd"


Attributes

    * RxGainDb: Gain in Db added to incoming signal at receiver.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 120 bytes (on a 64-bit architecture).

===============================================================

ns3::Ucd

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpClient

Config Paths

ns3::UdpClient is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::UdpClient"


Attributes

    * MaxPackets: The maximum number of packets the application will send
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   
    * Interval: The time to wait between packets
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RemoteAddress: The destination Address of the outbound packets
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * RemotePort: The destination port of the outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 100
        * Flags: construct write read 
   
    * PacketSize: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 12:65507
        * Initial value: 1024
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpEchoClient

Config Paths

ns3::UdpEchoClient is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoClient"


Attributes

    * MaxPackets: The maximum number of packets the application will send
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   
    * Interval: The time to wait between packets
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RemoteAddress: The destination Address of the outbound packets
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * RemotePort: The destination port of the outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * PacketSize: Size of echo data in outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Tx: A new packet is created and is sent
%Callback signature: ns3::Packet::TracedCallback

    * Rx: A packet has been received
%Callback signature: ns3::Packet::TracedCallback

    * TxWithAddresses: A new packet is created and is sent
%Callback signature: ns3::Packet::TwoAddressTracedCallback

    * RxWithAddresses: A packet has been received
%Callback signature: ns3::Packet::TwoAddressTracedCallback


Size of this type is 264 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpEchoClient1

Config Paths

ns3::UdpEchoClient1 is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoClient1"


Attributes

    * MaxPackets: The maximum number of packets the application will send
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   
    * Interval: The time to wait between packets
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * RemoteAddress: The destination Address of the outbound packets
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * RemotePort: The destination port of the outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * PacketSize: Size of echo data in outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 100
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Tx: A new packet is created and is sent
%Callback signature: ns3::Packet::TracedCallback

    * Rx: A packet has been received
%Callback signature: ns3::Packet::TracedCallback

    * TxWithAddresses: A new packet is created and is sent
%Callback signature: ns3::Packet::TwoAddressTracedCallback

    * RxWithAddresses: A packet has been received
%Callback signature: ns3::Packet::TwoAddressTracedCallback


Size of this type is 264 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpEchoServer

Config Paths

ns3::UdpEchoServer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoServer"


Attributes

    * Port: Port on which we listen for incoming packets.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 9
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Rx: A packet has been received
%Callback signature: ns3::Packet::TracedCallback

    * RxWithAddresses: A packet has been received
%Callback signature: ns3::Packet::TwoAddressTracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpEchoServer1

Config Paths

ns3::UdpEchoServer1 is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::UdpEchoServer1"


Attributes

    * Port: Port on which we listen for incoming packets.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 9
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Rx: A packet has been received
%Callback signature: ns3::Packet::TracedCallback

    * RxWithAddresses: A packet has been received
%Callback signature: ns3::Packet::TwoAddressTracedCallback


Size of this type is 184 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpL4Protocol

Config Paths

ns3::UdpL4Protocol is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::UdpL4Protocol"


Attributes

    * SocketList: The list of sockets associated to this protocol.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::UdpSocketImpl>
        * Flags: read 
   

Attributes defined in parent class ns3::IpL4Protocol

    * ProtocolNumber: The IP protocol number.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t 0:255
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 96 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpServer

Config Paths

ns3::UdpServer is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::UdpServer"


Attributes

    * Port: Port on which we listen for incoming packets.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 100
        * Flags: construct write read 
   
    * PacketWindowSize: The size of the window used to compute the packet loss. This value should be a multiple of 8.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 8:256
        * Initial value: 32
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Rx: A packet has been received
%Callback signature: ns3::Packet::TracedCallback

    * RxWithAddresses: A packet has been received
%Callback signature: ns3::Packet::TwoAddressTracedCallback


Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpSocket

Introspection did not find any typical Config paths.

Attributes

    * RcvBufSize: UdpSocket maximum receive buffer size (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 131072
        * Flags: construct write read 
   
    * IpTtl: socket-specific TTL for unicast IP packets (if non-zero)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * IpMulticastTtl: socket-specific TTL for multicast IP packets (if non-zero)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * IpMulticastIf: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t -2147483648:2147483647
        * Initial value: -1
        * Flags: construct write read 
   
    * IpMulticastLoop: whether outgoing multicast sent also to loopback interface
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * MtuDiscover: If enabled, every outgoing ip packet will have the DF flag set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpSocketFactory

Config Paths

ns3::UdpSocketFactory is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::UdpSocketFactory"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpSocketImpl

Config Paths

ns3::UdpSocketImpl is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::UdpL4Protocol/SocketList/[i]"


Attributes

    * IcmpCallback: Callback invoked whenever an icmp error is received on this socket.
  
        * Set with class:  CallbackValue
        * Underlying type:  Callback
        * Initial value: 0
        * Flags: construct write read 
   
    * IcmpCallback6: Callback invoked whenever an icmpv6 error is received on this socket.
  
        * Set with class:  CallbackValue
        * Underlying type:  Callback
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::UdpSocket

    * RcvBufSize: UdpSocket maximum receive buffer size (bytes)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 131072
        * Flags: construct write read 
   
    * IpTtl: socket-specific TTL for unicast IP packets (if non-zero)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * IpMulticastTtl: socket-specific TTL for multicast IP packets (if non-zero)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * IpMulticastIf: interface index for outgoing multicast on this socket; -1 indicates to use default interface
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int32_t -2147483648:2147483647
        * Initial value: -1
        * Flags: construct write read 
   
    * IpMulticastLoop: whether outgoing multicast sent also to loopback interface
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * MtuDiscover: If enabled, every outgoing ip packet will have the DF flag set.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

TraceSources

    * Drop: Drop UDP packet due to receive buffer overflow
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 352 bytes (on a 64-bit architecture).

===============================================================

ns3::UdpTraceClient

Config Paths

ns3::UdpTraceClient is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::UdpTraceClient"


Attributes

    * RemoteAddress: The destination Address of the outbound packets
  
        * Set with class:  AddressValue
        * Underlying type:  Address
        * Initial value: 00-00-00
        * Flags: construct write read 
   
    * RemotePort: The destination port of the outbound packets
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 100
        * Flags: construct write read 
   
    * MaxPacketSize: The maximum size of a packet (including the SeqTsHeader, 12 bytes).
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1024
        * Flags: construct write read 
   
    * TraceFilename: Name of file to load a trace from. By default, uses a hardcoded trace.
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: 
        * Flags: construct write 
   
    * TraceLoop: Loops through the trace file, starting again once it is over.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 200 bytes (on a 64-bit architecture).

===============================================================

ns3::UeManager

Config Paths

ns3::UeManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteNetDevice/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LteEnbNetDevice/LteEnbRrc/UeMap/[i]"


Attributes

    * DataRadioBearerMap: List of UE DataRadioBearerInfo by DRBID.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::LteDataRadioBearerInfo>
        * Flags: read 
   
    * Srb0: SignalingRadioBearerInfo for SRB0
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSignalingRadioBearerInfo>
        * Initial value: 0
        * Flags: construct write read 
   
    * Srb1: SignalingRadioBearerInfo for SRB1
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::LteSignalingRadioBearerInfo>
        * Initial value: 0
        * Flags: construct write read 
   
    * C-RNTI: Cell Radio Network Temporary Identifier
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Flags: read 
   

TraceSources

    * StateTransition: fired upon every UE state transition seen by the UeManager at the eNB RRC
%Callback signature: ns3::UeManager::StateTracedCallback


Size of this type is 344 bytes (on a 64-bit architecture).

===============================================================

ns3::Uinteger16Probe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The uint16_t that serves as output for this probe
%Callback signature: ns3::TracedValueCallback::Uint16


Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::Uinteger32Probe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The uint32_t that serves as output for this probe
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::Uinteger8Probe

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

Attributes defined in parent class ns3::Probe

    * Start: Time data collection starts
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

Attributes defined in parent class ns3::DataCollectionObject

    * Name: Object's name
  
        * Set with class:  StringValue
        * Underlying type: 
        * Initial value: unnamed
        * Flags: construct write read 
   
    * Enabled: Object's enabled status
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: true
        * Flags: construct write read 
   

TraceSources

    * Output: The uint8_t that serves as output for this probe
%Callback signature: ns3::TracedValueCallback::Uint8


Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::UlMap

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::UniformDiscPositionAllocator

Config Paths

ns3::UniformDiscPositionAllocator is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::UniformDiscPositionAllocator"


Attributes

    * rho: The radius of the disc
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * X: The x coordinate of the center of the  disc.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Y: The y coordinate of the center of the  disc.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 64 bytes (on a 64-bit architecture).

===============================================================

ns3::UniformRandomVariable

Config Paths

ns3::UniformRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac/BeaconJitter"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/$ns3::ApWifiMac/BeaconJitter"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::InfrastructureWifiMac/$ns3::ApWifiMac/BeaconJitter"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::ApWifiMac/BeaconJitter"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::Radvd/AdvertisementJitter"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::UniformRandomVariable"

    * "/NodeList/[i]/$ns3::aodv::RoutingProtocol/UniformRv"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::UniformRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::UniformRandomVariable"


Attributes

    * Min: The lower bound on the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * Max: The upper bound on the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::UplinkScheduler

Config Paths

ns3::UplinkScheduler is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 88 bytes (on a 64-bit architecture).

===============================================================

ns3::UplinkSchedulerMBQoS

Config Paths

ns3::UplinkSchedulerMBQoS is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerMBQoS"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerMBQoS"


Attributes

    * WindowInterval: The time to wait to reset window
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 160 bytes (on a 64-bit architecture).

===============================================================

ns3::UplinkSchedulerRtps

Config Paths

ns3::UplinkSchedulerRtps is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerRtps"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerRtps"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::UplinkSchedulerSimple

Config Paths

ns3::UplinkSchedulerSimple is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerSimple"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::BaseStationNetDevice/UplinkScheduler/$ns3::UplinkSchedulerSimple"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 104 bytes (on a 64-bit architecture).

===============================================================

ns3::V4Ping

Config Paths

ns3::V4Ping is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::V4Ping"


Attributes

    * Remote: The address of the machine we want to ping.
  
        * Set with class:  Ipv4AddressValue
        * Underlying type:  Ipv4Address
        * Initial value: 102.102.102.102
        * Flags: construct write read 
   
    * Verbose: Produce usual output.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * Interval: Wait  interval  seconds between sending each packet.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * Size: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 16:4294967295
        * Initial value: 56
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Application

    * StartTime: Time at which the application will start
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   
    * StopTime: Time at which the application will stop
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +0.0ns
        * Flags: construct write read 
   

TraceSources

    * Rtt: The rtt calculated by the ping.
%Callback signature: ns3::Time::TracedCallback


Size of this type is 456 bytes (on a 64-bit architecture).

===============================================================

ns3::VendorSpecificActionHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::VirtualNetDevice

Config Paths

ns3::VirtualNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::VirtualNetDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 1500
        * Flags: construct write read 
   

TraceSources

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
%Callback signature: ns3::Packet::TracedCallback

    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback

    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::VsaManager

Config Paths

ns3::VsaManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/VsaManager"


No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::WallClockSynchronizer

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::WaveformGenerator

Introspection did not find any typical Config paths.

Attributes

    * Period: the period (=1/frequency)
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +1000000000.0ns
        * Flags: construct write read 
   
    * DutyCycle: the duty cycle of the generator, i.e., the fraction of the period that is occupied by a signal
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.5
        * Flags: construct write read 
   

TraceSources

    * TxStart: Trace fired when a new transmission is started
%Callback signature: ns3::Packet::TracedCallback

    * TxEnd: Trace fired when a previously started transmission is finished
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::WaveMacLow

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 984 bytes (on a 64-bit architecture).

===============================================================

ns3::WaveNetDevice

Config Paths

ns3::WaveNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:2296
        * Initial value: 2296
        * Flags: construct write read 
   
    * Channel: The channel attached to this device
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Channel>
        * Flags: read 
   
    * PhyEntities: The PHY entities attached to this device.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiPhy>
        * Flags: read 
   
    * MacEntities: The MAC layer attached to this device.
  
        * Set with class:  ns3::ObjectPtrContainerValue
        * Underlying type:  ns3::Ptr<  ns3::OcbWifiMac>
        * Flags: read 
   
    * ChannelScheduler: The channel scheduler attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ChannelScheduler>
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelManager: The channel manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ChannelManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelCoordinator: The channel coordinator attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ChannelCoordinator>
        * Initial value: 0
        * Flags: construct write read 
   
    * VsaManager: The VSA manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::VsaManager>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::WaypointMobilityModel

Config Paths

ns3::WaypointMobilityModel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::WaypointMobilityModel"


Attributes

    * NextWaypoint: The next waypoint used to determine position.
  
        * Set with class:  WaypointValue
        * Underlying type:  Waypoint
        * Flags: read 
   
    * WaypointsLeft: The number of waypoints remaining.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   
    * LazyNotify: Only call NotifyCourseChange when position is calculated.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * InitialPositionIsWaypoint: Calling SetPosition with no waypoints creates a waypoint.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

Attributes defined in parent class ns3::MobilityModel

    * Position: The current position of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: write read 
   
    * Velocity: The current velocity of the mobility model.
  
        * Set with class:  Vector3DValue
        * Underlying type:  Vector3D
        * Flags: read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed
%Callback signature: ns3::MobilityModel::TracedCallback


Size of this type is 224 bytes (on a 64-bit architecture).

===============================================================

ns3::WeibullRandomVariable

Config Paths

ns3::WeibullRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::WeibullRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::WeibullRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::WeibullRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::WeibullRandomVariable"


Attributes

    * Scale: The scale parameter for the Weibull distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Shape: The shape parameter for the Weibull distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 1
        * Flags: construct write read 
   
    * Bound: The upper bound on the values returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiInformationElementVector

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 40 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiMac

Config Paths

ns3::WifiMac is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac"


Attributes

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +75000.0ns
        * Flags: construct write read 
   
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +281000.0ns
        * Flags: construct write read 
   
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +107000.0ns
        * Flags: construct write read 
   
    * Sifs: The value of the SIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +16000.0ns
        * Flags: construct write read 
   
    * EifsNoDifs: The value of EIFS-DIFS.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +60000.0ns
        * Flags: construct write read 
   
    * Slot: The duration of a Slot.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +9000.0ns
        * Flags: construct write read 
   
    * Pifs: The value of the PIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +25000.0ns
        * Flags: construct write read 
   
    * Rifs: The value of the RIFS constant.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +2000.0ns
        * Flags: construct write read 
   
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +3333.0ns
        * Flags: construct write 
   
    * Ssid: The ssid we want to belong to.
  
        * Set with class:  SsidValue
        * Underlying type:  Ssid
        * Initial value: default
        * Flags: construct write read 
   

TraceSources

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
%Callback signature: ns3::Packet::TracedCallback

    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
%Callback signature: ns3::Packet::TracedCallback

    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 120 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiMacHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiMacQueue

Config Paths

ns3::WifiMacQueue is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Mac/$ns3::RegularWifiMac/Txop/Queue"


Attributes

    * MaxDelay: If a packet stays longer than this delay in the queue, it is dropped.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +500000000.0ns
        * Flags: construct write 
   
    * DropPolicy: Upon enqueue with full queue, drop oldest (DropOldest) or newest (DropNewest) packet
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: DropNewest
        * Flags: construct write read 
   

Attributes defined in parent class ns3::QueueBase

    * MaxSize: The max queue size
  
        * Set with class:  QueueSizeValue
        * Underlying type:  QueueSize
        * Initial value: 100p
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::Queue<WifiMacQueueItem>

    * Enqueue: Enqueue a packet in the queue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * Dequeue: Dequeue a packet from the queue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * Drop: Drop a packet (for whatever reason).
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * DropBeforeEnqueue: Drop a packet before enqueue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback

    * DropAfterDequeue: Drop a packet after dequeue.
%Callback signature: ns3::WifiMacQueueItem::TracedCallback


TraceSources defined in parent class ns3::QueueBase

    * PacketsInQueue: Number of packets currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32

    * BytesInQueue: Number of bytes currently stored in the queue
%Callback signature: ns3::TracedValueCallback::Uint32


Size of this type is 256 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiMacTrailer

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 8 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiNetDevice

Config Paths

ns3::WifiNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 1:2296
        * Initial value: 2296
        * Flags: construct write read 
   
    * Channel: The channel attached to this device
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::Channel>
        * Flags: read 
   
    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiPhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * Mac: The MAC layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiMac>
        * Initial value: 0
        * Flags: construct write read 
   
    * RemoteStationManager: The station manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiRemoteStationManager>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 152 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiPhy

Config Paths

ns3::WifiPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]"


Attributes

    * Frequency: The operating center frequency (MHz)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelWidth: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 5:160
        * Initial value: 20
        * Flags: construct write read 
   
    * ChannelNumber: If set to non-zero defined value, will control Frequency and ChannelWidth assignment
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:196
        * Initial value: 0
        * Flags: construct write read 
   
    * EnergyDetectionThreshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -96
        * Flags: construct write 
   
    * CcaMode1Threshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -99
        * Flags: construct write read 
   
    * TxGain: Transmission gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * RxGain: Reception gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * TxPowerLevels: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * TxPowerEnd: Maximum available transmission level (dbm).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 16.0206
        * Flags: construct write read 
   
    * TxPowerStart: Minimum available transmission level (dbm).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 16.0206
        * Flags: construct write read 
   
    * RxNoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 7
        * Flags: construct write 
   
    * State: The state of the PHY layer.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiPhyStateHelper>
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelSwitchDelay: Delay between two short frames transmitted on different frequencies.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +250000.0ns
        * Flags: construct write read 
   
    * Antennas: The number of antennas on the device.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxSupportedTxSpatialStreams: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxSupportedRxSpatialStreams: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * ShortGuardEnabled: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * GuardInterval: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time +400.0ns:+3200.0ns
        * Initial value: +3200.0ns
        * Flags: construct write read 
   
    * LdpcEnabled: Whether or not LDPC is enabled (not supported yet!).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * STBCEnabled: Whether or not STBC is enabled (not supported yet!).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * GreenfieldEnabled: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * ShortPlcpPreambleSupported: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * FrameCaptureModel: Ptr to an object that implements the frame capture model
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::FrameCaptureModel>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::Packet::TracedCallback

    * MonitorSnifferRx: Trace source simulating a wifi device in monitor mode sniffing all received frames
%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback

    * MonitorSnifferTx: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted
%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback


Size of this type is 592 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiPhyStateHelper

Config Paths

ns3::WifiPhyStateHelper is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/State"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/State"


No Attributes are defined for this type.

TraceSources

    * State: The state of the PHY layer
%Callback signature: ns3::WifiPhyStateHelper::StateTracedCallback

    * RxOk: A packet has been received successfully.
%Callback signature: ns3::WifiPhyStateHelper::RxOkTracedCallback

    * RxError: A packet has been received unsuccessfully.
%Callback signature: ns3::WifiPhyStateHelper::RxEndErrorTracedCallback

    * Tx: Packet transmission is starting.
%Callback signature: ns3::WifiPhyStateHelper::TxTracedCallback


Size of this type is 224 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiRadioEnergyModel

Introspection did not find any typical Config paths.

Attributes

    * IdleCurrentA: The default radio Idle current in Ampere.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.273
        * Flags: construct write read 
   
    * CcaBusyCurrentA: The default radio CCA Busy State current in Ampere.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.273
        * Flags: construct write read 
   
    * TxCurrentA: The radio Tx current in Ampere.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.38
        * Flags: construct write read 
   
    * RxCurrentA: The radio Rx current in Ampere.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.313
        * Flags: construct write read 
   
    * SwitchingCurrentA: The default radio Channel Switch current in Ampere.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.273
        * Flags: construct write read 
   
    * SleepCurrentA: The radio Sleep current in Ampere.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0.033
        * Flags: construct write read 
   
    * TxCurrentModel: A pointer to the attached tx current model.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiTxCurrentModel>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * TotalEnergyConsumption: Total energy consumption of the radio device.
%Callback signature: ns3::TracedValueCallback::Double


Size of this type is 192 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiRemoteStationManager

Config Paths

ns3::WifiRemoteStationManager is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/RemoteStationManager"


Attributes

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Flags: read 
   
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 7
        * Flags: construct write 
   
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 4
        * Flags: construct write 
   
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write 
   
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 65535
        * Flags: construct write read 
   
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
  
        * Set with class:  WifiModeValue
        * Underlying type:  WifiMode
        * Initial value: Invalid-WifiMode
        * Flags: construct write read 
   
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 0
        * Flags: construct write read 
   
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Initial value: Cts-To-Self
        * Flags: construct write read 
   

TraceSources

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback

    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts
%Callback signature: ns3::Mac48Address::TracedCallback


Size of this type is 264 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiSpectrumPhyInterface

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 56 bytes (on a 64-bit architecture).

===============================================================

ns3::WifiTxCurrentModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::WimaxChannel

Config Paths

ns3::WimaxChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy/Channel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Channel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::WimaxChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::WimaxChannel"

    * "/ChannelList/[i]/$ns3::WimaxChannel"


No Attributes are defined for this type.

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::WimaxConnection

Config Paths

ns3::WimaxConnection is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/InitialRangingConnection"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BroadcastConnection"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/BasicConnection"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/PrimaryConnection"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/BasicConnection"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/PrimaryConnection"


Attributes

    * Type: Connection type
  
        * Set with class:  ns3::EnumValue
        * Underlying type: 
        * Flags: read 
   
    * TxQueue: Transmit queue
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxMacQueue>
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::WimaxMacQueue

Config Paths

ns3::WimaxMacQueue is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/InitialRangingConnection/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/BroadcastConnection/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/BasicConnection/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/$ns3::SubscriberStationNetDevice/PrimaryConnection/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/BasicConnection/TxQueue"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SubscriberStationNetDevice/PrimaryConnection/TxQueue"


Attributes

    * MaxSize: Maximum size
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1024
        * Flags: construct write read 
   

TraceSources

    * Enqueue: Enqueue trace
%Callback signature: ns3::Packet::TracedCallback

    * Dequeue: Dequeue trace
%Callback signature: ns3::Packet::TracedCallback

    * Drop: Drop trace
%Callback signature: ns3::Packet::TracedCallback


Size of this type is 176 bytes (on a 64-bit architecture).

===============================================================

ns3::WimaxMacToMacHeader

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 16 bytes (on a 64-bit architecture).

===============================================================

ns3::WimaxNetDevice

Config Paths

ns3::WimaxNetDevice is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice"


Attributes

    * Mtu: The MAC-level Maximum Transmission Unit
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:1500
        * Initial value: 1400
        * Flags: construct write read 
   
    * Phy: The PHY layer attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxPhy>
        * Initial value: 0
        * Flags: construct write read 
   
    * Channel: The channel attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxChannel>
        * Initial value: 0
        * Flags: construct write read 
   
    * RTG: receive/transmit transition gap.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:120
        * Initial value: 0
        * Flags: construct write read 
   
    * TTG: transmit/receive transition gap.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:120
        * Initial value: 0
        * Flags: construct write read 
   
    * ConnectionManager: The connection manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::ConnectionManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * BurstProfileManager: The burst profile manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BurstProfileManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * BandwidthManager: The bandwidth manager attached to this device.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::BandwidthManager>
        * Initial value: 0
        * Flags: construct write read 
   
    * InitialRangingConnection: Initial ranging connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   
    * BroadcastConnection: Broadcast connection
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxConnection>
        * Initial value: 0
        * Flags: construct write read 
   

TraceSources

    * Rx: Receive trace
%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback

    * Tx: Transmit trace
%Callback signature: ns3::WimaxNetDevice::TxRxTracedCallback


Size of this type is 376 bytes (on a 64-bit architecture).

===============================================================

ns3::WimaxPhy

Config Paths

ns3::WimaxPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WimaxNetDevice/Phy"


Attributes

    * Channel: Wimax channel
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WimaxChannel>
        * Initial value: 0
        * Flags: construct write read 
   
    * FrameDuration: The frame duration in seconds.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +10000000.0ns
        * Flags: construct write read 
   
    * Frequency: The central frequency in KHz.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 1000000:11000000
        * Initial value: 5000000
        * Flags: construct write read 
   
    * Bandwidth: The channel bandwidth in Hz.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 5000000:30000000
        * Initial value: 10000000
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 176 bytes (on a 64-bit architecture).

===============================================================

ns3::YansErrorRateModel

Introspection did not find any typical Config paths.

No Attributes are defined for this type.

No TraceSources are defined for this type.

Size of this type is 32 bytes (on a 64-bit architecture).

===============================================================

ns3::YansWifiChannel

Config Paths

ns3::YansWifiChannel is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel"

    * "/ChannelList/[i]/$ns3::YansWifiChannel"


Attributes

    * PropagationLossModel: A pointer to the propagation loss model attached to this channel.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::PropagationLossModel>
        * Initial value: 0
        * Flags: construct write read 
   
    * PropagationDelayModel: A pointer to the propagation delay model attached to this channel.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::PropagationDelayModel>
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::Channel

    * Id: The id (unique integer) of this Channel.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint32_t 0:4294967295
        * Flags: read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::YansWifiPhy

Config Paths

ns3::YansWifiPhy is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Phy/$ns3::YansWifiPhy"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/PhyEntities/[i]/$ns3::YansWifiPhy"


No Attributes are defined for this type.

Attributes defined in parent class ns3::WifiPhy

    * Frequency: The operating center frequency (MHz)
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 0:65535
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelWidth: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint16_t 5:160
        * Initial value: 20
        * Flags: construct write read 
   
    * ChannelNumber: If set to non-zero defined value, will control Frequency and ChannelWidth assignment
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:196
        * Initial value: 0
        * Flags: construct write read 
   
    * EnergyDetectionThreshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -96
        * Flags: construct write 
   
    * CcaMode1Threshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: -99
        * Flags: construct write read 
   
    * TxGain: Transmission gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * RxGain: Reception gain (dB).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   
    * TxPowerLevels: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 0:255
        * Initial value: 1
        * Flags: construct write read 
   
    * TxPowerEnd: Maximum available transmission level (dbm).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 16.0206
        * Flags: construct write read 
   
    * TxPowerStart: Minimum available transmission level (dbm).
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 16.0206
        * Flags: construct write read 
   
    * RxNoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 7
        * Flags: construct write 
   
    * State: The state of the PHY layer.
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::WifiPhyStateHelper>
        * Initial value: 0
        * Flags: construct write read 
   
    * ChannelSwitchDelay: Delay between two short frames transmitted on different frequencies.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time --9223372036854775808.0ns:+9223372036854775807.0ns
        * Initial value: +250000.0ns
        * Flags: construct write read 
   
    * Antennas: The number of antennas on the device.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxSupportedTxSpatialStreams: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * MaxSupportedRxSpatialStreams: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  ns3::UintegerValue
        * Underlying type: uint8_t 1:8
        * Initial value: 1
        * Flags: construct write read 
   
    * ShortGuardEnabled: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * GuardInterval: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.
  
        * Set with class:  ns3::TimeValue
        * Underlying type:  Time +400.0ns:+3200.0ns
        * Initial value: +3200.0ns
        * Flags: construct write read 
   
    * LdpcEnabled: Whether or not LDPC is enabled (not supported yet!).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * STBCEnabled: Whether or not STBC is enabled (not supported yet!).
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * GreenfieldEnabled: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * ShortPlcpPreambleSupported: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   
    * FrameCaptureModel: Ptr to an object that implements the frame capture model
  
        * Set with class:  ns3::PointerValue
        * Underlying type:  ns3::Ptr<  ns3::FrameCaptureModel>
        * Initial value: 0
        * Flags: construct write read 
   

No TraceSources are defined for this type.

TraceSources defined in parent class ns3::WifiPhy

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.
%Callback signature: ns3::Packet::TracedCallback

    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
%Callback signature: ns3::Packet::TracedCallback

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
%Callback signature: ns3::Packet::TracedCallback

    * MonitorSnifferRx: Trace source simulating a wifi device in monitor mode sniffing all received frames
%Callback signature: ns3::WifiPhy::MonitorSnifferRxTracedCallback

    * MonitorSnifferTx: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted
%Callback signature: ns3::WifiPhy::MonitorSnifferTxTracedCallback


Size of this type is 600 bytes (on a 64-bit architecture).

===============================================================

ns3::ZetaRandomVariable

Config Paths

ns3::ZetaRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZetaRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZetaRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZetaRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZetaRandomVariable"


Attributes

    * Alpha: The alpha value for the zeta distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 3.14
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 72 bytes (on a 64-bit architecture).

===============================================================

ns3::ZipfRandomVariable

Config Paths

ns3::ZipfRandomVariable is accessible through the following paths with Config::Set and Config::Connect:

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::SimpleNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::CsmaNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::RateErrorModel/RanVar/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstStart/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::PointToPointNetDevice/ReceiveErrorModel/$ns3::BurstErrorModel/BurstSize/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::LrWpanNetDevice/Channel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WifiNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/DeviceList/[i]/$ns3::WaveNetDevice/Channel/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::DhcpClient/Transactions/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OnTime/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/ApplicationList/[i]/$ns3::OnOffApplication/OffTime/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanVelocity/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanDirection/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::GaussMarkovMobilityModel/MeanPitch/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Speed/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomDirection2dMobilityModel/Pause/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Direction/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWalk2dMobilityModel/Speed/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Speed/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/Pause/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/X/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomRectanglePositionAllocator/Y/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/X/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Y/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomBoxPositionAllocator/Z/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Theta/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::RandomDiscPositionAllocator/Rho/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/X/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Y/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::MobilityModel/$ns3::RandomWaypointMobilityModel/PositionAllocator/$ns3::OutdoorPositionAllocator/Z/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::ArpL3Protocol/RequestJitter/$ns3::ZipfRandomVariable"

    * "/NodeList/[i]/$ns3::Icmpv6L4Protocol/SolicitationJitter/$ns3::ZipfRandomVariable"

    * "/ChannelList/[i]/$ns3::SpectrumChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationLossModel/$ns3::RandomPropagationLossModel/Variable/$ns3::ZipfRandomVariable"

    * "/ChannelList/[i]/$ns3::YansWifiChannel/PropagationDelayModel/$ns3::RandomPropagationDelayModel/Variable/$ns3::ZipfRandomVariable"


Attributes

    * N: The n value for the Zipf distribution returned by this RNG stream.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: uint32_t 0:4294967295
        * Initial value: 1
        * Flags: construct write read 
   
    * Alpha: The alpha value for the Zipf distribution returned by this RNG stream.
  
        * Set with class:  ns3::DoubleValue
        * Underlying type: double -1.79769e+308:1.79769e+308
        * Initial value: 0
        * Flags: construct write read 
   

Attributes defined in parent class ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
  
        * Set with class:  ns3::IntegerValue
        * Underlying type: int64_t -9223372036854775808:9223372036854775807
        * Initial value: -1
        * Flags: construct write read 
   
    * Antithetic: Set this RNG stream to generate antithetic values
  
        * Set with class:  BooleanValue
        * Underlying type: bool
        * Initial value: false
        * Flags: construct write read 
   

No TraceSources are defined for this type.

Size of this type is 80 bytes (on a 64-bit architecture).

===============================================================
Page AttributeList All Attributes

This is a list of all attribute by class.  For more information see the attribute section of this API documentation and the Attributes sections in the Tutorial and Manual.

ns3::RandomVariableStream

    * Stream: The stream number for this RNG stream. -1 means "allocate a stream automatically". Note that if -1 is set, Get will return -1 so that it is not possible to know which value was automatically allocated.
    * Antithetic: Set this RNG stream to generate antithetic values

ns3::UniformRandomVariable

    * Min: The lower bound on the values returned by this RNG stream.
    * Max: The upper bound on the values returned by this RNG stream.

ns3::ConstantRandomVariable

    * Constant: The constant value returned by this RNG stream.

ns3::SequentialRandomVariable

    * Min: The first value of the sequence.
    * Max: One more than the last value of the sequence.
    * Increment: The sequence random variable increment.
    * Consecutive: The number of times each member of the sequence is repeated.

ns3::ExponentialRandomVariable

    * Mean: The mean of the values returned by this RNG stream.
    * Bound: The upper bound on the values returned by this RNG stream.

ns3::ParetoRandomVariable

    * Mean: The mean parameter for the Pareto distribution returned by this RNG stream.
    * Scale: The scale parameter for the Pareto distribution returned by this RNG stream.
    * Shape: The shape parameter for the Pareto distribution returned by this RNG stream.
    * Bound: The upper bound on the values returned by this RNG stream (if non-zero).

ns3::WeibullRandomVariable

    * Scale: The scale parameter for the Weibull distribution returned by this RNG stream.
    * Shape: The shape parameter for the Weibull distribution returned by this RNG stream.
    * Bound: The upper bound on the values returned by this RNG stream.

ns3::NormalRandomVariable

    * Mean: The mean value for the normal distribution returned by this RNG stream.
    * Variance: The variance value for the normal distribution returned by this RNG stream.
    * Bound: The bound on the values returned by this RNG stream.

ns3::LogNormalRandomVariable

    * Mu: The mu value for the log-normal distribution returned by this RNG stream.
    * Sigma: The sigma value for the log-normal distribution returned by this RNG stream.

ns3::GammaRandomVariable

    * Alpha: The alpha value for the gamma distribution returned by this RNG stream.
    * Beta: The beta value for the gamma distribution returned by this RNG stream.

ns3::ErlangRandomVariable

    * K: The k value for the Erlang distribution returned by this RNG stream.
    * Lambda: The lambda value for the Erlang distribution returned by this RNG stream.

ns3::TriangularRandomVariable

    * Mean: The mean value for the triangular distribution returned by this RNG stream.
    * Min: The lower bound on the values returned by this RNG stream.
    * Max: The upper bound on the values returned by this RNG stream.

ns3::ZipfRandomVariable

    * N: The n value for the Zipf distribution returned by this RNG stream.
    * Alpha: The alpha value for the Zipf distribution returned by this RNG stream.

ns3::ZetaRandomVariable

    * Alpha: The alpha value for the zeta distribution returned by this RNG stream.

ns3::RealtimeSimulatorImpl

    * SynchronizationMode: What to do if the simulation cannot keep up with real time.
    * HardLimit: Maximum acceptable real-time jitter (used in conjunction with SynchronizationMode=HardLimit)

ns3::DataCollectionObject

    * Name: Object's name
    * Enabled: Object's enabled status

ns3::Probe

    * Start: Time data collection starts
    * Stop: Time when data collection stops.  The special time value of 0 disables this attribute

ns3::Application

    * StartTime: Time at which the application will start
    * StopTime: Time at which the application will stop

ns3::Channel

    * Id: The id (unique integer) of this Channel.

ns3::ChannelListPriv

    * ChannelList: The list of all channels created during the simulation.

ns3::Node

    * DeviceList: The list of devices associated to this Node.
    * ApplicationList: The list of applications associated to this Node.
    * Id: The id (unique integer) of this Node.
    * SystemId: The systemId of this node: a unique integer used for parallel simulations.

ns3::NodeListPriv

    * NodeList: The list of all nodes created during the simulation.

ns3::QueueBase

    * MaxSize: The max queue size

ns3::DynamicQueueLimits

    * HoldTime: The DQL algorithm hold time
    * MaxLimit: Maximum limit
    * MinLimit: Minimum limit

ns3::SimpleChannel

    * Delay: Transmission delay through the channel

ns3::ErrorModel

    * IsEnabled: Whether this ErrorModel is enabled or not.

ns3::RateErrorModel

    * ErrorUnit: The error unit
    * ErrorRate: The error rate.
    * RanVar: The decision variable attached to this error model.

ns3::BurstErrorModel

    * ErrorRate: The burst error event.
    * BurstStart: The decision variable attached to this error model.
    * BurstSize: The number of packets being corrupted at one drop.

ns3::PacketSocket

    * RcvBufSize: PacketSocket maximum receive buffer size (bytes)

ns3::PcapFileWrapper

    * CaptureSize: Maximum length of captured packets (cf. pcap snaplen)
    * NanosecMode: Whether packet timestamps in the PCAP file are nanoseconds or microseconds(default).

ns3::SimpleNetDevice

    * ReceiveErrorModel: The receiver error model used to simulate packet loss
    * PointToPointMode: The device is configured in Point to Point mode
    * TxQueue: A queue to use as the transmit queue in the device.
    * DataRate: The default data rate for point to point links. Zero means infinite

ns3::PacketSocketClient

    * MaxPackets: The maximum number of packets the application will send (zero means infinite)
    * Interval: The time to wait between packets
    * PacketSize: Size of packets generated (bytes).
    * Priority: Priority assigned to the packets generated.

ns3::VirtualNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit

ns3::FdNetDevice

    * Address: The MAC address of this device.
    * Start: The simulation time at which to spin up the device thread.
    * Stop: The simulation time at which to tear down the device thread.
    * EncapsulationMode: The link-layer encapsulation type to use.
    * RxQueueSize: Maximum size of the read queue.  This value limits number of packets that have been read from the network into a memory buffer but have not yet been processed by the simulator.

ns3::CsmaNetDevice

    * Address: The MAC address of this device.
    * Mtu: The MAC-level Maximum Transmission Unit
    * EncapsulationMode: The link-layer encapsulation type to use.
    * SendEnable: Enable or disable the transmitter section of the device.
    * ReceiveEnable: Enable or disable the receiver section of the device.
    * ReceiveErrorModel: The receiver error model used to simulate packet loss
    * TxQueue: A queue to use as the transmit queue in the device.

ns3::CsmaChannel

    * DataRate: The transmission data rate to be provided to devices connected to the channel
    * Delay: Transmission delay through the channel

ns3::ConfigStore

    * Mode: Configuration mode
    * Filename: The file where the configuration should be saved to or loaded from.
    * FileFormat: Type of file format

ns3::BasicEnergySource

    * BasicEnergySourceInitialEnergyJ: Initial energy stored in basic energy source.
    * BasicEnergySupplyVoltageV: Initial supply voltage for basic energy source.
    * BasicEnergyLowBatteryThreshold: Low battery threshold for basic energy source.
    * BasicEnergyHighBatteryThreshold: High battery threshold for basic energy source.
    * PeriodicEnergyUpdateInterval: Time between two consecutive periodic energy updates.

ns3::LiIonEnergySource

    * LiIonEnergySourceInitialEnergyJ: Initial energy stored in basic energy source.
    * LiIonEnergyLowBatteryThreshold: Low battery threshold for LiIon energy source.
    * InitialCellVoltage: Initial (maximum) voltage of the cell (fully charged).
    * NominalCellVoltage: Nominal voltage of the cell.
    * ExpCellVoltage: Cell voltage at the end of the exponential zone.
    * RatedCapacity: Rated capacity of the cell.
    * NomCapacity: Cell capacity at the end of the nominal zone.
    * ExpCapacity: Cell Capacity at the end of the exponential zone.
    * InternalResistance: Internal resistance of the cell
    * TypCurrent: Typical discharge current used to fit the curves
    * ThresholdVoltage: Minimum threshold voltage to consider the battery depleted.
    * PeriodicEnergyUpdateInterval: Time between two consecutive periodic energy updates.

ns3::RvBatteryModel

    * RvBatteryModelPeriodicEnergyUpdateInterval: RV battery model sampling interval.
    * RvBatteryModelLowBatteryThreshold: Low battery threshold.
    * RvBatteryModelOpenCircuitVoltage: RV battery model open circuit voltage.
    * RvBatteryModelCutoffVoltage: RV battery model cutoff voltage.
    * RvBatteryModelAlphaValue: RV battery model alpha value.
    * RvBatteryModelBetaValue: RV battery model beta value.
    * RvBatteryModelNumOfTerms: The number of terms of the infinite sum for estimating battery level.

ns3::BasicEnergyHarvester

    * PeriodicHarvestedPowerUpdateInterval: Time between two consecutive periodic updates of the harvested power. By default, the value is updated every 1 s
    * HarvestablePower: The harvestable power [Watts] that the energy harvester is allowed to harvest. By default, the model will allow to harvest an amount of power defined by a uniformly distributed random variable in 0 and 2.0 Watts

ns3::MobilityModel

    * Position: The current position of the mobility model.
    * Velocity: The current velocity of the mobility model.

ns3::GaussMarkovMobilityModel

    * Bounds: Bounds of the area to cruise.
    * TimeStep: Change current direction and speed after moving for this time.
    * Alpha: A constant representing the tunable parameter in the Gauss-Markov model.
    * MeanVelocity: A random variable used to assign the average velocity.
    * MeanDirection: A random variable used to assign the average direction.
    * MeanPitch: A random variable used to assign the average pitch.
    * NormalVelocity: A gaussian random variable used to calculate the next velocity value.
    * NormalDirection: A gaussian random variable used to calculate the next direction value.
    * NormalPitch: A gaussian random variable used to calculate the next pitch value.

ns3::HierarchicalMobilityModel

    * Child: The child mobility model.
    * Parent: The parent mobility model.

ns3::GridPositionAllocator

    * GridWidth: The number of objects laid out on a line.
    * MinX: The x coordinate where the grid starts.
    * MinY: The y coordinate where the grid starts.
    * DeltaX: The x space between objects.
    * DeltaY: The y space between objects.
    * LayoutType: The type of layout.

ns3::RandomRectanglePositionAllocator

    * X: A random variable which represents the x coordinate of a position in a random rectangle.
    * Y: A random variable which represents the y coordinate of a position in a random rectangle.

ns3::RandomBoxPositionAllocator

    * X: A random variable which represents the x coordinate of a position in a random box.
    * Y: A random variable which represents the y coordinate of a position in a random box.
    * Z: A random variable which represents the z coordinate of a position in a random box.

ns3::RandomDiscPositionAllocator

    * Theta: A random variable which represents the angle (gradients) of a position in a random disc.
    * Rho: A random variable which represents the radius of a position in a random disc.
    * X: The x coordinate of the center of the random position disc.
    * Y: The y coordinate of the center of the random position disc.

ns3::UniformDiscPositionAllocator

    * rho: The radius of the disc
    * X: The x coordinate of the center of the  disc.
    * Y: The y coordinate of the center of the  disc.

ns3::RandomDirection2dMobilityModel

    * Bounds: The 2d bounding area
    * Speed: A random variable to control the speed (m/s).
    * Pause: A random variable to control the pause (s).

ns3::RandomWalk2dMobilityModel

    * Bounds: Bounds of the area to cruise.
    * Time: Change current direction and speed after moving for this delay.
    * Distance: Change current direction and speed after moving for this distance.
    * Mode: The mode indicates the condition used to change the current speed and direction
    * Direction: A random variable used to pick the direction (radians).
    * Speed: A random variable used to pick the speed (m/s).

ns3::RandomWaypointMobilityModel

    * Speed: A random variable used to pick the speed of a random waypoint model.
    * Pause: A random variable used to pick the pause of a random waypoint model.
    * PositionAllocator: The position model used to pick a destination point.

ns3::SteadyStateRandomWaypointMobilityModel

    * MinSpeed: Minimum speed value, [m/s]
    * MaxSpeed: Maximum speed value, [m/s]
    * MinPause: Minimum pause value, [s]
    * MaxPause: Maximum pause value, [s]
    * MinX: Minimum X value of traveling region, [m]
    * MaxX: Maximum X value of traveling region, [m]
    * MinY: Minimum Y value of traveling region, [m]
    * MaxY: Maximum Y value of traveling region, [m]
    * Z: Z value of traveling region (fixed), [m]

ns3::WaypointMobilityModel

    * NextWaypoint: The next waypoint used to determine position.
    * WaypointsLeft: The number of waypoints remaining.
    * LazyNotify: Only call NotifyCourseChange when position is calculated.
    * InitialPositionIsWaypoint: Calling SetPosition with no waypoints creates a waypoint.

ns3::UanChannel

    * PropagationModel: A pointer to the propagation model.
    * NoiseModel: A pointer to the model of the channel ambient noise.

ns3::UanPhyGen

    * CcaThreshold: Aggregate energy of incoming signals to move to CCA Busy state dB.
    * RxThreshold: Required SNR for signal acquisition in dB.
    * TxPower: Transmission output power in dB.
    * SupportedModes: List of modes supported by this PHY.
    * PerModel: Functor to calculate PER based on SINR and TxMode.
    * SinrModel: Functor to calculate SINR based on pkt arrivals and modes.

ns3::UanPhyPerGenDefault

    * Threshold: SINR cutoff for good packet reception.

ns3::UanPhyCalcSinrFhFsk

    * NumberOfHops: Number of frequencies in hopping pattern.

ns3::UanTransducerHd

    * RxGainDb: Gain in Db added to incoming signal at receiver.

ns3::UanNetDevice

    * Channel: The channel attached to this device.
    * Phy: The PHY layer attached to this device.
    * Mac: The MAC layer attached to this device.
    * Transducer: The Transducer attached to this device.

ns3::UanNoiseModelDefault

    * Wind: Wind speed in m/s.
    * Shipping: Shipping contribution to noise between 0 and 1.

ns3::UanMacCw

    * CW: The MAC parameter CW.
    * SlotTime: Time slot duration for MAC backoff.

ns3::UanPropModelThorp

    * SpreadCoef: Spreading coefficient used in calculation of Thorp's approximation.

ns3::UanPhyDual

    * CcaThresholdPhy1: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy1.
    * CcaThresholdPhy2: Aggregate energy of incoming signals to move to CCA Busy state dB of Phy2.
    * TxPowerPhy1: Transmission output power in dB of Phy1.
    * TxPowerPhy2: Transmission output power in dB of Phy2.
    * SupportedModesPhy1: List of modes supported by Phy1.
    * SupportedModesPhy2: List of modes supported by Phy2.
    * PerModelPhy1: Functor to calculate PER based on SINR and TxMode for Phy1.
    * PerModelPhy2: Functor to calculate PER based on SINR and TxMode for Phy2.
    * SinrModelPhy1: Functor to calculate SINR based on pkt arrivals and modes for Phy1.
    * SinrModelPhy2: Functor to calculate SINR based on pkt arrivals and modes for Phy2.

ns3::UanMacRc

    * RetryRate: Number of retry attempts per second (of RTS/GWPING).
    * MaxFrames: Maximum number of frames to include in a single RTS.
    * QueueLimit: Maximum packets to queue at MAC.
    * SIFS: Spacing to give between frames (this should match gateway).
    * NumberOfRates: Number of rate divisions supported by each PHY.
    * MinRetryRate: Smallest allowed RTS retry rate.
    * RetryStep: Retry rate increment.
    * MaxPropDelay: Maximum possible propagation delay to gateway.

ns3::UanMacRcGw

    * MaxReservations: Maximum number of reservations to accept per cycle.
    * NumberOfRates: Number of rates per Phy layer.
    * MaxPropDelay: Maximum propagation delay between gateway and non-gateway nodes.
    * SIFS: Spacing between frames to account for timing error and processing delay.
    * NumberOfNodes: Number of non-gateway nodes in this gateway's neighborhood.
    * MinRetryRate: Smallest allowed RTS retry rate.
    * RetryStep: Retry rate increment.
    * TotalRate: Total available channel rate in bps (for a single channel, without splitting reservation channel).
    * RateStep: Increments available for rate assignment in bps.
    * FrameSize: Size of data frames in bytes.

ns3::AcousticModemEnergyModel

    * TxPowerW: The modem Tx power in Watts
    * RxPowerW: The modem Rx power in Watts
    * IdlePowerW: The modem Idle power in Watts
    * SleepPowerW: The modem Sleep power in Watts

ns3::RandomPropagationDelayModel

    * Variable: The random variable which generates random delays (s).

ns3::ConstantSpeedPropagationDelayModel

    * Speed: The propagation speed (m/s) in the propagation medium being considered. The default value is the propagation speed of light in the vacuum.

ns3::RandomPropagationLossModel

    * Variable: The random variable used to pick a loss every time CalcRxPower is invoked.

ns3::FriisPropagationLossModel

    * Frequency: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
    * SystemLoss: The system loss
    * MinLoss: The minimum value (dB) of the total loss, used at short ranges. Note: 

ns3::TwoRayGroundPropagationLossModel

    * Frequency: The carrier frequency (in Hz) at which propagation occurs  (default is 5.15 GHz).
    * SystemLoss: The system loss
    * MinDistance: The distance under which the propagation model refuses to give results (m)
    * HeightAboveZ: The height of the antenna (m) above the node's Z coordinate

ns3::LogDistancePropagationLossModel

    * Exponent: The exponent of the Path Loss propagation model
    * ReferenceDistance: The distance at which the reference loss is calculated (m)
    * ReferenceLoss: The reference loss at reference distance (dB). (Default is Friis at 1m with 5.15 GHz)

ns3::ThreeLogDistancePropagationLossModel

    * Distance0: Beginning of the first (near) distance field
    * Distance1: Beginning of the second (middle) distance field.
    * Distance2: Beginning of the third (far) distance field.
    * Exponent0: The exponent for the first field.
    * Exponent1: The exponent for the second field.
    * Exponent2: The exponent for the third field.
    * ReferenceLoss: The reference loss at distance d0 (dB). (Default is Friis at 1m with 5.15 GHz)

ns3::NakagamiPropagationLossModel

    * Distance1: Beginning of the second distance field. Default is 80m.
    * Distance2: Beginning of the third distance field. Default is 200m.
    * m0: m0 for distances smaller than Distance1. Default is 1.5.
    * m1: m1 for distances smaller than Distance2. Default is 0.75.
    * m2: m2 for distances greater than Distance2. Default is 0.75.
    * ErlangRv: Access to the underlying ErlangRandomVariable
    * GammaRv: Access to the underlying GammaRandomVariable

ns3::FixedRssLossModel

    * Rss: The fixed receiver Rss.

ns3::MatrixPropagationLossModel

    * DefaultLoss: The default value for propagation loss, dB.

ns3::RangePropagationLossModel

    * MaxRange: Maximum Transmission Range (meters)

ns3::JakesProcess

    * DopplerFrequencyHz: Corresponding doppler frequency[Hz]
    * NumberOfOscillators: The number of oscillators

ns3::Cost231PropagationLossModel

    * Lambda: The wavelength  (default is 2.3 GHz at 300 000 km/s).
    * Frequency: The Frequency  (default is 2.3 GHz).
    * BSAntennaHeight: BS Antenna Height (default is 50m).
    * SSAntennaHeight: SS Antenna Height (default is 3m).
    * MinDistance: The distance under which the propagation model refuses to give results (m) 

ns3::OkumuraHataPropagationLossModel

    * Frequency: The propagation frequency in Hz
    * Environment: Environment Scenario
    * CitySize: Dimension of the city

ns3::ItuR1411LosPropagationLossModel

    * Frequency: The propagation frequency in Hz

ns3::ItuR1411NlosOverRooftopPropagationLossModel

    * Frequency: The Frequency  (default is 2.106 GHz).
    * Environment: Environment Scenario
    * CitySize: Dimension of the city
    * RooftopLevel: The height of the rooftop level in meters
    * StreetsOrientation: The orientation of streets in degrees [0,90] with respect to the direction of propagation
    * StreetsWidth: The width of streets
    * BuildingsExtend: The distance over which the buildings extend
    * BuildingSeparation: The separation between buildings

ns3::Building

    * NRoomsX: The number of rooms in the X axis.
    * NRoomsY: The number of rooms in the Y axis.
    * NFloors: The number of floors of this building.
    * Id: The id (unique integer) of this Building.
    * Boundaries: The boundaries of this Building as a value of type ns3::Box
    * Type: The type of building
    * ExternalWallsType: The type of material of which the external walls are made

ns3::BuildingListPriv

    * BuildingList: The list of all buildings created during the simulation.

ns3::ItuR1238PropagationLossModel

    * Frequency: The Frequency  (default is 2.106 GHz).

ns3::BuildingsPropagationLossModel

    * ShadowSigmaOutdoor: Standard deviation of the normal distribution used for calculate the shadowing for outdoor nodes
    * ShadowSigmaIndoor: Standard deviation of the normal distribution used for calculate the shadowing for indoor nodes 
    * ShadowSigmaExtWalls: Standard deviation of the normal distribution used for calculate the shadowing due to ext walls 
    * InternalWallLoss: Additional loss for each internal wall [dB]

ns3::HybridBuildingsPropagationLossModel

    * Frequency: The Frequency  (default is 2.106 GHz).
    * Los2NlosThr:  Threshold from LoS to NLoS in ITU 1411 [m].
    * Environment: Environment Scenario
    * CitySize: Dimension of the city
    * RooftopLevel: The height of the rooftop level in meters

ns3::RandomBuildingPositionAllocator

    * WithReplacement: If true, the building will be randomly selected with replacement. If false, no replacement will occur, until the list of buildings to select becomes empty, at which point it will be filled again with the list of all buildings.

ns3::OutdoorPositionAllocator

    * X: A random variable which represents the x coordinate of a position in a random box.
    * Y: A random variable which represents the y coordinate of a position in a random box.
    * Z: A random variable which represents the z coordinate of a position in a random box.
    * MaxAttempts: Maximum number of attempts for the rejection sampling before giving up.

ns3::GridBuildingAllocator

    * GridWidth: The number of objects laid out on a line.
    * MinX: The x coordinate where the grid starts.
    * MinY: The y coordinate where the grid starts.
    * LengthX:  the length of the wall of each building along the X axis.
    * LengthY:  the length of the wall of each building along the X axis.
    * DeltaX: The x space between buildings.
    * DeltaY: The y space between buildings.
    * Height: The height of the building (roof level)
    * LayoutType: The type of layout.

ns3::TrafficControlLayer

    * RootQueueDiscList: The list of root queue discs associated to this Traffic Control layer.

ns3::QueueDiscClass

    * QueueDisc: The queue disc attached to the class

ns3::QueueDisc

    * Quota: The maximum number of packets dequeued in a qdisc run
    * InternalQueueList: The list of internal queues.
    * PacketFilterList: The list of packet filters.
    * QueueDiscClassList: The list of queue disc classes.

ns3::PfifoFastQueueDisc

    * MaxSize: The maximum number of packets accepted by this queue disc.

ns3::FifoQueueDisc

    * MaxSize: The max queue size

ns3::RedQueueDisc

    * MeanPktSize: Average of packet size
    * IdlePktSize: Average packet size used during idle times. Used when m_cautions = 3
    * Wait: True for waiting between dropped packets
    * Gentle: True to increases dropping probability slowly when average queue exceeds maxthresh
    * ARED: True to enable ARED
    * AdaptMaxP: True to adapt m_curMaxP
    * FengAdaptive: True to enable Feng's Adaptive RED
    * NLRED: True to enable Nonlinear RED
    * MinTh: Minimum average length threshold in packets/bytes
    * MaxTh: Maximum average length threshold in packets/bytes
    * MaxSize: The maximum number of packets accepted by this queue disc
    * QW: Queue weight related to the exponential weighted moving average (EWMA)
    * LInterm: The maximum probability of dropping a packet
    * TargetDelay: Target average queuing delay in ARED
    * Interval: Time interval to update m_curMaxP
    * Top: Upper bound for m_curMaxP in ARED
    * Bottom: Lower bound for m_curMaxP in ARED
    * Alpha: Increment parameter for m_curMaxP in ARED
    * Beta: Decrement parameter for m_curMaxP in ARED
    * FengAlpha: Decrement parameter for m_curMaxP in Feng's Adaptive RED
    * FengBeta: Increment parameter for m_curMaxP in Feng's Adaptive RED
    * LastSet: Store the last time m_curMaxP was updated
    * Rtt: Round Trip Time to be considered while automatically setting m_bottom
    * Ns1Compat: NS-1 compatibility
    * LinkBandwidth: The RED link bandwidth
    * LinkDelay: The RED link delay
    * UseEcn: True to use ECN (packets are marked instead of being dropped)
    * UseHardDrop: True to always drop packets above max threshold

ns3::CoDelQueueDisc

    * MaxSize: The maximum number of packets/bytes accepted by this queue disc.
    * MinBytes: The CoDel algorithm minbytes parameter.
    * Interval: The CoDel algorithm interval
    * Target: The CoDel algorithm target queue delay

ns3::FqCoDelQueueDisc

    * Interval: The CoDel algorithm interval for each FQCoDel queue
    * Target: The CoDel algorithm target queue delay for each FQCoDel queue
    * MaxSize: The maximum number of packets accepted by this queue disc
    * Flows: The number of queues into which the incoming packets are classified
    * DropBatchSize: The maximum number of packets dropped from the fat flow
    * Perturbation: The salt used as an additional input to the hash function used to classify packets

ns3::PieQueueDisc

    * MeanPktSize: Average of packet size
    * A: Value of alpha
    * B: Value of beta
    * Tupdate: Time period to calculate drop probability
    * Supdate: Start time of the update timer
    * MaxSize: The maximum number of packets accepted by this queue disc
    * DequeueThreshold: Minimum queue size in bytes before dequeue rate is measured
    * QueueDelayReference: Desired queue delay
    * MaxBurstAllowance: Current max burst allowance in seconds before random drop

ns3::PrioQueueDisc

    * Priomap: The priority to band mapping.

ns3::TbfQueueDisc

    * MaxSize: The max queue size
    * Burst: Size of the first bucket in bytes
    * Mtu: Size of the second bucket in bytes. If null, it is initialized to the MTU of the attached NetDevice (if any)
    * Rate: Rate at which tokens enter the first bucket in bps or Bps.
    * PeakRate: Rate at which tokens enter the second bucket in bps or Bps.If null, there is no second bucket

ns3::NullMessageSimulatorImpl

    * SchedulerTune: Null Message scheduler tuning parameter

ns3::PointToPointNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
    * Address: The MAC address of this device.
    * DataRate: The default data rate for point to point links
    * ReceiveErrorModel: The receiver error model used to simulate packet loss
    * InterframeGap: The time to wait between packet (frame) transmissions
    * TxQueue: A queue to use as the transmit queue in the device.

ns3::PointToPointChannel

    * Delay: Propagation delay through the channel

ns3::BridgeNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
    * EnableLearning: Enable the learning mode of the Learning Bridge
    * ExpirationTime: Time it takes for learned MAC state entry to expire.

ns3::IpL4Protocol

    * ProtocolNumber: The IP protocol number.

ns3::Ipv4Interface

    * ArpCache: The arp cache for this ipv4 interface

ns3::Ipv4L3Protocol

    * DefaultTtl: The TTL value set by default on all outgoing packets generated on this node.
    * FragmentExpirationTimeout: When this timeout expires, the fragments will be cleared from the buffer.
    * InterfaceList: The set of Ipv4 interfaces associated to this Ipv4 stack.

ns3::Ipv4

    * IpForward: Globally enable or disable IP forwarding for all current and future Ipv4 devices.
    * WeakEsModel: RFC1122 term for whether host accepts datagram with a dest. address on another interface

ns3::UdpL4Protocol

    * SocketList: The list of sockets associated to this protocol.

ns3::RttMeanDeviation

    * Alpha: Gain used in estimating the RTT, must be 0 <= alpha <= 1
    * Beta: Gain used in estimating the RTT variation, must be 0 <= beta <= 1

ns3::RttEstimator

    * InitialEstimation: Initial RTT estimate

ns3::TcpL4Protocol

    * RttEstimatorType: Type of RttEstimator objects.
    * SocketType: Socket type of TCP objects.
    * RecoveryType: Recovery type of TCP objects.
    * SocketList: The list of sockets associated to this protocol.

ns3::ArpCache

    * AliveTimeout: When this timeout expires, the matching cache entry needs refreshing
    * DeadTimeout: When this timeout expires, a new attempt to resolve the matching entry is made
    * WaitReplyTimeout: When this timeout expires, the cache entries will be scanned and entries in WaitReply state will resend ArpRequest unless MaxRetries has been exceeded, in which case the entry is marked dead
    * MaxRetries: Number of retransmissions of ArpRequest before marking dead
    * PendingQueueSize: The size of the queue for packets pending an arp reply.

ns3::ArpL3Protocol

    * CacheList: The list of ARP caches
    * RequestJitter: The jitter in ms a node is allowed to wait before sending an ARP request.  Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and RequestJitter

ns3::UdpSocketImpl

    * IcmpCallback: Callback invoked whenever an icmp error is received on this socket.
    * IcmpCallback6: Callback invoked whenever an icmpv6 error is received on this socket.

ns3::UdpSocket

    * RcvBufSize: UdpSocket maximum receive buffer size (bytes)
    * IpTtl: socket-specific TTL for unicast IP packets (if non-zero)
    * IpMulticastTtl: socket-specific TTL for multicast IP packets (if non-zero)
    * IpMulticastIf: interface index for outgoing multicast on this socket; -1 indicates to use default interface
    * IpMulticastLoop: whether outgoing multicast sent also to loopback interface
    * MtuDiscover: If enabled, every outgoing ip packet will have the DF flag set.

ns3::Ipv4RawSocketImpl

    * Protocol: Protocol number to match.
    * IcmpFilter: Any icmp header whose type field matches a bit in this filter is dropped. Type must be less than 32.
    * IpHeaderInclude: Include IP Header information (a.k.a setsockopt (IP_HDRINCL)).

ns3::NdiscCache

    * UnresolvedQueueSize: Size of the queue for packets pending an NA reply.

ns3::Ipv6L3Protocol

    * DefaultTtl: The TTL value set by default on all outgoing packets generated on this node.
    * DefaultTclass: The TCLASS value set by default on all outgoing packets generated on this node.
    * InterfaceList: The set of IPv6 interfaces associated to this IPv6 stack.
    * SendIcmpv6Redirect: Send the ICMPv6 Redirect when appropriate.
    * StrongEndSystemModel: Reject packets for an address not configured on the interface they're coming from (RFC1222).

ns3::Ipv6

    * IpForward: Globally enable or disable IP forwarding for all current and future IPv6 devices.
    * MtuDiscover: If disabled, every interface will have its MTU set to 1280 bytes.

ns3::Ipv6RawSocketImpl

    * Protocol: Protocol number to match.

ns3::Ipv6Extension

    * ExtensionNumber: The IPv6 extension number.

ns3::Ipv6ExtensionRoutingDemux

    * RoutingExtensions: The set of IPv6 Routing extensions registered with this demux.

ns3::Ipv6ExtensionDemux

    * Extensions: The set of IPv6 extensions registered with this demux.

ns3::Ipv6Option

    * OptionNumber: The IPv6 option number.

ns3::Ipv6OptionDemux

    * Options: The set of IPv6 options registered with this demux.

ns3::Icmpv6L4Protocol

    * DAD: Always do DAD check.
    * SolicitationJitter: The jitter in ms a node is allowed to wait before sending any solicitation. Some jitter aims to prevent collisions. By default, the model will wait for a duration in ms defined by a uniform random-variable between 0 and SolicitationJitter
    * MaxMulticastSolicit: Neighbor Discovery node constants: max multicast solicitations.
    * MaxUnicastSolicit: Neighbor Discovery node constants: max unicast solicitations.
    * ReachableTime: Neighbor Discovery node constants: reachable time.
    * RetransmissionTime: Neighbor Discovery node constants: retransmission timer.
    * DelayFirstProbe: Neighbor Discovery node constants: delay for the first probe.

ns3::TcpSocketBase

    * MaxSegLifetime: Maximum segment lifetime in seconds, use for TIME_WAIT state transition to CLOSED state
    * MaxWindowSize: Max size of advertised window
    * IcmpCallback: Callback invoked whenever an icmp error is received on this socket.
    * IcmpCallback6: Callback invoked whenever an icmpv6 error is received on this socket.
    * WindowScaling: Enable or disable Window Scaling option
    * Sack: Enable or disable Sack option
    * Timestamp: Enable or disable Timestamp option
    * MinRto: Minimum retransmit timeout value
    * ClockGranularity: Clock Granularity used in RTO calculations
    * TxBuffer: TCP Tx buffer
    * RxBuffer: TCP Rx buffer
    * ReTxThreshold: Threshold for fast retransmit
    * LimitedTransmit: Enable limited transmit
    * EcnMode: Determines the mode of ECN

ns3::TcpSocket

    * SndBufSize: TcpSocket maximum transmit buffer size (bytes)
    * RcvBufSize: TcpSocket maximum receive buffer size (bytes)
    * SegmentSize: TCP maximum segment size in bytes (may be adjusted based on MTU discovery)
    * InitialSlowStartThreshold: TCP initial slow start threshold (bytes)
    * InitialCwnd: TCP initial congestion window size (segments)
    * ConnTimeout: TCP retransmission timeout when opening connection (seconds)
    * ConnCount: Number of connection attempts (SYN retransmissions) before returning failure
    * DataRetries: Number of data retransmission attempts
    * DelAckTimeout: Timeout value for TCP delayed acks, in seconds
    * DelAckCount: Number of packets to wait before sending a TCP ack
    * TcpNoDelay: Set to true to disable Nagle's algorithm
    * PersistTimeout: Persist timeout to probe for rx window

ns3::TcpSocketState

    * EnablePacing: Enable Pacing
    * MaxPacingRate: Set Max Pacing Rate

ns3::TcpHybla

    * RRTT: Reference RTT

ns3::TcpVegas

    * Alpha: Lower bound of packets in network
    * Beta: Upper bound of packets in network
    * Gamma: Limit on increase

ns3::TcpWestwood

    * FilterType: Use this to choose no filter or Tustin's approximation filter
    * ProtocolType: Use this to let the code run as Westwood or WestwoodPlus

ns3::TcpScalable

    * AIFactor: Additive Increase Factor
    * MDFactor: Multiplicative Decrease Factor

ns3::TcpVeno

    * Beta: Threshold for congestion detection

ns3::TcpBic

    * FastConvergence: Turn on/off fast convergence.
    * Beta: Beta for multiplicative decrease
    * MaxIncr: Limit on increment allowed during binary search
    * LowWnd: Threshold window size (in segments) for engaging BIC response
    * SmoothPart: Number of RTT needed to approach cWnd_max from cWnd_max-BinarySearchCoefficient. It can be viewed as the gradient of the slow start AIM phase: less this value is, more steep the increment will be.
    * BinarySearchCoefficient: Inverse of the coefficient for the binary search. Default 4, as in Linux

ns3::TcpYeah

    * Alpha: Maximum backlog allowed at the bottleneck queue
    * Gamma: Fraction of queue to be removed per RTT
    * Delta: Log minimum fraction of cwnd to be removed on loss
    * Epsilon: Log maximum fraction to be removed on early decongestion
    * Phy: Maximum delta from base
    * Rho: Minimum # of consecutive RTT to consider competition on loss
    * Zeta: Minimum # of state switches to reset m_renoCount
    * StcpAiFactor: STCP additive increase factor

ns3::TcpLedbat

    * TargetDelay: Targeted Queue Delay
    * BaseHistoryLen: Number of Base delay samples
    * NoiseFilterLen: Number of Current delay samples
    * Gain: Offset Gain
    * SSParam: Possibility of Slow Start
    * MinCwnd: Minimum cWnd for Ledbat

ns3::TcpIllinois

    * AlphaMin: Minimum alpha threshold
    * AlphaMax: Maximum alpha threshold
    * AlphaBase: Alpha base threshold
    * BetaMin: Minimum beta threshold
    * BetaMax: Maximum beta threshold
    * BetaBase: Beta base threshold
    * WinThresh: Window threshold
    * Theta: Theta threshold

ns3::TcpHtcp

    * DefaultBackoff: The default AIMD backoff factor
    * ThroughputRatio: Threshold value for updating beta
    * DeltaL: Delta_L parameter in increase function

ns3::TcpPrrRecovery

    * ReductionBound: Type of Reduction Bound

ns3::Ipv4GlobalRouting

    * RandomEcmpRouting: Set to true if packets are randomly routed among ECMP; set to false for using only one route consistently
    * RespondToInterfaceEvents: Set to true if you want to dynamically recompute the global routes upon Interface notification events (up/down, or add/remove address)

ns3::Ipv6PmtuCache

    * CacheExpiryTime: Validity time for a Path MTU entry. Default is 10 minutes, minimum is 5 minutes.

ns3::RipNg

    * UnsolicitedRoutingUpdate: The time between two Unsolicited Routing Updates.
    * StartupDelay: Maximum random delay for protocol startup (send route requests).
    * TimeoutDelay: The delay to invalidate a route.
    * GarbageCollectionDelay: The delay to delete an expired route.
    * MinTriggeredCooldown: Min cooldown delay after a Triggered Update.
    * MaxTriggeredCooldown: Max cooldown delay after a Triggered Update.
    * SplitHorizon: Split Horizon strategy.
    * LinkDownValue: Value for link down in count to infinity.

ns3::Rip

    * UnsolicitedRoutingUpdate: The time between two Unsolicited Routing Updates.
    * StartupDelay: Maximum random delay for protocol startup (send route requests).
    * TimeoutDelay: The delay to invalidate a route.
    * GarbageCollectionDelay: The delay to delete an expired route.
    * MinTriggeredCooldown: Min cooldown delay after a Triggered Update.
    * MaxTriggeredCooldown: Max cooldown delay after a Triggered Update.
    * SplitHorizon: Split Horizon strategy.
    * LinkDownValue: Value for link down in count to infinity.

ns3::itp

    * consumer: Consumer

ns3::producer

    * PayloadSize: The destination port of the outbound packets

ns3::consumer

    * RetxTimer: Timeout defining how frequent retransmission timeouts should be checked

ns3::RttEstimator1

    * MaxMultiplier: Maximum RTO Multiplier
    * InitialEstimation: Initial RTT estimation
    * MinRTO: Minimum retransmit timeout value
    * FastRetxTimer: Timeout defining how frequent FasterRetransmission timeouts should be checked

ns3::ItpCache

    * PayloadSize: The destination port of the outbound packets

ns3::TapBridge

    * Mtu: The MAC-level Maximum Transmission Unit
    * DeviceName: The name of the tap device to create.
    * Gateway: The IP address of the default gateway to assign to the host machine, when in ConfigureLocal mode.
    * IpAddress: The IP address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered IP address of the simulated device.
    * MacAddress: The MAC address to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
    * Netmask: The network mask to assign to the tap device, when in ConfigureLocal mode.  This address will override the discovered MAC address of the simulated device.
    * Start: The simulation time at which to spin up the tap device read thread.
    * Stop: The simulation time at which to tear down the tap device read thread.
    * Mode: The operating and configuration mode to use.

ns3::SixLowPanNetDevice

    * Rfc6282: Use RFC6282 (IPHC) if true, RFC4944 (HC1) otherwise.
    * OmitUdpChecksum: Omit the UDP checksum in IPHC compression.
    * FragmentReassemblyListSize: The maximum size of the reassembly buffer (in packets). Zero meaning infinite.
    * FragmentExpirationTimeout: When this timeout expires, the fragments will be cleared from the buffer.
    * CompressionThreshold: The minimum MAC layer payload size.
    * ForceEtherType: Force a specific EtherType in L2 frames.
    * EtherType: The specific EtherType to be used in L2 frames.

ns3::olsr::RoutingProtocol

    * HelloInterval: HELLO messages emission interval.
    * TcInterval: TC messages emission interval.
    * MidInterval: MID messages emission interval.  Normally it is equal to TcInterval.
    * HnaInterval: HNA messages emission interval.  Normally it is equal to TcInterval.
    * Willingness: Willingness of a node to carry and forward traffic for other nodes.

ns3::WimaxNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
    * Phy: The PHY layer attached to this device.
    * Channel: The channel attached to this device.
    * RTG: receive/transmit transition gap.
    * TTG: transmit/receive transition gap.
    * ConnectionManager: The connection manager attached to this device.
    * BurstProfileManager: The burst profile manager attached to this device.
    * BandwidthManager: The bandwidth manager attached to this device.
    * InitialRangingConnection: Initial ranging connection
    * BroadcastConnection: Broadcast connection

ns3::BaseStationNetDevice

    * BSScheduler: Downlink Scheduler for BS
    * InitialRangInterval: Time between Initial Ranging regions assigned by the BS. Maximum is 2s
    * DcdInterval: Time between transmission of DCD messages. Maximum value is 10s.
    * UcdInterval: Time between transmission of UCD messages. Maximum value is 10s.
    * IntervalT8: Wait for DSA/DSC Acknowledge timeout. Maximum 300ms.
    * RangReqOppSize: The ranging opportunity size in symbols
    * BwReqOppSize: The bandwidth request opportunity size in symbols
    * MaxRangCorrectionRetries: Number of retries on contention Ranging Requests
    * SSManager: The ss manager attached to this device.
    * Scheduler: The BS scheduler attached to this device.
    * LinkManager: The link manager attached to this device.
    * UplinkScheduler: The uplink scheduler attached to this device.
    * BsIpcsPacketClassifier: The uplink IP packet classifier attached to this device.
    * ServiceFlowManager: The service flow manager attached to this device.

ns3::SubscriberStationNetDevice

    * BasicConnection: Basic connection
    * PrimaryConnection: Primary connection
    * LostDlMapInterval: Time since last received DL-MAP message before downlink synchronization is considered lost. Maximum is 600ms
    * LostUlMapInterval: Time since last received UL-MAP before uplink synchronization is considered lost, maximum is 600.
    * MaxDcdInterval: Maximum time between transmission of DCD messages. Maximum is 10s
    * MaxUcdInterval: Maximum time between transmission of UCD messages. Maximum is 10s
    * IntervalT1: Wait for DCD timeout. Maximum is 5*maxDcdInterval
    * IntervalT2: Wait for broadcast ranging timeout, i.e., wait for initial ranging opportunity. Maximum is 5*Ranging interval
    * IntervalT3: ranging Response reception timeout following the transmission of a ranging request. Maximum is 200ms
    * IntervalT7: wait for DSA/DSC/DSD Response timeout. Maximum is 1s
    * IntervalT12: Wait for UCD descriptor.Maximum is 5*MaxUcdInterval
    * IntervalT20: Time the SS searches for preambles on a given channel. Minimum is 2 MAC frames
    * IntervalT21: time the SS searches for (decodable) DL-MAP on a given channel
    * MaxContentionRangingRetries: Number of retries on contention Ranging Requests
    * SSScheduler: The ss scheduler attached to this device.
    * LinkManager: The ss link manager attached to this device.
    * Classifier: The ss classifier attached to this device.

ns3::WimaxPhy

    * Channel: Wimax channel
    * FrameDuration: The frame duration in seconds.
    * Frequency: The central frequency in KHz.
    * Bandwidth: The channel bandwidth in Hz.

ns3::WimaxConnection

    * Type: Connection type
    * TxQueue: Transmit queue

ns3::SimpleOfdmWimaxPhy

    * NoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.
    * TxPower: Transmission power (dB).
    * G: This is the ratio of CP time to useful time.
    * TxGain: Transmission gain (dB).
    * RxGain: Reception gain (dB).
    * Nfft: FFT size
    * TraceFilePath: Path to the directory containing SNR to block error rate files

ns3::UplinkSchedulerMBQoS

    * WindowInterval: The time to wait to reset window

ns3::WimaxMacQueue

    * MaxSize: Maximum size

ns3::Ping6

    * MaxPackets: The maximum number of packets the application will send
    * Interval: The time to wait between packets
    * RemoteIpv6: The Ipv6Address of the outbound packets
    * LocalIpv6: Local Ipv6Address of the sender
    * PacketSize: Size of packets generated

ns3::Radvd

    * AdvertisementJitter: Uniform variable to provide jitter between min and max values of AdvInterval

ns3::V4Ping

    * Remote: The address of the machine we want to ping.
    * Verbose: Produce usual output.
    * Interval: Wait  interval  seconds between sending each packet.
    * Size: The number of data bytes to be sent, real packet will be 8 (ICMP) + 20 (IP) bytes longer.

ns3::DhcpServer

    * LeaseTime: Lease for which address will be leased.
    * RenewTime: Time after which client should renew.
    * RebindTime: Time after which client should rebind.
    * PoolAddresses: Pool of addresses to provide on request.
    * FirstAddress: The First valid address that can be given.
    * LastAddress: The Last valid address that can be given.
    * PoolMask: Mask of the pool of addresses.
    * Gateway: Address of default gateway

ns3::DhcpClient

    * RTRS: Time for retransmission of Discover message
    * Collect: Time for which offer collection starts
    * ReRequest: Time after which request will be resent to next server
    * Transactions: The possible value of transaction numbers 

ns3::FlowMonitor

    * MaxPerHopDelay: The maximum per-hop delay that should be considered.  Packets still not received after this delay are to be considered lost.
    * StartTime: The time when the monitoring starts.
    * DelayBinWidth: The width used in the delay histogram.
    * JitterBinWidth: The width used in the jitter histogram.
    * PacketSizeBinWidth: The width used in the packetSize histogram.
    * FlowInterruptionsBinWidth: The width used in the flowInterruptions histogram.
    * FlowInterruptionsMinTime: The minimum inter-arrival time that is considered a flow interruption.

ns3::dsdv::RoutingProtocol

    * PeriodicUpdateInterval: Periodic interval between exchange of full routing tables among nodes. 
    * SettlingTime: Minimum time an update is to be stored in adv table before sending outin case of change in metric (in seconds)
    * MaxQueueLen: Maximum number of packets that we allow a routing protocol to buffer.
    * MaxQueuedPacketsPerDst: Maximum number of packets that we allow per destination to buffer.
    * MaxQueueTime: Maximum time packets can be queued (in seconds)
    * EnableBuffering: Enables buffering of data packets if no route to destination is available
    * EnableWST: Enables Weighted Settling Time for the updates before advertising
    * Holdtimes: Times the forwarding Interval to purge the route.
    * WeightedFactor: WeightedFactor for the settling time if Weighted Settling Time is enabled
    * EnableRouteAggregation: Enables Weighted Settling Time for the updates before advertising
    * RouteAggregationTime: Time to aggregate updates before sending them out (in seconds)

ns3::BulkSendApplication

    * SendSize: The amount of data to send each time.
    * Remote: The address of the destination
    * MaxBytes: The total number of bytes to send. Once these bytes are sent, no data  is sent again. The value zero means that there is no limit.
    * Protocol: The type of protocol to use.

ns3::OnOffApplication

    * DataRate: The data rate in on state.
    * PacketSize: The size of packets sent in on state
    * Remote: The address of the destination
    * OnTime: A RandomVariableStream used to pick the duration of the 'On' state.
    * OffTime: A RandomVariableStream used to pick the duration of the 'Off' state.
    * MaxBytes: The total number of bytes to send. Once these bytes are sent, no packet is sent again, even in on state. The value zero means that there is no limit.
    * Protocol: The type of protocol to use. This should be a subclass of ns3::SocketFactory

ns3::PacketSink

    * Local: The Address on which to Bind the rx socket.
    * Protocol: The type id of the protocol to use for the rx socket.

ns3::UdpClient

    * MaxPackets: The maximum number of packets the application will send
    * Interval: The time to wait between packets
    * RemoteAddress: The destination Address of the outbound packets
    * RemotePort: The destination port of the outbound packets
    * PacketSize: Size of packets generated. The minimum packet size is 12 bytes which is the size of the header carrying the sequence number and the time stamp.

ns3::UdpServer

    * Port: Port on which we listen for incoming packets.
    * PacketWindowSize: The size of the window used to compute the packet loss. This value should be a multiple of 8.

ns3::UdpTraceClient

    * RemoteAddress: The destination Address of the outbound packets
    * RemotePort: The destination port of the outbound packets
    * MaxPacketSize: The maximum size of a packet (including the SeqTsHeader, 12 bytes).
    * TraceFilename: Name of file to load a trace from. By default, uses a hardcoded trace.
    * TraceLoop: Loops through the trace file, starting again once it is over.

ns3::UdpEchoClient

    * MaxPackets: The maximum number of packets the application will send
    * Interval: The time to wait between packets
    * RemoteAddress: The destination Address of the outbound packets
    * RemotePort: The destination port of the outbound packets
    * PacketSize: Size of echo data in outbound packets

ns3::UdpEchoServer

    * Port: Port on which we listen for incoming packets.

ns3::ThreeGppHttpClient

    * Variables: Variable collection, which is used to control e.g. timing and HTTP request size.
    * RemoteServerAddress: The address of the destination server.
    * RemoteServerPort: The destination port of the outbound packets.

ns3::ThreeGppHttpServer

    * Variables: Variable collection, which is used to control e.g. processing and object generation delays.
    * LocalAddress: The local address of the server, i.e., the address on which to bind the Rx socket.
    * LocalPort: Port on which the application listen for incoming packets.
    * Mtu: Maximum transmission unit (in bytes) of the TCP sockets used in this application, excluding the compulsory 40 bytes TCP header. Typical values are 1460 and 536 bytes. The attribute is read-only because the value is randomly determined.

ns3::ThreeGppHttpVariables

    * RequestSize: The constant size of HTTP request packet (in bytes).
    * MainObjectGenerationDelay: The constant time needed by HTTP server to generate a main object as a response.
    * MainObjectSizeMean: The mean of main object sizes (in bytes).
    * MainObjectSizeStdDev: The standard deviation of main object sizes (in bytes).
    * MainObjectSizeMin: The minimum value of main object sizes (in bytes).
    * MainObjectSizeMax: The maximum value of main object sizes (in bytes).
    * EmbeddedObjectGenerationDelay: The constant time needed by HTTP server to generate an embedded object as a response.
    * EmbeddedObjectSizeMean: The mean of embedded object sizes (in bytes).
    * EmbeddedObjectSizeStdDev: The standard deviation of embedded object sizes (in bytes).
    * EmbeddedObjectSizeMin: The minimum value of embedded object sizes (in bytes).
    * EmbeddedObjectSizeMax: The maximum value of embedded object sizes (in bytes).
    * NumOfEmbeddedObjectsMax: The upper bound parameter of Pareto distribution for the number of embedded objects per web page. The actual maximum value is this value subtracted by the scale parameter.
    * NumOfEmbeddedObjectsShape: The shape parameter of Pareto distribution for the number of embedded objects per web page.
    * NumOfEmbeddedObjectsScale: The scale parameter of Pareto distribution for the number of embedded objects per web page.
    * ReadingTimeMean: The mean of reading time.
    * ParsingTimeMean: The mean of parsing time.
    * LowMtuSize: The lower MTU size.
    * HighMtuSize: The higher MTU size.
    * HighMtuProbability: The probability that higher MTU size is used.

ns3::ItpSource

    * MaxPackets: The maximum number of packets the application will send
    * Interval: The time to wait between packets
    * RemoteAddress: The destination Address of the outbound packets
    * RemotePort: The destination port of the outbound packets
    * PacketSize: Size of echo data in outbound packets

ns3::ItpSink

    * Port: Port on which we listen for incoming packets.

ns3::UdpEchoClient1

    * MaxPackets: The maximum number of packets the application will send
    * Interval: The time to wait between packets
    * RemoteAddress: The destination Address of the outbound packets
    * RemotePort: The destination port of the outbound packets
    * PacketSize: Size of echo data in outbound packets

ns3::UdpEchoServer1

    * Port: Port on which we listen for incoming packets.

ns3::IsotropicAntennaModel

    * Gain: The gain of the antenna in dB

ns3::CosineAntennaModel

    * Beamwidth: The 3dB beamwidth (degrees)
    * Orientation: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
    * MaxGain: The gain (dB) at the antenna boresight (the direction of maximum gain)

ns3::ParabolicAntennaModel

    * Beamwidth: The 3dB beamwidth (degrees)
    * Orientation: The angle (degrees) that expresses the orientation of the antenna on the x-y plane relative to the x axis
    * MaxAttenuation: The maximum attenuation (dB) of the antenna radiation pattern.

ns3::ConstantSpectrumPropagationLossModel

    * Loss: Path loss (dB) between transmitter and receiver

ns3::SpectrumChannel

    * MaxLossDb: If a single-frequency PropagationLossModel is used, this value represents the maximum loss in dB for which transmissions will be passed to the receiving PHY. Signals for which the PropagationLossModel returns a loss bigger than this value will not be propagated to the receiver. This parameter is to be used to reduce the computational load by not propagating signals that are far beyond the interference range. Note that the default value corresponds to considering all signals for reception. Tune this value with care. 
    * PropagationLossModel: A pointer to the propagation loss model attached to this channel.

ns3::WaveformGenerator

    * Period: the period (=1/frequency)
    * DutyCycle: the duty cycle of the generator, i.e., the fraction of the period that is occupied by a signal

ns3::SpectrumAnalyzer

    * Resolution: The length of the time interval over which the power spectral density of incoming signals is averaged
    * NoisePowerSpectralDensity: The power spectral density of the measuring instrument noise, in Watt/Hz. Mostly useful to make spectrograms look more similar to those obtained by real devices. Defaults to the value for thermal noise at 300K.

ns3::AlohaNoackNetDevice

    * Address: The MAC address of this device.
    * Queue: packets being transmitted get queued here
    * Mtu: The Maximum Transmission Unit
    * Phy: The PHY layer attached to this device.

ns3::HalfDuplexIdealPhy

    * Rate: The PHY rate used by this device

ns3::NonCommunicatingNetDevice

    * Phy: The PHY layer attached to this device.

ns3::TvSpectrumTransmitter

    * TvType: The type of TV transmitter/modulation to be used.
    * StartFrequency: The lower end frequency (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
    * ChannelBandwidth: The bandwidth (in Hz) of the TV transmitter's signal. Must be greater than or equal to 0.
    * BasePsd: The base power spectral density (in dBm/Hz) of the TV transmitter's transmitted spectrum. Base PSD is the maximum PSD of the spectrum excluding pilots. For analog and COFDM transmitters this is the maximum PSD, but for 8-VSB transmitters this is the maximum PSD of the main signal spectrum (flat-top segment) since the pilot actually has the maximum PSD overall.
    * Antenna: The AntennaModel to be used. Allows classes inherited from ns3::AntennaModel. Defaults to ns3::IsotropicAntennaModel.
    * StartingTime: The time point after the simulation begins in which the TV transmitter will begin transmitting.
    * TransmitDuration: The duration of time that the TV transmitter will transmit for.

ns3::LteSpectrumPhy

    * DataErrorModelEnabled: Activate/Deactivate the error model of data (TBs of PDSCH and PUSCH) [by default is active].
    * CtrlErrorModelEnabled: Activate/Deactivate the error model of control (PCFICH-PDCCH decodification) [by default is active].

ns3::LteEnbPhy

    * TxPower: Transmission power in dBm
    * NoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver.  According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an ideal receiver with the same overall gain and bandwidth when the receivers are connected to sources at the standard noise temperature T0."  In this model, we consider T0 = 290K.
    * MacToChannelDelay: The delay in TTI units that occurs between a scheduling decision in the MAC and the actual start of the transmission by the PHY. This is intended to be used to model the latency of real PHY and MAC implementations.
    * UeSinrSamplePeriod: The sampling period for reporting UEs' SINR stats.
    * InterferenceSamplePeriod: The sampling period for reporting interference stats
    * DlSpectrumPhy: The downlink LteSpectrumPhy associated to this LtePhy
    * UlSpectrumPhy: The uplink LteSpectrumPhy associated to this LtePhy

ns3::LteUePhy

    * TxPower: Transmission power in dBm
    * NoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0." In this model, we consider T0 = 290K.
    * TxMode1Gain: Transmission mode 1 gain in dB
    * TxMode2Gain: Transmission mode 2 gain in dB
    * TxMode3Gain: Transmission mode 3 gain in dB
    * TxMode4Gain: Transmission mode 4 gain in dB
    * TxMode5Gain: Transmission mode 5 gain in dB
    * TxMode6Gain: Transmission mode 6 gain in dB
    * TxMode7Gain: Transmission mode 7 gain in dB
    * RsrpSinrSamplePeriod: The sampling period for reporting RSRP-SINR stats (default value 1)
    * DlSpectrumPhy: The downlink LteSpectrumPhy associated to this LtePhy
    * UlSpectrumPhy: The uplink LteSpectrumPhy associated to this LtePhy
    * RsrqUeMeasThreshold: Receive threshold for PSS on RSRQ [dB]
    * UeMeasurementsFilterPeriod: Time period for reporting UE measurements, i.e., thelength of layer-1 filtering.
    * EnableUplinkPowerControl: If true, Uplink Power Control will be enabled.

ns3::LteAmc

    * Ber: The requested BER in assigning MCS (default is 0.00005).
    * AmcModel: AMC model used to assign CQI

ns3::UeManager

    * DataRadioBearerMap: List of UE DataRadioBearerInfo by DRBID.
    * Srb0: SignalingRadioBearerInfo for SRB0
    * Srb1: SignalingRadioBearerInfo for SRB1
    * C-RNTI: Cell Radio Network Temporary Identifier

ns3::LteEnbRrc

    * UeMap: List of UeManager by C-RNTI.
    * DefaultTransmissionMode: The default UEs' transmission mode (0: SISO)
    * EpsBearerToRlcMapping: Specify which type of RLC will be used for each type of EPS bearer. 
    * SystemInformationPeriodicity: The interval for sending system information (Time value)
    * SrsPeriodicity: The SRS periodicity in milliseconds
    * ConnectionRequestTimeoutDuration: After a RA attempt, if no RRC CONNECTION REQUEST is received before this time, the UE context is destroyed. Must account for reception of RAR and transmission of RRC CONNECTION REQUEST over UL GRANT.
    * ConnectionSetupTimeoutDuration: After accepting connection request, if no RRC CONNECTION SETUP COMPLETE is received before this time, the UE context is destroyed. Must account for the UE's reception of RRC CONNECTION SETUP and transmission of RRC CONNECTION SETUP COMPLETE.
    * ConnectionRejectedTimeoutDuration: Time to wait between sending a RRC CONNECTION REJECT and destroying the UE context
    * HandoverJoiningTimeoutDuration: After accepting a handover request, if no RRC CONNECTION RECONFIGURATION COMPLETE is received before this time, the UE context is destroyed. Must account for reception of X2 HO REQ ACK by source eNB, transmission of the Handover Command, non-contention-based random access and reception of the RRC CONNECTION RECONFIGURATION COMPLETE message.
    * HandoverLeavingTimeoutDuration: After issuing a Handover Command, if neither RRC CONNECTION RE-ESTABLISHMENT nor X2 UE Context Release has been previously received, the UE context is destroyed.
    * QRxLevMin: One of information transmitted within the SIB1 message, indicating the required minimum RSRP level that any UE must receive from this cell before it is allowed to camp to this cell. The default value -70 corresponds to -140 dBm and is the lowest possible value as defined by Section 6.3.4 of 3GPP TS 36.133. This restriction, however, only applies to initial cell selection and EPC-enabled simulation.
    * NumberOfComponentCarriers: Number of Component Carriers 
    * AdmitHandoverRequest: Whether to admit an X2 handover request from another eNB
    * AdmitRrcConnectionRequest: Whether to admit a connection request from a UE
    * RsrpFilterCoefficient: Determines the strength of smoothing effect induced by layer 3 filtering of RSRP in all attached UE; if set to 0, no layer 3 filtering is applicable
    * RsrqFilterCoefficient: Determines the strength of smoothing effect induced by layer 3 filtering of RSRQ in all attached UE; if set to 0, no layer 3 filtering is applicable

ns3::LteUeRrc

    * DataRadioBearerMap: List of UE RadioBearerInfo for Data Radio Bearers by LCID.
    * Srb0: SignalingRadioBearerInfo for SRB0
    * Srb1: SignalingRadioBearerInfo for SRB1
    * CellId: Serving cell identifier
    * C-RNTI: Cell Radio Network Temporary Identifier
    * T300: Timer for the RRC Connection Establishment procedure (i.e., the procedure is deemed as failed if it takes longer than this)

ns3::LteRlcTm

    * MaxTxBufferSize: Maximum Size of the Transmission Buffer (in Bytes)

ns3::LteRlcUm

    * MaxTxBufferSize: Maximum Size of the Transmission Buffer (in Bytes)

ns3::LteRlcAm

    * PollRetransmitTimer: Value of the t-PollRetransmit timer (See section 7.3 of 3GPP TS 36.322)
    * ReorderingTimer: Value of the t-Reordering timer (See section 7.3 of 3GPP TS 36.322)
    * StatusProhibitTimer: Value of the t-StatusProhibit timer (See section 7.3 of 3GPP TS 36.322)
    * ReportBufferStatusTimer: How much to wait to issue a new Report Buffer Status since the last time a new SDU was received
    * TxOpportunityForRetxAlwaysBigEnough: If true, always pretend that the size of a TxOpportunity is big enough for retransmission. If false (default and realistic behavior), no retx is performed unless the corresponding TxOpportunity is big enough.

ns3::LteNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit

ns3::LteEnbNetDevice

    * LteEnbRrc: The RRC associated to this EnbNetDevice
    * LteHandoverAlgorithm: The handover algorithm associated to this EnbNetDevice
    * LteAnr: The automatic neighbour relation function associated to this EnbNetDevice
    * LteFfrAlgorithm: The FFR algorithm associated to this EnbNetDevice
    * LteEnbComponentCarrierManager: The RRC associated to this EnbNetDevice
    * ComponentCarrierMap: List of component carriers.
    * UlBandwidth: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
    * DlBandwidth: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
    * CellId: Cell Identifier
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
    * UlEarfcn: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
    * CsgId: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
    * CsgIndication: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.

ns3::LteUeNetDevice

    * EpcUeNas: The NAS associated to this UeNetDevice
    * LteUeRrc: The RRC associated to this UeNetDevice
    * LteUeComponentCarrierManager: The ComponentCarrierManager associated to this UeNetDevice
    * ComponentCarrierMapUe: List of all component Carrier.
    * Imsi: International Mobile Subscriber Identity assigned to this UE
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
    * CsgId: The Closed Subscriber Group (CSG) identity that this UE is associated with, i.e., giving the UE access to cells which belong to this particular CSG. This restriction only applies to initial cell selection and EPC-enabled simulation. This does not revoke the UE's access to non-CSG cells. 

ns3::LteHelper

    * Scheduler: The type of scheduler to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::FfMacScheduler.
    * FfrAlgorithm: The type of FFR algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteFfrAlgorithm.
    * HandoverAlgorithm: The type of handover algorithm to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting from ns3::LteHandoverAlgorithm.
    * PathlossModel: The type of pathloss model to be used. The allowed values for this attributes are the type names of any class inheriting from ns3::PropagationLossModel.
    * FadingModel: The type of fading model to be used.The allowed values for this attributes are the type names of any class inheriting from ns3::SpectrumPropagationLossModel.If the type is set to an empty string, no fading model is used.
    * UseIdealRrc: If true, LteRrcProtocolIdeal will be used for RRC signaling. If false, LteRrcProtocolReal will be used.
    * AnrEnabled: Activate or deactivate Automatic Neighbour Relation function
    * UsePdschForCqiGeneration: If true, DL-CQI will be calculated from PDCCH as signal and PDSCH as interference If false, DL-CQI will be calculated from PDCCH as signal and PDCCH as interference  
    * EnbComponentCarrierManager: The type of Component Carrier Manager to be used for eNBs. The allowed values for this attributes are the type names of any class inheriting ns3::LteEnbComponentCarrierManager.
    * UeComponentCarrierManager: The type of Component Carrier Manager to be used for UEs. The allowed values for this attributes are the type names of any class inheriting ns3::LteUeComponentCarrierManager.
    * UseCa: If true, Carrier Aggregation feature is enabled and a valid Component Carrier Map is expected.If false, single carrier simulation.
    * NumberOfComponentCarriers: Set the number of Component carrier to use If it is more than one and m_useCa is false, it will raise an error 

ns3::PointToPointEpcHelper

    * S1uLinkDataRate: The data rate to be used for the next S1-U link to be created
    * S1uLinkDelay: The delay to be used for the next S1-U link to be created
    * S1uLinkMtu: The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.
    * X2LinkDataRate: The data rate to be used for the next X2 link to be created
    * X2LinkDelay: The delay to be used for the next X2 link to be created
    * X2LinkMtu: The MTU of the next X2 link to be created. Note that, because of some big X2 messages, you need a big MTU.
    * S1uLinkPcapPrefix: Prefix for Pcap generated by S1-U link
    * X2LinkPcapPrefix: Prefix for Pcap generated by X2 link
    * X2LinkEnablePcap: Enable Pcap for X2 link
    * S1uLinkEnablePcap: Enable Pcap for X2 link

ns3::RadioBearerStatsCalculator

    * StartTime: Start time of the on going epoch.
    * EpochDuration: Epoch duration.
    * DlRlcOutputFilename: Name of the file where the downlink results will be saved.
    * UlRlcOutputFilename: Name of the file where the uplink results will be saved.
    * DlPdcpOutputFilename: Name of the file where the downlink results will be saved.
    * UlPdcpOutputFilename: Name of the file where the uplink results will be saved.

ns3::PhyStatsCalculator

    * DlRsrpSinrFilename: Name of the file where the RSRP/SINR statistics will be saved.
    * UlSinrFilename: Name of the file where the UE SINR statistics will be saved.
    * UlInterferenceFilename: Name of the file where the interference statistics will be saved.

ns3::MacStatsCalculator

    * DlOutputFilename: Name of the file where the downlink results will be saved.
    * UlOutputFilename: Name of the file where the uplink results will be saved.

ns3::PhyTxStatsCalculator

    * DlTxOutputFilename: Name of the file where the downlink results will be saved.
    * UlTxOutputFilename: Name of the file where the uplink results will be saved.

ns3::PhyRxStatsCalculator

    * DlRxOutputFilename: Name of the file where the downlink results will be saved.
    * UlRxOutputFilename: Name of the file where the uplink results will be saved.

ns3::RadioEnvironmentMapHelper

    * ChannelPath: The path to the channel for which the Radio Environment Map is to be generated
    * OutputFile: the filename to which the Radio Environment Map is saved
    * XMin: The min x coordinate of the map.
    * YMin: The min y coordinate of the map.
    * XMax: The max x coordinate of the map.
    * YMax: The max y coordinate of the map.
    * XRes: The resolution (number of points) of the map along the x axis.
    * YRes: The resolution (number of points) of the map along the y axis.
    * Z: The value of the z coordinate for which the map is to be generated
    * StopWhenDone: If true, Simulator::Stop () will be called as soon as the REM has been generated
    * NoisePower: the power of the measuring instrument noise, in Watts. Default to a kT of -174 dBm with a noise figure of 9 dB and a bandwidth of 25 LTE Resource Blocks
    * MaxPointsPerIteration: Maximum number of REM points to be calculated per iteration. Every point consumes approximately 5KB of memory.
    * Earfcn: E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
    * Bandwidth: Transmission Bandwidth Configuration (in number of RBs) over which the SINR will be calculated
    * UseDataChannel: If true, REM will be generated for PDSCH and for PDCCH otherwise 
    * RbId: Resource block Id, for which REM will be generated,default value is -1, what means REM will be averaged from all RBs

ns3::LteHexGridEnbTopologyHelper

    * InterSiteDistance: The distance [m] between nearby sites
    * SectorOffset: The offset [m] in the position for the node of each sector with respect to the center of the three-sector site
    * SiteHeight: The height [m] of each site
    * MinX: The x coordinate where the hex grid starts.
    * MinY: The y coordinate where the hex grid starts.
    * GridWidth: The number of sites in even rows (odd rows will have one additional site).

ns3::FfMacScheduler

    * UlCqiFilter: The filter to apply on UL CQIs received

ns3::RrFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::LteEnbMac

    * NumberOfRaPreambles: how many random access preambles are available for the contention based RACH process
    * PreambleTransMax: Maximum number of random access preamble transmissions
    * RaResponseWindowSize: length of the window (in TTIs) for the reception of the random access response (RAR); the resulting RAR timeout is this value + 3 ms
    * ComponentCarrierId: ComponentCarrier Id, needed to reply on the appropriate sap.

ns3::LteRadioBearerTag

    * rnti: The rnti that indicates the UE to which packet belongs
    * lcid: The id within the UE identifying the logical channel to which the packet belongs

ns3::EpsBearerTag

    * rnti: The rnti that indicates the UE which packet belongs
    * bid: The EPS bearer id within the UE to which the packet belongs

ns3::PfFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::FdMtFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::TdMtFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::TtaFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::FdBetFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::TdBetFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::FdTbfqFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * DebtLimit: Flow debt limit (default -625000 bytes)
    * CreditLimit: Flow credit limit (default 625000 bytes)
    * TokenPoolSize: The maximum value of flow token pool (default 1 bytes)
    * CreditableThreshold: Threshold of flow credit (default 0 bytes)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::TdTbfqFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * DebtLimit: Flow debt limit (default -625000 bytes)
    * CreditLimit: Flow credit limit (default 625000 bytes)
    * TokenPoolSize: The maximum value of flow token pool (default 1 bytes)
    * CreditableThreshold: Threshold of flow credit (default 0 bytes)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::PssFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * PssFdSchedulerType: FD scheduler in PSS (default value is PFsch)
    * nMux: The number of UE selected by TD scheduler (default value is 0)
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::CqaFfMacScheduler

    * CqiTimerThreshold: The number of TTIs a CQI is valid (default 1000 - 1 sec.)
    * CqaMetric: CqaFfMacScheduler metric type that can be: CqaFf, CqaPf
    * HarqEnabled: Activate/Deactivate the HARQ [by default is active].
    * UlGrantMcs: The MCS of the UL grant, must be [0..15] (default 0)

ns3::TraceFadingLossModel

    * TraceFilename: Name of file to load a trace from.
    * TraceLength: The total length of the fading trace (default value 10 s.)
    * SamplesNum: The number of samples the trace is made of (default 10000)
    * WindowSize: The size of the window for the fading trace (default value 0.5 s.)
    * RbNum: The number of RB the trace is made of (default 100)
    * RngStreamSetSize: The number of RNG streams reserved for the fading model. The maximum number of streams that are needed for an LTE FDD scenario is 2 * numUEs * numeNBs.

ns3::A2A4RsrqHandoverAlgorithm

    * ServingCellThreshold: If the RSRQ of the serving cell is worse than this threshold, neighbour cells are consider for handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.
    * NeighbourCellOffset: Minimum offset between the serving and the best neighbour cell to trigger the handover. Expressed in quantized range of [0..34] as per Section 9.1.7 of 3GPP TS 36.133.

ns3::A3RsrpHandoverAlgorithm

    * Hysteresis: Handover margin (hysteresis) in dB (rounded to the nearest multiple of 0.5 dB)
    * TimeToTrigger: Time during which neighbour cell's RSRP must continuously higher than serving cell's RSRP in order to trigger a handover

ns3::LteAnr

    * Threshold: Minimum RSRQ range value required for detecting a neighbour cell

ns3::LteFfrAlgorithm

    * FrCellTypeId: Downlink FR cell type ID for automatic configuration,default value is 0 and it means that user needs to configure FR algorithm manually,if it is set to 1,2 or 3 FR algorithm will be configured automatically
    * EnabledInUplink: If FR algorithm will also work in Uplink, default value true

ns3::LteFrHardAlgorithm

    * UlSubBandOffset: Uplink Offset in number of Resource Block Groups
    * UlSubBandwidth: Uplink Transmission SubBandwidth Configuration in number of Resource Block Groups
    * DlSubBandOffset: Downlink Offset in number of Resource Block Groups
    * DlSubBandwidth: Downlink Transmission SubBandwidth Configuration in number of Resource Block Groups

ns3::LteFrStrictAlgorithm

    * UlCommonSubBandwidth: Uplink Common SubBandwidth Configuration in number of Resource Block Groups
    * UlEdgeSubBandOffset: Uplink Edge SubBand Offset in number of Resource Block Groups
    * UlEdgeSubBandwidth: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
    * DlCommonSubBandwidth: Downlink Common SubBandwidth Configuration in number of Resource Block Groups
    * DlEdgeSubBandOffset: Downlink Edge SubBand Offset in number of Resource Block Groups
    * DlEdgeSubBandwidth: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
    * CenterPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * EdgePowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2

ns3::LteFrSoftAlgorithm

    * UlEdgeSubBandOffset: Uplink Edge SubBand Offset in number of Resource Block Groups
    * UlEdgeSubBandwidth: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
    * DlEdgeSubBandOffset: Downlink Edge SubBand Offset in number of Resource Block Groups
    * DlEdgeSubBandwidth: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
    * AllowCenterUeUseEdgeSubBand: If true center UEs can receive on Edge SubBand RBGs
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
    * CenterPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * EdgePowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2

ns3::LteFfrSoftAlgorithm

    * UlCommonSubBandwidth: Uplink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
    * UlEdgeSubBandOffset: Uplink Edge SubBand Offset in number of Resource Block Groups
    * UlEdgeSubBandwidth: Uplink Edge SubBandwidth Configuration in number of Resource Block Groups
    * DlCommonSubBandwidth: Downlink Medium (Common) SubBandwidth Configuration in number of Resource Block Groups
    * DlEdgeSubBandOffset: Downlink Edge SubBand Offset in number of Resource Block Groups
    * DlEdgeSubBandwidth: Downlink Edge SubBandwidth Configuration in number of Resource Block Groups
    * CenterRsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Medium sub-band
    * EdgeRsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
    * CenterAreaPowerOffset: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
    * MediumAreaPowerOffset: PdschConfigDedicated::Pa value for Medium Sub-band, default value dB0
    * EdgeAreaPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
    * MediumAreaTpc: TPC value which will be set in DL-DCI for UEs in medium areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2

ns3::LteFfrEnhancedAlgorithm

    * UlSubBandOffset: Uplink SubBand Offset for this cell in number of Resource Block Groups
    * UlReuse3SubBandwidth: Uplink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
    * UlReuse1SubBandwidth: Uplink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
    * DlSubBandOffset: Downlink SubBand Offset for this cell in number of Resource Block Groups
    * DlReuse3SubBandwidth: Downlink Reuse 3 SubBandwidth Configuration in number of Resource Block Groups
    * DlReuse1SubBandwidth: Downlink Reuse 1 SubBandwidth Configuration in number of Resource Block Groups
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
    * CenterAreaPowerOffset: PdschConfigDedicated::Pa value for Center Sub-band, default value dB0
    * EdgeAreaPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * DlCqiThreshold: If the DL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
    * UlCqiThreshold: If the UL-CQI for RBG of is higher than this threshold, transmission on RBG is possible
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2

ns3::LteFfrDistributedAlgorithm

    * CalculationInterval: Time interval between calculation of Edge sub-band, Default value 1 second
    * RsrqThreshold: If the RSRQ of is worse than this threshold, UE should be served in Edge sub-band
    * RsrpDifferenceThreshold: If the difference between the power of the signal received by UE from the serving cell and the power of the signal received from the adjacent cell is less than a RsrpDifferenceThreshold value, the cell weight is incremented
    * CenterPowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * EdgePowerOffset: PdschConfigDedicated::Pa value for Edge Sub-band, default value dB0
    * EdgeRbNum: Number of RB that can be used in edge Sub-band
    * CenterAreaTpc: TPC value which will be set in DL-DCI for UEs in center areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2
    * EdgeAreaTpc: TPC value which will be set in DL-DCI for UEs in edge areaAbsolute mode is used, default value 1 is mapped to -1 according toTS36.213 Table 5.1.1.1-2

ns3::LteUePowerControl

    * ClosedLoop: If true Closed Loop mode will be active, otherwise Open Loop
    * AccumulationEnabled: If true TCP accumulation mode will be active, otherwise absolute mode will be active
    * Alpha: Value of Alpha parameter
    * Pcmax: Max Transmission power in dBm, Default value 23 dBmTS36.101 section 6.2.3
    * Pcmin: Min Transmission power in dBm, Default value -40 dBmTS36.101 section 6.2.3
    * PoNominalPusch: P_O_NOMINAL_PUSCH   INT (-126 ... 24), Default value -80
    * PoUePusch: P_O_UE_PUSCH   INT(-8...7), Default value 0
    * PsrsOffset: P_SRS_OFFSET   INT(0...15), Default value 7

ns3::ComponentCarrier

    * UlBandwidth: Uplink Transmission Bandwidth Configuration in number of Resource Blocks
    * DlBandwidth: Downlink Transmission Bandwidth Configuration in number of Resource Blocks
    * DlEarfcn: Downlink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
    * UlEarfcn: Uplink E-UTRA Absolute Radio Frequency Channel Number (EARFCN) as per 3GPP 36.101 Section 5.7.3. 
    * CsgId: The Closed Subscriber Group (CSG) identity that this eNodeB belongs to
    * CsgIndication: If true, only UEs which are members of the CSG (i.e. same CSG ID) can gain access to the eNodeB, therefore enforcing closed access mode. Otherwise, the eNodeB operates as a non-CSG cell and implements open access mode.
    * PrimaryCarrier: If true, this Carrier Component will be the Primary Carrier Component (PCC) Only one PCC per eNodeB is (currently) allowed

ns3::CcHelper

    * NumberOfComponentCarriers: Set the number of Component Carriers to setup per eNodeBCurrently the maximum Number of Component Carriers allowed is 2
    * UlEarfcn: Set Ul Channel [EARFCN] for the first carrier component
    * DlEarfcn: Set Dl Channel [EARFCN] for the first carrier component
    * DlBandwidth: Set Dl Bandwidth for the first carrier component
    * UlBandwidth: Set Dl Bandwidth for the first carrier component

ns3::ComponentCarrierUe

    * LteUePhy: The PHY associated to this EnbNetDevice
    * LteUeMac: The MAC associated to this UeNetDevice

ns3::ComponentCarrierEnb

    * LteEnbPhy: The PHY associated to this EnbNetDevice
    * LteEnbMac: The MAC associated to this EnbNetDevice
    * FfMacScheduler: The scheduler associated to this EnbNetDevice
    * LteFfrAlgorithm: The FFR algorithm associated to this EnbNetDevice

ns3::EmuEpcHelper

    * sgwDeviceName: The name of the device used for the S1-U interface of the SGW
    * enbDeviceName: The name of the device used for the S1-U interface of the eNB
    * SgwMacAddress: MAC address used for the SGW 
    * EnbMacAddressBase: First 5 bytes of the Enb MAC address base

ns3::LrWpanMac

    * PanId: 16-bit identifier of the associated PAN

ns3::LrWpanNetDevice

    * Channel: The channel attached to this device
    * Phy: The PHY layer attached to this device.
    * Mac: The MAC layer attached to this device.
    * UseAcks: Request acknowledgments for data frames.

ns3::LrWpanLqiTag

    * Lqi: The lqi of the last packet received

ns3::WifiPhy

    * Frequency: The operating center frequency (MHz)
    * ChannelWidth: Whether 5MHz, 10MHz, 20MHz, 22MHz, 40MHz, 80 MHz or 160 MHz.
    * ChannelNumber: If set to non-zero defined value, will control Frequency and ChannelWidth assignment
    * EnergyDetectionThreshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to detect the signal.
    * CcaMode1Threshold: The energy of a received signal should be higher than this threshold (dbm) to allow the PHY layer to declare CCA BUSY state.
    * TxGain: Transmission gain (dB).
    * RxGain: Reception gain (dB).
    * TxPowerLevels: Number of transmission power levels available between TxPowerStart and TxPowerEnd included.
    * TxPowerEnd: Maximum available transmission level (dbm).
    * TxPowerStart: Minimum available transmission level (dbm).
    * RxNoiseFigure: Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver. According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "the difference in decibels (dB) between the noise output of the actual receiver to the noise output of an  ideal receiver with the same overall gain and bandwidth when the receivers  are connected to sources at the standard noise temperature T0 (usually 290 K)".
    * State: The state of the PHY layer.
    * ChannelSwitchDelay: Delay between two short frames transmitted on different frequencies.
    * Antennas: The number of antennas on the device.
    * MaxSupportedTxSpatialStreams: The maximum number of supported TX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
    * MaxSupportedRxSpatialStreams: The maximum number of supported RX spatial streams.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
    * ShortGuardEnabled: Whether or not short guard interval is enabled for HT/VHT transmissions.This parameter is only valuable for 802.11n/ac/ax STAs and APs.
    * GuardInterval: Whether 800ns, 1600ns or 3200ns guard interval is used for HE transmissions.This parameter is only valuable for 802.11ax STAs and APs.
    * LdpcEnabled: Whether or not LDPC is enabled (not supported yet!).
    * STBCEnabled: Whether or not STBC is enabled (not supported yet!).
    * GreenfieldEnabled: Whether or not Greenfield is enabled.This parameter is only valuable for 802.11n STAs and APs.
    * ShortPlcpPreambleSupported: Whether or not short PLCP preamble is supported.This parameter is only valuable for 802.11b STAs and APs.Note: 802.11g APs and STAs always support short PLCP preamble.
    * FrameCaptureModel: Ptr to an object that implements the frame capture model

ns3::YansWifiChannel

    * PropagationLossModel: A pointer to the propagation loss model attached to this channel.
    * PropagationDelayModel: A pointer to the propagation delay model attached to this channel.

ns3::SpectrumWifiPhy

    * DisableWifiReception: Prevent Wi-Fi frame sync from ever happening

ns3::WifiMacQueue

    * MaxDelay: If a packet stays longer than this delay in the queue, it is dropped.
    * DropPolicy: Upon enqueue with full queue, drop oldest (DropOldest) or newest (DropNewest) packet

ns3::Txop

    * MinCw: The minimum value of the contention window.
    * MaxCw: The maximum value of the contention window.
    * Aifsn: The AIFSN: the default value conforms to non-QOS.
    * TxopLimit: The TXOP limit: the default value conforms to non-QoS.
    * Queue: The WifiMacQueue object

ns3::WifiMac

    * CtsTimeout: When this timeout expires, the RTS/CTS handshake has failed.
    * AckTimeout: When this timeout expires, the DATA/ACK handshake has failed.
    * BasicBlockAckTimeout: When this timeout expires, the BASIC_BLOCK_ACK_REQ/BASIC_BLOCK_ACK handshake has failed.
    * CompressedBlockAckTimeout: When this timeout expires, the COMPRESSED_BLOCK_ACK_REQ/COMPRESSED_BLOCK_ACK handshake has failed.
    * Sifs: The value of the SIFS constant.
    * EifsNoDifs: The value of EIFS-DIFS.
    * Slot: The duration of a Slot.
    * Pifs: The value of the PIFS constant.
    * Rifs: The value of the RIFS constant.
    * MaxPropagationDelay: The maximum propagation delay. Unused for now.
    * Ssid: The ssid we want to belong to.

ns3::RegularWifiMac

    * QosSupported: This Boolean attribute is set to enable 802.11e/WMM-style QoS support at this STA.
    * HtSupported: This Boolean attribute is set to enable 802.11n support at this STA.
    * VhtSupported: This Boolean attribute is set to enable 802.11ac support at this STA.
    * HeSupported: This Boolean attribute is set to enable 802.11ax support at this STA.
    * CtsToSelfSupported: Use CTS to Self when using a rate that is not in the basic rate set.
    * VO_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VO access class. Value 0 means A-MSDU is disabled for that AC.
    * VI_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_VI access class.Value 0 means A-MSDU is disabled for that AC.
    * BE_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BE access class.Value 0 means A-MSDU is disabled for that AC.
    * BK_MaxAmsduSize: Maximum length in bytes of an A-MSDU for AC_BK access class.Value 0 means A-MSDU is disabled for that AC.
    * VO_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VO access class.Value 0 means A-MPDU is disabled for that AC.
    * VI_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_VI access class.Value 0 means A-MPDU is disabled for that AC.
    * BE_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BE access class.Value 0 means A-MPDU is disabled for that AC.
    * BK_MaxAmpduSize: Maximum length in bytes of an A-MPDU for AC_BK access class.Value 0 means A-MPDU is disabled for that AC.
    * VO_BlockAckThreshold: If number of packets in VO queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
    * VI_BlockAckThreshold: If number of packets in VI queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
    * BE_BlockAckThreshold: If number of packets in BE queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
    * BK_BlockAckThreshold: If number of packets in BK queue reaches this value, block ack mechanism is used. If this value is 0, block ack is never used.When A-MPDU is enabled, block ack mechanism is used regardless of this value.
    * VO_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VO. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
    * VI_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_VI. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
    * BE_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BE. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
    * BK_BlockAckInactivityTimeout: Represents max time (blocks of 1024 micro seconds) allowed for block ackinactivity for AC_BK. If this value isn't equal to 0 a timer start after that ablock ack setup is completed and will be reset every time that a block ackframe is received. If this value is 0, block ack inactivity timeout won't be used.
    * ShortSlotTimeSupported: Whether or not short slot time is supported (only used by ERP APs or STAs).
    * RifsSupported: Whether or not RIFS is supported (only used by HT APs or STAs).
    * Txop: The Txop object.
    * VO_Txop: Queue that manages packets belonging to AC_VO access class.
    * VI_Txop: Queue that manages packets belonging to AC_VI access class.
    * BE_Txop: Queue that manages packets belonging to AC_BE access class.
    * BK_Txop: Queue that manages packets belonging to AC_BK access class.

ns3::InfrastructureWifiMac

    * PcfSupported: This Boolean attribute is set to enable PCF support at this STA

ns3::WifiRemoteStationManager

    * IsLowLatency: If true, we attempt to modelize a so-called low-latency device: a device where decisions about tx parameters can be made on a per-packet basis and feedback about the transmission of each packet is obtained before sending the next. Otherwise, we modelize a high-latency device, that is a device where we cannot update our decision about tx parameters after every packet transmission.
    * MaxSsrc: The maximum number of retransmission attempts for any packet with size <= RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
    * MaxSlrc: The maximum number of retransmission attempts for any packet with size > RtsCtsThreshold. This value will not have any effect on some rate control algorithms.
    * RtsCtsThreshold: If the size of the PSDU is bigger than this value, we use an RTS/CTS handshake before sending the data frame.This value will not have any effect on some rate control algorithms.
    * FragmentationThreshold: If the size of the PSDU is bigger than this value, we fragment it such that the size of the fragments are equal or smaller. This value does not apply when it is carried in an A-MPDU. This value will not have any effect on some rate control algorithms.
    * NonUnicastMode: Wifi mode used for non-unicast transmissions.
    * DefaultTxPowerLevel: Default power level to be used for transmissions. This is the power level that is used by all those WifiManagers that do not implement TX power control.
    * ErpProtectionMode: Protection mode used when non-ERP STAs are connected to an ERP AP: Rts-Cts or Cts-To-Self
    * HtProtectionMode: Protection mode used when non-HT STAs are connected to a HT AP: Rts-Cts or Cts-To-Self

ns3::ApWifiMac

    * BeaconInterval: Delay between two beacons
    * CfpMaxDuration: The maximum size of the CFP (used when AP supports PCF)
    * BeaconJitter: A uniform random variable to cause the initial beacon starting time (after simulation time 0) to be distributed between 0 and the BeaconInterval.
    * EnableBeaconJitter: If beacons are enabled, whether to jitter the initial send event.
    * BeaconGeneration: Whether or not beacons are generated.
    * EnableNonErpProtection: Whether or not protection mechanism should be used when non-ERP STAs are present within the BSS.This parameter is only used when ERP is supported by the AP.
    * RifsMode: If non-HT STAs are detected, whether to force RIFS to be disabled within the BSS.This parameter is only used when HT is supported by the AP.

ns3::StaWifiMac

    * ProbeRequestTimeout: The duration to actively probe the channel.
    * WaitBeaconTimeout: The duration to dwell on a channel while passively scanning for beacon
    * AssocRequestTimeout: The interval between two consecutive association request attempts.
    * MaxMissedBeacons: Number of beacons which much be consecutively missed before we attempt to restart association.
    * ActiveProbing: If true, we send probe requests. If false, we don't.NOTE: if more than one STA in your simulation is using active probing, you should enable it at a different simulation time for each STA, otherwise all the STAs will start sending probes at the same time resulting in collisions. See bug 1060 for more info.

ns3::WifiNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
    * Channel: The channel attached to this device
    * Phy: The PHY layer attached to this device.
    * Mac: The MAC layer attached to this device.
    * RemoteStationManager: The station manager attached to this device.

ns3::ArfWifiManager

    * TimerThreshold: The 'timer' threshold in the ARF algorithm.
    * SuccessThreshold: The minimum number of successful transmissions to try a new rate.

ns3::AarfWifiManager

    * SuccessK: Multiplication factor for the success threshold in the AARF algorithm.
    * TimerK: Multiplication factor for the timer threshold in the AARF algorithm.
    * MaxSuccessThreshold: Maximum value of the success threshold in the AARF algorithm.
    * MinTimerThreshold: The minimum value for the 'timer' threshold in the AARF algorithm.
    * MinSuccessThreshold: The minimum value for the success threshold in the AARF algorithm.

ns3::IdealWifiManager

    * BerThreshold: The maximum Bit Error Rate acceptable at any transmission mode

ns3::ConstantRateWifiManager

    * DataMode: The transmission mode to use for every data packet transmission
    * ControlMode: The transmission mode to use for every RTS packet transmission.

ns3::AmrrWifiManager

    * UpdatePeriod: The interval between decisions about rate control changes
    * FailureRatio: Ratio of minimum erroneous transmissions needed to switch to a lower rate
    * SuccessRatio: Ratio of maximum erroneous transmissions needed to switch to a higher rate
    * MaxSuccessThreshold: Maximum number of consecutive success periods needed to switch to a higher rate
    * MinSuccessThreshold: Minimum number of consecutive success periods needed to switch to a higher rate

ns3::OnoeWifiManager

    * UpdatePeriod: The interval between decisions about rate control changes
    * RaiseThreshold: Attempt to raise the rate if we hit that threshold
    * AddCreditThreshold: Add credit threshold

ns3::RraaWifiManager

    * Basic: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used
    * Timeout: Timeout for the RRAA BASIC loss estimation block (s)
    * FrameLength: The data frame length (in bytes) used for calculating mode TxTime.
    * AckFrameLength: The ACK frame length (in bytes) used for calculating mode TxTime.
    * Alpha: Constant for calculating the MTL threshold.
    * Beta: Constant for calculating the ORI threshold.
    * Tau: Constant for calculating the EWND size.

ns3::AarfcdWifiManager

    * SuccessK: Multiplication factor for the success threshold in the AARF algorithm.
    * TimerK: Multiplication factor for the timer threshold in the AARF algorithm.
    * MaxSuccessThreshold: Maximum value of the success threshold in the AARF algorithm.
    * MinTimerThreshold: The minimum value for the 'timer' threshold in the AARF algorithm.
    * MinSuccessThreshold: The minimum value for the success threshold in the AARF algorithm.
    * MinRtsWnd: Minimum value for Rts window of Aarf-CD
    * MaxRtsWnd: Maximum value for Rts window of Aarf-CD
    * TurnOffRtsAfterRateDecrease: If true the RTS mechanism will be turned off when the rate will be decreased
    * TurnOnRtsAfterRateIncrease: If true the RTS mechanism will be turned on when the rate will be increased

ns3::CaraWifiManager

    * ProbeThreshold: The number of consecutive transmissions failure to activate the RTS probe.
    * FailureThreshold: The number of consecutive transmissions failure to decrease the rate.
    * SuccessThreshold: The minimum number of successful transmissions to try a new rate.
    * Timeout: The 'timer' in the CARA algorithm

ns3::MinstrelWifiManager

    * UpdateStatistics: The interval between updating statistics table 
    * LookAroundRate: the percentage to try other rates
    * EWMA: EWMA level
    * SampleColumn: The number of columns used for sampling
    * PacketLength: The packet length used for calculating mode TxTime
    * PrintStats: Print statistics table
    * PrintSamples: Print samples table

ns3::MinstrelHtWifiManager

    * UpdateStatistics: The interval between updating statistics table 
    * LookAroundRate: The percentage to try other rates (for legacy Minstrel)
    * EWMA: EWMA level
    * SampleColumn: The number of columns used for sampling
    * PacketLength: The packet length used for calculating mode TxTime
    * UseVhtOnly: Use only VHT MCSs (and not HT) when VHT is available
    * PrintStats: Control the printing of the statistics table

ns3::SnrTag

    * Snr: The snr of the last packet received

ns3::ParfWifiManager

    * AttemptThreshold: The minimum number of transmission attempts to try a new power or rate.
    * SuccessThreshold: The minimum number of successful transmissions to try a new power or rate.

ns3::AparfWifiManager

    * SuccessThreshold1: The minimum number of successful transmissions in "High" state to try a new power or rate.
    * SuccessThreshold2: The minimum number of successful transmissions in "Low" state to try a new power or rate.
    * FailThreshold: The minimum number of failed transmissions to try a new power or rate.
    * PowerThreshold: The maximum number of power changes.
    * PowerDecrementStep: Step size for decrement the power.
    * PowerIncrementStep: Step size for increment the power.
    * RateDecrementStep: Step size for decrement the rate.
    * RateIncrementStep: Step size for increment the rate.

ns3::RrpaaWifiManager

    * Basic: If true the RRAA-BASIC algorithm will be used, otherwise the RRAA will be used.
    * Timeout: Timeout for the RRAA-BASIC loss estimation block (s).
    * FrameLength: The data frame length (in bytes) used for calculating mode TxTime.
    * AckFrameLength: The ACK frame length (in bytes) used for calculating mode TxTime.
    * Alpha: Constant for calculating the MTL threshold.
    * Beta: Constant for calculating the ORI threshold.
    * Tau: Constant for calculating the EWND size.
    * Gamma: Constant for Probabilistic Decision Table decrements.
    * Delta: Constant for Probabilistic Decision Table increments.

ns3::WifiRadioEnergyModel

    * IdleCurrentA: The default radio Idle current in Ampere.
    * CcaBusyCurrentA: The default radio CCA Busy State current in Ampere.
    * TxCurrentA: The radio Tx current in Ampere.
    * RxCurrentA: The radio Rx current in Ampere.
    * SwitchingCurrentA: The default radio Channel Switch current in Ampere.
    * SleepCurrentA: The radio Sleep current in Ampere.
    * TxCurrentModel: A pointer to the attached tx current model.

ns3::LinearWifiTxCurrentModel

    * Eta: The efficiency of the power amplifier.
    * Voltage: The supply voltage (in Volts).
    * IdleCurrent: The current in the IDLE state (in Watts).

ns3::SimpleFrameCaptureModel

    * Margin: Reception is switched if the newly arrived frame has a power higher than this value above the frame currently being received (expressed in dB).

ns3::AthstatsWifiTraceSink

    * Interval: Time interval between reports

ns3::ChannelCoordinator

    * CchInterval: CCH Interval, default value is 50ms.
    * SchInterval: SCH Interval, default value is 50ms.
    * GuardInterval: Guard Interval, default value is 4ms.

ns3::WaveNetDevice

    * Mtu: The MAC-level Maximum Transmission Unit
    * Channel: The channel attached to this device
    * PhyEntities: The PHY entities attached to this device.
    * MacEntities: The MAC layer attached to this device.
    * ChannelScheduler: The channel scheduler attached to this device.
    * ChannelManager: The channel manager attached to this device.
    * ChannelCoordinator: The channel coordinator attached to this device.
    * VsaManager: The VSA manager attached to this device.

ns3::MeshPointDevice

    * Mtu: The MAC-level Maximum Transmission Unit
    * RoutingProtocol: The mesh routing protocol used by this mesh point.

ns3::MeshWifiInterfaceMac

    * BeaconInterval: Beacon Interval
    * RandomStart: Window when beacon generating starts (uniform random) in seconds
    * BeaconGeneration: Enable/Disable Beaconing.

ns3::dot11s::PeerLink

    * RetryTimeout: Retry timeout
    * HoldingTimeout: Holding timeout
    * ConfirmTimeout: Confirm timeout
    * MaxRetries: Maximum number of retries
    * MaxBeaconLoss: Maximum number of lost beacons before link will be closed
    * MaxPacketFailure: Maximum number of failed packets before link will be closed

ns3::dot11s::PeerManagementProtocol

    * MaxNumberOfPeerLinks: Maximum number of peer links
    * MaxBeaconShiftValue: Maximum number of TUs for beacon shifting
    * EnableBeaconCollisionAvoidance: Enable/Disable Beacon collision avoidance.

ns3::dot11s::HwmpProtocol

    * RandomStart: Random delay at first proactive PREQ
    * MaxQueueSize: Maximum number of packets we can store when resolving route
    * Dot11MeshHWMPmaxPREQretries: Maximum number of retries before we suppose the destination to be unreachable
    * Dot11MeshHWMPnetDiameterTraversalTime: Time we suppose the packet to go from one edge of the network to another
    * Dot11MeshHWMPpreqMinInterval: Minimal interval between to successive PREQs
    * Dot11MeshHWMPperrMinInterval: Minimal interval between to successive PREQs
    * Dot11MeshHWMPactiveRootTimeout: Lifetime of poractive routing information
    * Dot11MeshHWMPactivePathTimeout: Lifetime of reactive routing information
    * Dot11MeshHWMPpathToRootInterval: Interval between two successive proactive PREQs
    * Dot11MeshHWMPrannInterval: Lifetime of poractive routing information
    * MaxTtl: Initial value of Time To Live field
    * UnicastPerrThreshold: Maximum number of PERR receivers, when we send a PERR as a chain of unicasts
    * UnicastPreqThreshold: Maximum number of PREQ receivers, when we send a PREQ as a chain of unicasts
    * UnicastDataThreshold: Maximum number ofbroadcast receivers, when we send a broadcast as a chain of unicasts
    * DoFlag: Destination only HWMP flag
    * RfFlag: Reply and forward flag

ns3::dot11s::AirtimeLinkMetricCalculator

    * TestLength: Number of bytes in test frame (a constant 1024 in the standard)
    * Dot11MetricTid: TID used to calculate metric (data rate)

ns3::flame::FlameRtable

    * Lifetime: The lifetime of the routing entry

ns3::flame::FlameProtocol

    * BroadcastInterval: How often we must send broadcast packets
    * MaxCost: Cost threshold after which packet will be dropped

ns3::Dot11sStack

    * Root: The MAC address of root mesh point.

ns3::dsr::DsrRouting

    * RouteCache: The route cache for saving routes from route discovery process.
    * RreqTable: The request table to manage route requests.
    * PassiveBuffer: The passive buffer to manage promisucously received passive ack.
    * MaxSendBuffLen: Maximum number of packets that can be stored in send buffer.
    * MaxSendBuffTime: Maximum time packets can be queued in the send buffer .
    * MaxMaintLen: Maximum number of packets that can be stored in maintenance buffer.
    * MaxMaintTime: Maximum time packets can be queued in maintenance buffer.
    * MaxCacheLen: Maximum number of route entries that can be stored in route cache.
    * RouteCacheTimeout: Maximum time the route cache can be queued in route cache.
    * MaxEntriesEachDst: Maximum number of route entries for a single destination to respond.
    * SendBuffInterval: How often to check send buffer for packet with route.
    * NodeTraversalTime: The time it takes to traverse two neighboring nodes.
    * RreqRetries: Maximum number of retransmissions for request discovery of a route.
    * MaintenanceRetries: Maximum number of retransmissions for data packets from maintenance buffer.
    * RequestTableSize: Maximum number of request entries in the request table, set this as the number of nodes in the simulation.
    * RequestIdSize: Maximum number of request source Ids in the request table.
    * UniqueRequestIdSize: Maximum number of request Ids in the request table for a single destination.
    * NonPropRequestTimeout: The timeout value for non-propagation request.
    * DiscoveryHopLimit: The max discovery hop limit for route requests.
    * MaxSalvageCount: The max salvage count for a single data packet.
    * BlacklistTimeout: The time for a neighbor to stay in blacklist.
    * GratReplyHoldoff: The time for gratuitous reply entry to expire.
    * BroadcastJitter: The jitter time to avoid collision for broadcast packets.
    * LinkAckTimeout: The time a packet in maintenance buffer wait for link acknowledgment.
    * TryLinkAcks: The number of link acknowledgment to use.
    * PassiveAckTimeout: The time a packet in maintenance buffer wait for passive acknowledgment.
    * TryPassiveAcks: The number of passive acknowledgment to use.
    * RequestPeriod: The base time interval between route requests.
    * MaxRequestPeriod: The max time interval between route requests.
    * GraReplyTableSize: The gratuitous reply table size.
    * CacheType: Use Link Cache or use Path Cache
    * StabilityDecrFactor: The stability decrease factor for link cache
    * StabilityIncrFactor: The stability increase factor for link cache
    * InitStability: The initial stability factor for link cache
    * MinLifeTime: The minimal life time for link cache
    * UseExtends: The extension time for link cache
    * EnableSubRoute: Enables saving of sub route when receiving route error messages, only available when using path route cache
    * RetransIncr: The increase time for retransmission timer when facing network congestion
    * MaxNetworkQueueSize: The max number of packet to save in the network queue.
    * MaxNetworkQueueDelay: The max time for a packet to stay in the network queue.
    * NumPriorityQueues: The max number of packet to save in the network queue.
    * LinkAcknowledgment: Enable Link layer acknowledgment mechanism

ns3::dsr::DsrOptions

    * OptionNumber: The Dsr option number.

ns3::aodv::RoutingProtocol

    * HelloInterval: HELLO messages emission interval.
    * TtlStart: Initial TTL value for RREQ.
    * TtlIncrement: TTL increment for each attempt using the expanding ring search for RREQ dissemination.
    * TtlThreshold: Maximum TTL value for expanding ring search, TTL = NetDiameter is used beyond this value.
    * TimeoutBuffer: Provide a buffer for the timeout.
    * RreqRetries: Maximum number of retransmissions of RREQ to discover a route
    * RreqRateLimit: Maximum number of RREQ per second.
    * RerrRateLimit: Maximum number of RERR per second.
    * NodeTraversalTime: Conservative estimate of the average one hop traversal time for packets and should include queuing delays, interrupt processing times and transfer times.
    * NextHopWait: Period of our waiting for the neighbour's RREP_ACK = 10 ms + NodeTraversalTime
    * ActiveRouteTimeout: Period of time during which the route is considered to be valid
    * MyRouteTimeout: Value of lifetime field in RREP generating by this node = 2 * max(ActiveRouteTimeout, PathDiscoveryTime)
    * BlackListTimeout: Time for which the node is put into the blacklist = RreqRetries * NetTraversalTime
    * DeletePeriod: DeletePeriod is intended to provide an upper bound on the time for which an upstream node A can have a neighbor B as an active next hop for destination D, while B has invalidated the route to D. = 5 * max (HelloInterval, ActiveRouteTimeout)
    * NetDiameter: Net diameter measures the maximum possible number of hops between two nodes in the network
    * NetTraversalTime: Estimate of the average net traversal time = 2 * NodeTraversalTime * NetDiameter
    * PathDiscoveryTime: Estimate of maximum time needed to find route in network = 2 * NetTraversalTime
    * MaxQueueLen: Maximum number of packets that we allow a routing protocol to buffer.
    * MaxQueueTime: Maximum time packets can be queued (in seconds)
    * AllowedHelloLoss: Number of hello messages which may be loss for valid link.
    * GratuitousReply: Indicates whether a gratuitous RREP should be unicast to the node originated route discovery.
    * DestinationOnly: Indicates only the destination may respond to this RREQ.
    * EnableHello: Indicates whether a hello messages enable.
    * EnableBroadcast: Indicates whether a broadcast data packets forwarding enable.
    * UniformRv: Access to the underlying UniformRandomVariable

ns3::LteDataRadioBearerInfo

    * DrbIdentity: The id of this Data Radio Bearer
    * EpsBearerIdentity: The id of the EPS bearer corresponding to this Data Radio Bearer
    * logicalChannelIdentity: The id of the Logical Channel corresponding to this Data Radio Bearer
    * LteRlc: RLC instance of the radio bearer.
    * LtePdcp: PDCP instance of the radio bearer.

ns3::LteSignalingRadioBearerInfo

    * SrbIdentity: The id of this Signaling Radio Bearer
    * LteRlc: RLC instance of the radio bearer.
    * LtePdcp: PDCP instance of the radio bearer.


===============================================================
Page GlobalValueList All GlobalValues

This is a list of all ns3::GlobalValue instances.


    * GlobalValueSimulatorImplementationType SimulatorImplementationType: The object class to use as the simulator implementation.  Default value: ns3::DefaultSimulatorImpl.
    * GlobalValueSchedulerType SchedulerType: The object class to use as the scheduler implementation.  Default value: ns3::MapScheduler.
    * GlobalValueRngSeed RngSeed: The global seed of all rng streams.  Default value: 1.
    * GlobalValueRngRun RngRun: The substream index used for all streams.  Default value: 1.
    * GlobalValueChecksumEnabled ChecksumEnabled: A global switch to enable all checksums for all protocols.  Default value: false.


===============================================================
Page LogComponentList All LogComponents

This is a list of all ns3::LogComponent instances.


    * A2A4RsrqHandoverAlgorithm: src/lte/model/a2-a4-rsrq-handover-algorithm.cc
    * A3RsrpHandoverAlgorithm: src/lte/model/a3-rsrp-handover-algorithm.cc
    * AarfWifiManager: src/wifi/model/aarf-wifi-manager.cc
    * AarfcdWifiManager: src/wifi/model/aarfcd-wifi-manager.cc
    * AcousticModemEnergyModel: src/uan/model/acoustic-modem-energy-model.cc
    * Address: src/network/model/address.cc
    * AddressUtils: src/network/utils/address-utils.cc
    * AdhocAlohaNoackIdealPhyHelper: src/spectrum/helper/adhoc-aloha-noack-ideal-phy-helper.cc
    * AdhocWifiMac: src/wifi/model/adhoc-wifi-mac.cc
    * AlohaNoackMacHeader: src/spectrum/model/aloha-noack-mac-header.cc
    * AlohaNoackNetDevice: src/spectrum/model/aloha-noack-net-device.cc
    * AmrrWifiManager: src/wifi/model/amrr-wifi-manager.cc
    * Angles: src/antenna/model/angles.cc
    * AnimationInterface: src/netanim/model/animation-interface.cc
    * AntennaModel: src/antenna/model/antenna-model.cc
    * AodvNeighbors: src/aodv/model/aodv-neighbor.cc
    * AodvRequestQueue: src/aodv/model/aodv-rqueue.cc
    * AodvRoutingProtocol: src/aodv/model/aodv-routing-protocol.cc
    * AodvRoutingTable: src/aodv/model/aodv-rtable.cc
    * ApWifiMac: src/wifi/model/ap-wifi-mac.cc
    * AparfWifiManager: src/wifi/model/aparf-wifi-manager.cc
    * Application: src/network/model/application.cc
    * ApplicationContainer: src/network/helper/application-container.cc
    * ApplicationPacketProbe: src/applications/model/application-packet-probe.cc
    * ArfWifiManager: src/wifi/model/arf-wifi-manager.cc
    * ArpCache: src/internet/model/arp-cache.cc
    * ArpHeader: src/internet/model/arp-header.cc
    * ArpL3Protocol: src/internet/model/arp-l3-protocol.cc
    * ArpQueueDiscItem: src/internet/model/arp-queue-disc-item.cc
    * Asn1Header: src/lte/model/lte-asn1-header.cc
    * Athstats: src/wifi/helper/athstats-helper.cc
    * AttributeConstructionList: src/core/model/attribute-construction-list.cc
    * AttributeIterator: src/config-store/model/attribute-iterator.cc
    * AttributeValue: src/core/model/attribute.cc
    * BSLinkManager: src/wimax/model/bs-link-manager.cc
    * BSScheduler: src/wimax/model/bs-scheduler.cc
    * BSSchedulerRtps: src/wimax/model/bs-scheduler-rtps.cc
    * BSSchedulerSimple: src/wimax/model/bs-scheduler-simple.cc
    * Backoff: src/csma/model/backoff.cc
    * BandwidthManager: src/wimax/model/bandwidth-manager.cc
    * BaseStationNetDevice: src/wimax/model/bs-net-device.cc
    * BasicEnergyHarvester: src/energy/model/basic-energy-harvester.cc
    * BasicEnergySource: src/energy/model/basic-energy-source.cc
    * BlockAckAgreement: src/wifi/model/block-ack-agreement.cc
    * BlockAckCache: src/wifi/model/block-ack-cache.cc
    * BlockAckManager: src/wifi/model/block-ack-manager.cc
    * Boolean: src/core/model/boolean.cc
    * BooleanProbe: src/stats/model/boolean-probe.cc
    * Breakpoint: src/core/model/breakpoint.cc
    * BridgeChannel: src/bridge/model/bridge-channel.cc
    * BridgeHelper: src/bridge/helper/bridge-helper.cc
    * BridgeNetDevice: src/bridge/model/bridge-net-device.cc
    * BsServiceFlowManager: src/wimax/model/bs-service-flow-manager.cc
    * BsmApplication: src/wave/model/bsm-application.cc
    * Buffer: src/network/model/buffer.cc
    * Building: src/buildings/model/building.cc
    * BuildingAllocator: src/buildings/helper/building-allocator.cc
    * BuildingList: src/buildings/model/building-list.cc
    * BuildingPositionAllocator: src/buildings/helper/building-position-allocator.cc
    * BuildingsHelper: src/buildings/helper/buildings-helper.cc
    * BuildingsPropagationLossModel: src/buildings/model/buildings-propagation-loss-model.cc
    * BulkSendApplication: src/applications/model/bulk-send-application.cc
    * BurstProfileManager: src/wimax/model/burst-profile-manager.cc
    * ByteTagList: src/network/model/byte-tag-list.cc
    * CalendarScheduler: src/core/model/calendar-scheduler.cc
    * Callback: src/core/model/callback.cc
    * CandidateQueue: src/internet/model/candidate-queue.cc
    * CaraWifiManager: src/wifi/model/cara-wifi-manager.cc
    * CcHelper: src/lte/helper/cc-helper.cc
    * Channel: src/network/model/channel.cc
    * ChannelAccessManager: src/wifi/model/channel-access-manager.cc
    * ChannelCoordinator: src/wave/model/channel-coordinator.cc
    * ChannelList: src/network/model/channel-list.cc
    * ChannelManager: src/wave/model/channel-manager.cc
    * ChannelScheduler: src/wave/model/channel-scheduler.cc
    * CoDelQueueDisc: src/traffic-control/model/codel-queue-disc.cc
    * CommandLine: src/core/model/command-line.cc
    * ComponentCarrier: src/lte/model/component-carrier.cc
    * ComponentCarrierEnb: src/lte/model/component-carrier-enb.cc
    * ComponentCarrierUe: src/lte/model/component-carrier-ue.cc
    * Config: src/core/model/config.cc
    * ConfigStore: src/config-store/model/config-store.cc
    * ConnectionManager: src/wimax/model/connection-manager.cc
    * ConstantRateWifiManager: src/wifi/model/constant-rate-wifi-manager.cc
    * ConstantSpectrumPropagationLossModel: src/spectrum/model/constant-spectrum-propagation-loss.cc
    * ConstantVelocityHelper: src/mobility/model/constant-velocity-helper.cc
    * CosineAntennaModel: src/antenna/model/cosine-antenna-model.cc
    * Cost231PropagationLossModel: src/propagation/model/cost231-propagation-loss-model.cc
    * CqaFfMacScheduler: src/lte/model/cqa-ff-mac-scheduler.cc
    * CsmaChannel: src/csma/model/csma-channel.cc
    * CsmaHelper: src/csma/helper/csma-helper.cc
    * CsmaNetDevice: src/csma/model/csma-net-device.cc
    * CsmaStarHelper: src/csma-layout/model/csma-star-helper.cc
    * DataCalculator: src/stats/model/data-calculator.cc
    * DataCollectionObject: src/stats/model/data-collection-object.cc
    * DataCollector: src/stats/model/data-collector.cc
    * DataOutputInterface: src/stats/model/data-output-interface.cc
    * DataRate: src/network/utils/data-rate.cc
    * DefaultChannelScheduler: src/wave/model/default-channel-scheduler.cc
    * DefaultSimulatorImpl: src/core/model/default-simulator-impl.cc
    * DeviceEnergyModel: src/energy/model/device-energy-model.cc
    * DeviceEnergyModelContainer: src/energy/model/device-energy-model-container.cc
    * DhcpClient: src/internet-apps/model/dhcp-client.cc
    * DhcpHeader: src/internet-apps/model/dhcp-header.cc
    * DhcpHelper: src/internet-apps/helper/dhcp-helper.cc
    * DhcpServer: src/internet-apps/model/dhcp-server.cc
    * DistributedSimulatorImpl: src/mpi/model/distributed-simulator-impl.cc
    * Dot11sPeerManagementProtocol: src/mesh/model/dot11s/peer-link.cc
    * Double: src/core/model/double.cc
    * DoubleProbe: src/stats/model/double-probe.cc
    * DropTailQueue: src/network/utils/drop-tail-queue.cc
    * DsdvPacketQueue: src/dsdv/model/dsdv-packet-queue.cc
    * DsdvRoutingProtocol: src/dsdv/model/dsdv-routing-protocol.cc
    * DsdvRoutingTable: src/dsdv/model/dsdv-rtable.cc
    * DsrErrorBuffer: src/dsr/model/dsr-errorbuff.cc
    * DsrFsHeader: src/dsr/model/dsr-fs-header.cc
    * DsrGraReplyTable: src/dsr/model/dsr-gratuitous-reply-table.cc
    * DsrHelper: src/dsr/helper/dsr-helper.cc
    * DsrMainHelper: src/dsr/helper/dsr-main-helper.cc
    * DsrMaintainBuffer: src/dsr/model/dsr-maintain-buff.cc
    * DsrNetworkQueue: src/dsr/model/dsr-network-queue.cc
    * DsrOptionHeader: src/dsr/model/dsr-option-header.cc
    * DsrOptions: src/dsr/model/dsr-options.cc
    * DsrPassiveBuffer: src/dsr/model/dsr-passive-buff.cc
    * DsrRouteCache: src/dsr/model/dsr-rcache.cc
    * DsrRouting: src/dsr/model/dsr-routing.cc
    * DsrRreqTable: src/dsr/model/dsr-rreq-table.cc
    * DsrSendBuffer: src/dsr/model/dsr-rsendbuff.cc
    * DsssErrorRateModel: src/wifi/model/dsss-error-rate-model.cc
    * DynamicQueueLimits: src/network/utils/dynamic-queue-limits.cc
    * EmuEpcHelper: src/lte/helper/emu-epc-helper.cc
    * EmuFdNetDeviceHelper: src/fd-net-device/helper/emu-fd-net-device-helper.cc
    * EnergyHarvester: src/energy/model/energy-harvester.cc
    * EnergyHarvesterContainer: src/energy/helper/energy-harvester-container.cc
    * EnergySource: src/energy/model/energy-source.cc
    * Enum: src/core/model/enum.cc
    * EpcEnbApplication: src/lte/model/epc-enb-application.cc
    * EpcHelper: src/lte/helper/epc-helper.cc
    * EpcMme: src/lte/model/epc-mme.cc
    * EpcSgwPgwApplication: src/lte/model/epc-sgw-pgw-application.cc
    * EpcTft: src/lte/model/epc-tft.cc
    * EpcTftClassifier: src/lte/model/epc-tft-classifier.cc
    * EpcUeNas: src/lte/model/epc-ue-nas.cc
    * EpcX2: src/lte/model/epc-x2.cc
    * EpcX2Header: src/lte/model/epc-x2-header.cc
    * ErrorChannel: src/network/utils/error-channel.cc
    * ErrorModel: src/network/utils/error-model.cc
    * EthernetHeader: src/network/utils/ethernet-header.cc
    * EthernetTrailer: src/network/utils/ethernet-trailer.cc
    * EventId: src/core/model/event-id.cc
    * EventImpl: src/core/model/event-impl.cc
    * FatalImpl: src/core/model/fatal-impl.cc
    * FdBetFfMacScheduler: src/lte/model/fdbet-ff-mac-scheduler.cc
    * FdMtFfMacScheduler: src/lte/model/fdmt-ff-mac-scheduler.cc
    * FdNetDevice: src/fd-net-device/model/fd-net-device.cc
    * FdNetDeviceHelper: src/fd-net-device/helper/fd-net-device-helper.cc
    * FdReader: src/core/model/unix-fd-reader.cc
    * FdTbfqFfMacScheduler: src/lte/model/fdtbfq-ff-mac-scheduler.cc
    * FfMacScheduler: src/lte/model/ff-mac-scheduler.cc
    * FifoQueueDisc: src/traffic-control/model/fifo-queue-disc.cc
    * FileAggregator: src/stats/model/file-aggregator.cc
    * FileHelper: src/stats/helper/file-helper.cc
    * FlameProtocol: src/mesh/model/flame/flame-protocol.cc
    * FlameProtocolMac: src/mesh/model/flame/flame-protocol-mac.cc
    * FlameRtable: src/mesh/model/flame/flame-rtable.cc
    * FlowIdTag: src/network/utils/flow-id-tag.cc
    * FlowMonitor: src/flow-monitor/model/flow-monitor.cc
    * FqCoDelQueueDisc: src/traffic-control/model/fq-codel-queue-disc.cc
    * GeographicPositions: src/mobility/model/geographic-positions.cc
    * GlobalRouteManager: src/internet/model/global-route-manager.cc
    * GlobalRouteManagerImpl: src/internet/model/global-route-manager-impl.cc
    * GlobalRouter: src/internet/model/global-router-interface.cc
    * GlobalRoutingHelper: src/internet/helper/ipv4-global-routing-helper.cc
    * GlobalValue: src/core/model/global-value.cc
    * GnuplotAggregator: src/stats/model/gnuplot-aggregator.cc
    * GnuplotHelper: src/stats/helper/gnuplot-helper.cc
    * GrantedTimeWindowMpiInterface: src/mpi/model/granted-time-window-mpi-interface.cc
    * GtpuHeader: src/lte/model/epc-gtpu-header.cc
    * HalfDuplexIdealPhy: src/spectrum/model/half-duplex-ideal-phy.cc
    * HalfDuplexIdealPhySignalParameters: src/spectrum/model/half-duplex-ideal-phy-signal-parameters.cc
    * Hash: src/core/model/hash.cc
    * Hash-Fnv: src/core/model/hash-fnv.cc
    * Hash-Murmur3: src/core/model/hash-murmur3.cc
    * HashFunction: src/core/model/hash-function.cc
    * Header: src/network/model/header.cc
    * HeapScheduler: src/core/model/heap-scheduler.cc
    * HigherLayerTxVectorTag: src/wave/model/higher-tx-tag.cc
    * Histogram: src/flow-monitor/model/histogram.cc
    * HwmpProtocol: src/mesh/model/dot11s/hwmp-protocol.cc
    * HwmpProtocolMac: src/mesh/model/dot11s/hwmp-protocol-mac.cc
    * HwmpRtable: src/mesh/model/dot11s/hwmp-rtable.cc
    * HybridBuildingsPropagationLossModel: src/buildings/model/hybrid-buildings-propagation-loss-model.cc
    * Icmpv4Header: src/internet/model/icmpv4.cc
    * Icmpv4L4Protocol: src/internet/model/icmpv4-l4-protocol.cc
    * Icmpv6Header: src/internet/model/icmpv6-header.cc
    * Icmpv6L4Protocol: src/internet/model/icmpv6-l4-protocol.cc
    * IdealWifiManager: src/wifi/model/ideal-wifi-manager.cc
    * Inet6SocketAddress: src/network/utils/inet6-socket-address.cc
    * InetSocketAddress: src/network/utils/inet-socket-address.cc
    * InetTopologyReader: src/topology-read/model/inet-topology-reader.cc
    * InfrastructureWifiMac: src/wifi/model/infrastructure-wifi-mac.cc
    * Integer: src/core/model/integer.cc
    * InterferenceHelper: src/wifi/model/interference-helper.cc
    * InternetStackHelper: src/internet/helper/internet-stack-helper.cc
    * InternetTraceHelper: src/internet/helper/internet-trace-helper.cc
    * IpL4Protocol: src/internet/model/ip-l4-protocol.cc
    * IpcsClassifier: src/wimax/model/ipcs-classifier.cc
    * IpcsClassifierRecord: src/wimax/model/ipcs-classifier-record.cc
    * Ipv4: src/internet/model/ipv4.cc
    * Ipv4Address: src/network/utils/ipv4-address.cc
    * Ipv4AddressGenerator: src/internet/model/ipv4-address-generator.cc
    * Ipv4AddressHelper: src/internet/helper/ipv4-address-helper.cc
    * Ipv4EndPoint: src/internet/model/ipv4-end-point.cc
    * Ipv4EndPointDemux: src/internet/model/ipv4-end-point-demux.cc
    * Ipv4FlowProbe: src/flow-monitor/model/ipv4-flow-probe.cc
    * Ipv4GlobalRouting: src/internet/model/ipv4-global-routing.cc
    * Ipv4Header: src/internet/model/ipv4-header.cc
    * Ipv4Interface: src/internet/model/ipv4-interface.cc
    * Ipv4InterfaceAddress: src/internet/model/ipv4-interface-address.cc
    * Ipv4L3Protocol: src/internet/model/ipv4-l3-protocol.cc
    * Ipv4ListRouting: src/internet/model/ipv4-list-routing.cc
    * Ipv4NixVectorRouting: src/nix-vector-routing/model/ipv4-nix-vector-routing.cc
    * Ipv4PacketFilter: src/internet/model/ipv4-packet-filter.cc
    * Ipv4PacketInfoTag: src/internet/model/ipv4-packet-info-tag.cc
    * Ipv4PacketProbe: src/internet/model/ipv4-packet-probe.cc
    * Ipv4QueueDiscItem: src/internet/model/ipv4-queue-disc-item.cc
    * Ipv4RawSocketFactory: src/internet/model/ipv4-raw-socket-factory.cc
    * Ipv4RawSocketFactoryImpl: src/internet/model/ipv4-raw-socket-factory-impl.cc
    * Ipv4RawSocketImpl: src/internet/model/ipv4-raw-socket-impl.cc
    * Ipv4Route: src/internet/model/ipv4-route.cc
    * Ipv4RoutingProtocol: src/internet/model/ipv4-routing-protocol.cc
    * Ipv4RoutingTableEntry: src/internet/model/ipv4-routing-table-entry.cc
    * Ipv4StaticRouting: src/internet/model/ipv4-static-routing.cc
    * Ipv4StaticRoutingHelper: src/internet/helper/ipv4-static-routing-helper.cc
    * Ipv6Address: src/network/utils/ipv6-address.cc
    * Ipv6AddressGenerator: src/internet/model/ipv6-address-generator.cc
    * Ipv6AddressHelper: src/internet/helper/ipv6-address-helper.cc
    * Ipv6AutoconfiguredPrefix: src/internet/model/ipv6-autoconfigured-prefix.cc
    * Ipv6EndPoint: src/internet/model/ipv6-end-point.cc
    * Ipv6EndPointDemux: src/internet/model/ipv6-end-point-demux.cc
    * Ipv6Extension: src/internet/model/ipv6-extension.cc
    * Ipv6ExtensionHeader: src/internet/model/ipv6-extension-header.cc
    * Ipv6FlowProbe: src/flow-monitor/model/ipv6-flow-probe.cc
    * Ipv6Header: src/internet/model/ipv6-header.cc
    * Ipv6Interface: src/internet/model/ipv6-interface.cc
    * Ipv6InterfaceAddress: src/internet/model/ipv6-interface-address.cc
    * Ipv6L3Protocol: src/internet/model/ipv6-l3-protocol.cc
    * Ipv6ListRouting: src/internet/model/ipv6-list-routing.cc
    * Ipv6Option: src/internet/model/ipv6-option.cc
    * Ipv6OptionHeader: src/internet/model/ipv6-option-header.cc
    * Ipv6PacketFilter: src/internet/model/ipv6-packet-filter.cc
    * Ipv6PacketProbe: src/internet/model/ipv6-packet-probe.cc
    * Ipv6PmtuCache: src/internet/model/ipv6-pmtu-cache.cc
    * Ipv6QueueDiscItem: src/internet/model/ipv6-queue-disc-item.cc
    * Ipv6RawSocketImpl: src/internet/model/ipv6-raw-socket-impl.cc
    * Ipv6StaticRouting: src/internet/model/ipv6-static-routing.cc
    * Ipv6StaticRoutingHelper: src/internet/helper/ipv6-static-routing-helper.cc
    * IsotropicAntennaModel: src/antenna/model/isotropic-antenna-model.cc
    * ItpCache: src/internet/model/ItpCache.cc
    * ItpSink: src/applications/model/itp-sink.cc
    * ItpSource: src/applications/model/itp-source.cc
    * ItuR1238PropagationLossModel: src/buildings/model/itu-r-1238-propagation-loss-model.cc
    * ItuR1411LosPropagationLossModel: src/propagation/model/itu-r-1411-los-propagation-loss-model.cc
    * ItuR1411NlosOverRooftopPropagationLossModel: src/propagation/model/itu-r-1411-nlos-over-rooftop-propagation-loss-model.cc
    * Jakes: src/propagation/model/jakes-propagation-loss-model.cc
    * JakesProcess: src/propagation/model/jakes-process.cc
    * Kun2600MhzPropagationLossModel: src/propagation/model/kun-2600-mhz-propagation-loss-model.cc
    * LiIonEnergySource: src/energy/model/li-ion-energy-source.cc
    * ListScheduler: src/core/model/list-scheduler.cc
    * LlcSnalHeader: src/network/utils/llc-snap-header.cc
    * LoopbackNetDevice: src/internet/model/loopback-net-device.cc
    * LrWpanCsmaCa: src/lr-wpan/model/lr-wpan-csmaca.cc
    * LrWpanErrorModel: src/lr-wpan/model/lr-wpan-error-model.cc
    * LrWpanHelper: src/lr-wpan/helper/lr-wpan-helper.cc
    * LrWpanInterferenceHelper: src/lr-wpan/model/lr-wpan-interference-helper.cc
    * LrWpanMac: src/lr-wpan/model/lr-wpan-mac.cc
    * LrWpanNetDevice: src/lr-wpan/model/lr-wpan-net-device.cc
    * LrWpanPhy: src/lr-wpan/model/lr-wpan-phy.cc
    * LrWpanSpectrumSignalParameters: src/lr-wpan/model/lr-wpan-spectrum-signal-parameters.cc
    * LrWpanSpectrumValueHelper: src/lr-wpan/model/lr-wpan-spectrum-value-helper.cc
    * LteAmc: src/lte/model/lte-amc.cc
    * LteAnr: src/lte/model/lte-anr.cc
    * LteChunkProcessor: src/lte/model/lte-chunk-processor.cc
    * LteCommon: src/lte/model/lte-common.cc
    * LteControlMessage: src/lte/model/lte-control-messages.cc
    * LteEnbComponentCarrierManager: src/lte/model/lte-enb-component-carrier-manager.cc
    * LteEnbMac: src/lte/model/lte-enb-mac.cc
    * LteEnbNetDevice: src/lte/model/lte-enb-net-device.cc
    * LteEnbPhy: src/lte/model/lte-enb-phy.cc
    * LteEnbRrc: src/lte/model/lte-enb-rrc.cc
    * LteFfrAlgorithm: src/lte/model/lte-ffr-algorithm.cc
    * LteFfrDistributedAlgorithm: src/lte/model/lte-ffr-distributed-algorithm.cc
    * LteFfrEnhancedAlgorithm: src/lte/model/lte-ffr-enhanced-algorithm.cc
    * LteFfrSoftAlgorithm: src/lte/model/lte-ffr-soft-algorithm.cc
    * LteFrHardAlgorithm: src/lte/model/lte-fr-hard-algorithm.cc
    * LteFrNoOpAlgorithm: src/lte/model/lte-fr-no-op-algorithm.cc
    * LteFrSoftAlgorithm: src/lte/model/lte-fr-soft-algorithm.cc
    * LteFrStrictAlgorithm: src/lte/model/lte-fr-strict-algorithm.cc
    * LteGlobalPathlossDatabase: src/lte/helper/lte-global-pathloss-database.cc
    * LteHandoverAlgorithm: src/lte/model/lte-handover-algorithm.cc
    * LteHarqPhy: src/lte/model/lte-harq-phy.cc
    * LteHelper: src/lte/helper/lte-helper.cc
    * LteHexGridEnbTopologyHelper: src/lte/helper/lte-hex-grid-enb-topology-helper.cc
    * LteInterference: src/lte/model/lte-interference.cc
    * LteMiErrorModel: src/lte/model/lte-mi-error-model.cc
    * LteNetDevice: src/lte/model/lte-net-device.cc
    * LtePdcp: src/lte/model/lte-pdcp.cc
    * LtePdcpHeader: src/lte/model/lte-pdcp-header.cc
    * LtePhy: src/lte/model/lte-phy.cc
    * LteRlc: src/lte/model/lte-rlc.cc
    * LteRlcAm: src/lte/model/lte-rlc-am.cc
    * LteRlcAmHeader: src/lte/model/lte-rlc-am-header.cc
    * LteRlcHeader: src/lte/model/lte-rlc-header.cc
    * LteRlcTm: src/lte/model/lte-rlc-tm.cc
    * LteRlcUm: src/lte/model/lte-rlc-um.cc
    * LteRrcProtocolIdeal: src/lte/model/lte-rrc-protocol-ideal.cc
    * LteRrcProtocolReal: src/lte/model/lte-rrc-protocol-real.cc
    * LteSpectrumPhy: src/lte/model/lte-spectrum-phy.cc
    * LteSpectrumSignalParameters: src/lte/model/lte-spectrum-signal-parameters.cc
    * LteSpectrumValueHelper: src/lte/model/lte-spectrum-value-helper.cc
    * LteStatsCalculator: src/lte/helper/lte-stats-calculator.cc
    * LteUeComponentCarrierManager: src/lte/model/lte-ue-component-carrier-manager.cc
    * LteUeMac: src/lte/model/lte-ue-mac.cc
    * LteUeNetDevice: src/lte/model/lte-ue-net-device.cc
    * LteUePhy: src/lte/model/lte-ue-phy.cc
    * LteUePowerControl: src/lte/model/lte-ue-power-control.cc
    * LteUeRrc: src/lte/model/lte-ue-rrc.cc
    * LteVendorSpecificParameters: src/lte/model/lte-vendor-specific-parameters.cc
    * MACMESSAGES: src/wimax/model/mac-messages.cc
    * Mac16Address: src/network/utils/mac16-address.cc
    * Mac48Address: src/network/utils/mac48-address.cc
    * Mac64Address: src/network/utils/mac64-address.cc
    * MacLow: src/wifi/model/mac-low.cc
    * MacRxMiddle: src/wifi/model/mac-rx-middle.cc
    * MacStatsCalculator: src/lte/helper/mac-stats-calculator.cc
    * MacTxMiddle: src/wifi/model/mac-tx-middle.cc
    * MakeEvent: src/core/model/make-event.cc
    * MapScheduler: src/core/model/map-scheduler.cc
    * MeshL2RoutingProtocol: src/mesh/model/mesh-l2-routing-protocol.cc
    * MeshPointDevice: src/mesh/model/mesh-point-device.cc
    * MeshWifiInterfaceMac: src/mesh/model/mesh-wifi-interface-mac.cc
    * MicrowaveOvenSpectrumValue: src/spectrum/model/microwave-oven-spectrum-value-helper.cc
    * MinstrelHtWifiManager: src/wifi/model/minstrel-ht-wifi-manager.cc
    * MinstrelWifiManager: src/wifi/model/minstrel-wifi-manager.cc
    * MobilityBuildingInfo: src/buildings/model/mobility-building-info.cc
    * MobilityHelper: src/mobility/helper/mobility-helper.cc
    * MpduAggregator: src/wifi/model/mpdu-aggregator.cc
    * MpiInterface: src/mpi/model/mpi-interface.cc
    * MqQueueDisc: src/traffic-control/model/mq-queue-disc.cc
    * MsduAggregator: src/wifi/model/msdu-aggregator.cc
    * MultiModelSpectrumChannel: src/spectrum/model/multi-model-spectrum-channel.cc
    * Names: src/core/model/names.cc
    * NdiscCache: src/internet/model/ndisc-cache.cc
    * NetDevice: src/network/model/net-device.cc
    * NetDeviceQueueInterface: src/network/utils/net-device-queue-interface.cc
    * NistErrorRateModel: src/wifi/model/nist-error-rate-model.cc
    * NixVector: src/network/model/nix-vector.cc
    * NoOpComponentCarrierManager: src/lte/model/no-op-component-carrier-manager.cc
    * NoOpHandoverAlgorithm: src/lte/model/no-op-handover-algorithm.cc
    * Node: src/network/model/node.cc
    * NodeList: src/network/model/node-list.cc
    * NonCommunicatingNetDevice: src/spectrum/model/non-communicating-net-device.cc
    * Ns2MobilityHelper: src/mobility/helper/ns2-mobility-helper.cc
    * NullMessageMpiInterface: src/mpi/model/null-message-mpi-interface.cc
    * NullMessageSimulatorImpl: src/mpi/model/null-message-simulator-impl.cc
    * Object: src/core/model/object.cc
    * ObjectBase: src/core/model/object-base.cc
    * ObjectFactory: src/core/model/object-factory.cc
    * ObjectPtrContainer: src/core/model/object-ptr-container.cc
    * OcbWifiMac: src/wave/model/ocb-wifi-mac.cc
    * OhBuildingsPropagationLossModel: src/buildings/model/oh-buildings-propagation-loss-model.cc
    * OkumuraHataPropagationLossModel: src/propagation/model/okumura-hata-propagation-loss-model.cc
    * OlsrHeader: src/olsr/model/olsr-header.cc
    * OlsrRoutingProtocol: src/olsr/model/olsr-routing-protocol.cc
    * OmnetDataOutput: src/stats/model/omnet-data-output.cc
    * OnOffApplication: src/applications/model/onoff-application.cc
    * OnoeWifiManager: src/wifi/model/onoe-wifi-manager.cc
    * OrbisTopologyReader: src/topology-read/model/orbis-topology-reader.cc
    * OutputStreamWrapper: src/network/utils/output-stream-wrapper.cc
    * Packet: src/network/model/packet.cc
    * PacketBB: src/network/utils/packetbb.cc
    * PacketBurst: src/network/utils/packet-burst.cc
    * PacketDataCalculators: src/network/utils/packet-data-calculators.cc
    * PacketFilter: src/traffic-control/model/packet-filter.cc
    * PacketLossCounter: src/applications/model/packet-loss-counter.cc
    * PacketMetadata: src/network/model/packet-metadata.cc
    * PacketProbe: src/network/utils/packet-probe.cc
    * PacketSink: src/applications/model/packet-sink.cc
    * PacketSocket: src/network/utils/packet-socket.cc
    * PacketSocketAddress: src/network/utils/packet-socket-address.cc
    * PacketSocketClient: src/network/utils/packet-socket-client.cc
    * PacketSocketFactory: src/network/utils/packet-socket-factory.cc
    * PacketSocketServer: src/network/utils/packet-socket-server.cc
    * PacketTagList: src/network/model/packet-tag-list.cc
    * ParabolicAntennaModel: src/antenna/model/parabolic-antenna-model.cc
    * ParfWifiManager: src/wifi/model/parf-wifi-manager.cc
    * PcapFile: src/network/utils/pcap-file.cc
    * PcapFileWrapper: src/network/utils/pcap-file-wrapper.cc
    * PeerManagementProtocol: src/mesh/model/dot11s/peer-management-protocol.cc
    * PeerManagementProtocolMac: src/mesh/model/dot11s/peer-management-protocol-mac.cc
    * PendingData: src/internet/model/pending-data.cc
    * PfFfMacScheduler: src/lte/model/pf-ff-mac-scheduler.cc
    * PfifoFastQueueDisc: src/traffic-control/model/pfifo-fast-queue-disc.cc
    * PhyRxStatsCalculator: src/lte/helper/phy-rx-stats-calculator.cc
    * PhyStatsCalculator: src/lte/helper/phy-stats-calculator.cc
    * PhyTxStatsCalculator: src/lte/helper/phy-tx-stats-calculator.cc
    * PieQueueDisc: src/traffic-control/model/pie-queue-disc.cc
    * Ping6Application: src/internet-apps/model/ping6.cc
    * PointToPointChannel: src/point-to-point/model/point-to-point-channel.cc
    * PointToPointDumbbellHelper: src/point-to-point-layout/model/point-to-point-dumbbell.cc
    * PointToPointEpcHelper: src/lte/helper/point-to-point-epc-helper.cc
    * PointToPointGridHelper: src/point-to-point-layout/model/point-to-point-grid.cc
    * PointToPointHelper: src/point-to-point/helper/point-to-point-helper.cc
    * PointToPointNetDevice: src/point-to-point/model/point-to-point-net-device.cc
    * PointToPointRemoteChannel: src/point-to-point/model/point-to-point-remote-channel.cc
    * PointToPointStarHelper: src/point-to-point-layout/model/point-to-point-star.cc
    * Pointer: src/core/model/pointer.cc
    * PositionAllocator: src/mobility/model/position-allocator.cc
    * PppHeader: src/point-to-point/model/ppp-header.cc
    * PrintIntrospectedDoxygen: utils/print-introspected-doxygen.cc
    * PrioQueueDisc: src/traffic-control/model/prio-queue-disc.cc
    * Probe: src/stats/model/probe.cc
    * PropagationLossModel: src/propagation/model/propagation-loss-model.cc
    * PssFfMacScheduler: src/lte/model/pss-ff-mac-scheduler.cc
    * QosTxop: src/wifi/model/qos-txop.cc
    * Queue: src/network/utils/queue.cc
    * QueueDisc: src/traffic-control/model/queue-disc.cc
    * QueueItem: src/network/utils/queue-item.cc
    * QueueLimits: src/network/utils/queue-limits.cc
    * QueueSize: src/network/utils/queue-size.cc
    * RadioBearerStatsCalculator: src/lte/helper/radio-bearer-stats-calculator.cc
    * RadioBearerStatsConnector: src/lte/helper/radio-bearer-stats-connector.cc
    * RadioEnvironmentMapHelper: src/lte/helper/radio-environment-map-helper.cc
    * RadiotapHeader: src/network/utils/radiotap-header.cc
    * RadvdApplication: src/internet-apps/model/radvd.cc
    * RadvdHelper: src/internet-apps/helper/radvd-helper.cc
    * RadvdInterface: src/internet-apps/model/radvd-interface.cc
    * RadvdPrefix: src/internet-apps/model/radvd-prefix.cc
    * RandomDirection2dMobilityModel: src/mobility/model/random-direction-2d-mobility-model.cc
    * RandomVariableStream: src/core/model/random-variable-stream.cc
    * RandomVariableStreamHelper: src/core/helper/random-variable-stream-helper.cc
    * RandomWalk2d: src/mobility/model/random-walk-2d-mobility-model.cc
    * RawTextConfig: src/config-store/model/raw-text-config.cc
    * RealtimeSimulatorImpl: src/core/model/realtime-simulator-impl.cc
    * RedQueueDisc: src/traffic-control/model/red-queue-disc.cc
    * RefCountBase: src/core/model/ref-count-base.cc
    * RegularWifiMac: src/wifi/model/regular-wifi-mac.cc
    * RemSpectrumPhy: src/lte/model/rem-spectrum-phy.cc
    * Rip: src/internet/model/rip.cc
    * RipHeader: src/internet/model/rip-header.cc
    * RipNg: src/internet/model/ripng.cc
    * RipNgHeader: src/internet/model/ripng-header.cc
    * RngSeedManager: src/core/model/rng-seed-manager.cc
    * RngStream: src/core/model/rng-stream.cc
    * RocketfuelTopologyReader: src/topology-read/model/rocketfuel-topology-reader.cc
    * RrFfMacScheduler: src/lte/model/rr-ff-mac-scheduler.cc
    * RraaWifiManager: src/wifi/model/rraa-wifi-manager.cc
    * RrcHeader: src/lte/model/lte-rrc-header.cc
    * RrpaaWifiManager: src/wifi/model/rrpaa-wifi-manager.cc
    * RttEstimator: src/internet/model/rtt-estimator.cc
    * RttEstimator1: src/internet/model/rtt-estimator1.cc
    * RvBatteryModel: src/energy/model/rv-battery-model.cc
    * SNRToBlockErrorRateManager: src/wimax/model/snr-to-block-error-rate-manager.cc
    * SSLinkManager: src/wimax/model/ss-link-manager.cc
    * SSManager: src/wimax/model/ss-manager.cc
    * SSScheduler: src/wimax/model/ss-scheduler.cc
    * Scheduler: src/core/model/scheduler.cc
    * SeqTsHeader: src/applications/model/seq-ts-header.cc
    * ServiceFlowManager: src/wimax/model/service-flow-manager.cc
    * ShannonSpectrumErrorModel: src/spectrum/model/spectrum-error-model.cc
    * SimpleChannel: src/network/utils/simple-channel.cc
    * SimpleDeviceEnergyModel: src/energy/model/simple-device-energy-model.cc
    * SimpleFrameCaptureModel: src/wifi/model/simple-frame-capture-model.cc
    * SimpleNetDevice: src/network/utils/simple-net-device.cc
    * SimpleNetDeviceHelper: src/network/helper/simple-net-device-helper.cc
    * SimpleOfdmWimaxPhy: src/wimax/model/simple-ofdm-wimax-phy.cc
    * SimpleUeComponentCarrierManager: src/lte/model/simple-ue-component-carrier-manager.cc
    * Simulator: src/core/model/simulator.cc
    * SimulatorImpl: src/core/model/simulator-impl.cc
    * SingleModelSpectrumChannel: src/spectrum/model/single-model-spectrum-channel.cc
    * SixLowPanHelper: src/sixlowpan/helper/sixlowpan-helper.cc
    * SixLowPanNetDevice: src/sixlowpan/model/sixlowpan-net-device.cc
    * SllHeader: src/network/utils/sll-header.cc
    * Socket: src/network/model/socket.cc
    * SocketFactory: src/network/model/socket-factory.cc
    * SpectrumAnalyzer: src/spectrum/model/spectrum-analyzer.cc
    * SpectrumAnalyzerHelper: src/spectrum/helper/spectrum-analyzer-helper.cc
    * SpectrumChannel: src/spectrum/model/spectrum-channel.cc
    * SpectrumConverter: src/spectrum/model/spectrum-converter.cc
    * SpectrumInterference: src/spectrum/model/spectrum-interference.cc
    * SpectrumModel: src/spectrum/model/spectrum-model.cc
    * SpectrumPhy: src/spectrum/model/spectrum-phy.cc
    * SpectrumPropagationLossModel: src/spectrum/model/spectrum-propagation-loss-model.cc
    * SpectrumSignalParameters: src/spectrum/model/spectrum-signal-parameters.cc
    * SpectrumValue: src/spectrum/model/spectrum-value.cc
    * SpectrumWifiHelper: src/wifi/helper/spectrum-wifi-helper.cc
    * SpectrumWifiPhy: src/wifi/model/spectrum-wifi-phy.cc
    * SqliteDataOutput: src/stats/model/sqlite-data-output.cc
    * SsServiceFlowManager: src/wimax/model/ss-service-flow-manager.cc
    * StaWifiMac: src/wifi/model/sta-wifi-mac.cc
    * SubscriberStationNetDevice: src/wimax/model/ss-net-device.cc
    * SupportedRates: src/wifi/model/supported-rates.cc
    * Synchronizer: src/core/model/synchronizer.cc
    * SystemCondition: src/core/model/unix-system-condition.cc
    * SystemMutex: src/core/model/unix-system-mutex.cc
    * SystemPath: src/core/model/system-path.cc
    * SystemThread: src/core/model/system-thread.cc
    * SystemWallClockMs: src/core/model/unix-system-wall-clock-ms.cc
    * TagBuffer: src/network/model/tag-buffer.cc
    * TapBridge: src/tap-bridge/model/tap-bridge.cc
    * TapBridgeHelper: src/tap-bridge/helper/tap-bridge-helper.cc
    * TapFdNetDeviceHelper: src/fd-net-device/helper/tap-fd-net-device-helper.cc
    * TbfQueueDisc: src/traffic-control/model/tbf-queue-disc.cc
    * TcpBic: src/internet/model/tcp-bic.cc
    * TcpCongestionOps: src/internet/model/tcp-congestion-ops.cc
    * TcpHeader: src/internet/model/tcp-header.cc
    * TcpHighSpeed: src/internet/model/tcp-highspeed.cc
    * TcpHtcp: src/internet/model/tcp-htcp.cc
    * TcpHybla: src/internet/model/tcp-hybla.cc
    * TcpIllinois: src/internet/model/tcp-illinois.cc
    * TcpL4Protocol: src/internet/model/tcp-l4-protocol.cc
    * TcpLedbat: src/internet/model/tcp-ledbat.cc
    * TcpLp: src/internet/model/tcp-lp.cc
    * TcpOption: src/internet/model/tcp-option.cc
    * TcpOptionRfc793: src/internet/model/tcp-option-rfc793.cc
    * TcpOptionSack: src/internet/model/tcp-option-sack.cc
    * TcpOptionSackPermitted: src/internet/model/tcp-option-sack-permitted.cc
    * TcpOptionTS: src/internet/model/tcp-option-ts.cc
    * TcpOptionWinScale: src/internet/model/tcp-option-winscale.cc
    * TcpPrrRecovery: src/internet/model/tcp-prr-recovery.cc
    * TcpRecoveryOps: src/internet/model/tcp-recovery-ops.cc
    * TcpRxBuffer: src/internet/model/tcp-rx-buffer.cc
    * TcpScalable: src/internet/model/tcp-scalable.cc
    * TcpSocket: src/internet/model/tcp-socket.cc
    * TcpSocketBase: src/internet/model/tcp-socket-base.cc
    * TcpTxBuffer: src/internet/model/tcp-tx-buffer.cc
    * TcpVegas: src/internet/model/tcp-vegas.cc
    * TcpVeno: src/internet/model/tcp-veno.cc
    * TcpWestwood: src/internet/model/tcp-westwood.cc
    * TcpYeah: src/internet/model/tcp-yeah.cc
    * TdBetFfMacScheduler: src/lte/model/tdbet-ff-mac-scheduler.cc
    * TdMtFfMacScheduler: src/lte/model/tdmt-ff-mac-scheduler.cc
    * TdTbfqFfMacScheduler: src/lte/model/tdtbfq-ff-mac-scheduler.cc
    * Test: src/core/model/test.cc
    * ThreeGppHttpClient: src/applications/model/three-gpp-http-client.cc
    * ThreeGppHttpHeader: src/applications/model/three-gpp-http-header.cc
    * ThreeGppHttpServer: src/applications/model/three-gpp-http-server.cc
    * ThreeGppHttpVariables: src/applications/model/three-gpp-http-variables.cc
    * Time: src/core/model/time.cc
    * TimeDataCalculators: src/stats/model/time-data-calculators.cc
    * TimeProbe: src/stats/model/time-probe.cc
    * TimeSeriesAdaptor: src/stats/model/time-series-adaptor.cc
    * Timer: src/core/model/timer.cc
    * Tlv: src/wimax/model/wimax-tlv.cc
    * TopologyReader: src/topology-read/model/topology-reader.cc
    * TopologyReaderHelper: src/topology-read/helper/topology-reader-helper.cc
    * TraceFadingLossModel: src/lte/model/trace-fading-loss-model.cc
    * TraceHelper: src/network/helper/trace-helper.cc
    * TraceSourceAccessor: src/core/model/trace-source-accessor.cc
    * TrafficControlHelper: src/traffic-control/helper/traffic-control-helper.cc
    * TrafficControlLayer: src/traffic-control/model/traffic-control-layer.cc
    * Trailer: src/network/model/trailer.cc
    * TtaFfMacScheduler: src/lte/model/tta-ff-mac-scheduler.cc
    * TvSpectrumTransmitter: src/spectrum/model/tv-spectrum-transmitter.cc
    * TvSpectrumTransmitterHelper: src/spectrum/helper/tv-spectrum-transmitter-helper.cc
    * Txop: src/wifi/model/txop.cc
    * TypeId: src/core/model/type-id.cc
    * UanChannel: src/uan/model/uan-channel.cc
    * UanHelper: src/uan/helper/uan-helper.cc
    * UanMacAloha: src/uan/model/uan-mac-aloha.cc
    * UanMacCw: src/uan/model/uan-mac-cw.cc
    * UanMacRc: src/uan/model/uan-mac-rc.cc
    * UanMacRcGw: src/uan/model/uan-mac-rc-gw.cc
    * UanNetDevice: src/uan/model/uan-net-device.cc
    * UanPhyDual: src/uan/model/uan-phy-dual.cc
    * UanPhyGen: src/uan/model/uan-phy-gen.cc
    * UanPropModelThorp: src/uan/model/uan-prop-model-thorp.cc
    * UanTransducerHd: src/uan/model/uan-transducer-hd.cc
    * UanTxMode: src/uan/model/uan-tx-mode.cc
    * UdpClient: src/applications/model/udp-client.cc
    * UdpEchoClient1Application: src/applications/model/udp-echo-client1.cc
    * UdpEchoClientApplication: src/applications/model/udp-echo-client.cc
    * UdpEchoServer1Application: src/applications/model/udp-echo-server1.cc
    * UdpEchoServerApplication: src/applications/model/udp-echo-server.cc
    * UdpL4Protocol: src/internet/model/udp-l4-protocol.cc
    * UdpServer: src/applications/model/udp-server.cc
    * UdpSocket: src/internet/model/udp-socket.cc
    * UdpSocketImpl: src/internet/model/udp-socket-impl.cc
    * UdpTraceClient: src/applications/model/udp-trace-client.cc
    * Uinteger: src/core/model/uinteger.cc
    * Uinteger16Probe: src/stats/model/uinteger-16-probe.cc
    * Uinteger32Probe: src/stats/model/uinteger-32-probe.cc
    * Uinteger8Probe: src/stats/model/uinteger-8-probe.cc
    * UplinkScheduler: src/wimax/model/bs-uplink-scheduler.cc
    * UplinkSchedulerMBQoS: src/wimax/model/bs-uplink-scheduler-mbqos.cc
    * UplinkSchedulerRtps: src/wimax/model/bs-uplink-scheduler-rtps.cc
    * UplinkSchedulerSimple: src/wimax/model/bs-uplink-scheduler-simple.cc
    * V4Ping: src/internet-apps/model/v4ping.cc
    * Vector: src/core/model/vector.cc
    * VendorSpecificAction: src/wave/model/vendor-specific-action.cc
    * VirtualNetDevice: src/virtual-net-device/model/virtual-net-device.cc
    * VsaManager: src/wave/model/vsa-manager.cc
    * WallClockSynchronizer: src/core/model/wall-clock-synchronizer.cc
    * Watchdog: src/core/model/watchdog.cc
    * WaveBsmHelper: src/wave/helper/wave-bsm-helper.cc
    * WaveBsmStats: src/wave/helper/wave-bsm-stats.cc
    * WaveHelper: src/wave/helper/wave-helper.cc
    * WaveMacLow: src/wave/model/wave-mac-low.cc
    * WaveNetDevice: src/wave/model/wave-net-device.cc
    * WaveformGenerator: src/spectrum/model/waveform-generator.cc
    * WaveformGeneratorHelper: src/spectrum/helper/waveform-generator-helper.cc
    * WaypointMobilityModel: src/mobility/model/waypoint-mobility-model.cc
    * WifiHelper: src/wifi/helper/wifi-helper.cc
    * WifiMac: src/wifi/model/wifi-mac.cc
    * WifiMacQueue: src/wifi/model/wifi-mac-queue.cc
    * WifiMacQueueItem: src/wifi/model/wifi-mac-queue-item.cc
    * WifiNetDevice: src/wifi/model/wifi-net-device.cc
    * WifiPhy: src/wifi/model/wifi-phy.cc
    * WifiPhyStateHelper: src/wifi/model/wifi-phy-state-helper.cc
    * WifiRadioEnergyModel: src/wifi/model/wifi-radio-energy-model.cc
    * WifiRemoteStationManager: src/wifi/model/wifi-remote-station-manager.cc
    * WifiSpectrumPhyInterface: src/wifi/model/wifi-spectrum-phy-interface.cc
    * WifiSpectrumSignalParameters: src/wifi/model/wifi-spectrum-signal-parameters.cc
    * WifiSpectrumValueHelper: src/spectrum/model/wifi-spectrum-value-helper.cc
    * WifiTxCurrentModel: src/wifi/model/wifi-tx-current-model.cc
    * WimaxChannel: src/wimax/model/wimax-channel.cc
    * WimaxHelper: src/wimax/helper/wimax-helper.cc
    * WimaxMacQueue: src/wimax/model/wimax-mac-queue.cc
    * WimaxNetDevice: src/wimax/model/wimax-net-device.cc
    * WimaxPhy: src/wimax/model/wimax-phy.cc
    * XmlConfig: src/config-store/model/xml-config.cc
    * YansErrorRateModel: src/wifi/model/yans-error-rate-model.cc
    * YansWifiChannel: src/wifi/model/yans-wifi-channel.cc
    * YansWifiHelper: src/wifi/helper/yans-wifi-helper.cc
    * YansWifiPhy: src/wifi/model/yans-wifi-phy.cc
    * consumer: src/internet/model/consumer.cc
    * int64x64: src/core/model/int64x64.cc
    * int64x64-128: src/core/model/int64x64-128.cc
    * itp: src/internet/model/itp.cc
    * itpHeader: src/internet/model/itp-header.cc
    * producer: src/internet/model/producer.cc
    * simpleOfdmWimaxChannel: src/wimax/model/simple-ofdm-wimax-channel.cc


===============================================================
Page TraceSourceList All TraceSources

This is a list of all tracing sources.  For more information see the  tracing section of this API documentation and the Tracing sections in the Tutorial and Manual.

ns3::BooleanProbe

    * Output: The bool that serves as output for this probe

ns3::DoubleProbe

    * Output: The double that serves as output for this probe

ns3::TimeProbe

    * Output: The double valued (units of seconds) probe output

ns3::Uinteger8Probe

    * Output: The uint8_t that serves as output for this probe

ns3::Uinteger16Probe

    * Output: The uint16_t that serves as output for this probe

ns3::Uinteger32Probe

    * Output: The uint32_t that serves as output for this probe

ns3::TimeSeriesAdaptor

    * Output: The current simulation time versus the current value converted to a double

ns3::Queue<Packet>

    * Enqueue: Enqueue a packet in the queue.
    * Dequeue: Dequeue a packet from the queue.
    * Drop: Drop a packet (for whatever reason).
    * DropBeforeEnqueue: Drop a packet before enqueue.
    * DropAfterDequeue: Drop a packet after dequeue.

ns3::QueueBase

    * PacketsInQueue: Number of packets currently stored in the queue
    * BytesInQueue: Number of bytes currently stored in the queue

ns3::DynamicQueueLimits

    * Limit: Limit value calculated by DQL

ns3::PacketSocket

    * Drop: Drop packet due to receive buffer overflow

ns3::SimpleNetDevice

    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception

ns3::PacketSocketClient

    * Tx: A packet has been sent

ns3::PacketSocketServer

    * Rx: A packet has been received

ns3::PacketProbe

    * Output: The packet that serve as the output for this probe
    * OutputBytes: The number of bytes in the packet

ns3::VirtualNetDevice

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device

ns3::FdNetDevice

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device

ns3::CsmaNetDevice

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
    * MacTxBackoff: Trace source indicating a packet has been delayed by the CSMA backoff process
    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel
    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel
    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
    * PhyRxEnd: Trace source indicating a packet has been completely received by the device
    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device

ns3::BasicEnergySource

    * RemainingEnergy: Remaining energy at BasicEnergySource.

ns3::LiIonEnergySource

    * RemainingEnergy: Remaining energy at BasicEnergySource.

ns3::RvBatteryModel

    * RvBatteryModelBatteryLevel: RV battery model battery level.
    * RvBatteryModelBatteryLifetime: RV battery model battery lifetime.

ns3::SimpleDeviceEnergyModel

    * TotalEnergyConsumption: Total energy consumption of the radio device.

ns3::BasicEnergyHarvester

    * HarvestedPower: Harvested power by the BasicEnergyHarvester.
    * TotalEnergyHarvested: Total energy harvested by the harvester.

ns3::MobilityModel

    * CourseChange: The value of the position and/or velocity vector changed

ns3::UanPhyGen

    * RxOk: A packet was received successfully.
    * RxError: A packet was received unsuccessfully.
    * Tx: Packet transmission beginning.

ns3::UanPhy

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium.
    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel.
    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission.
    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device.
    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device.
    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception.

ns3::UanNetDevice

    * Rx: Received payload from the MAC layer.
    * Tx: Send payload to the MAC layer.

ns3::UanMacCw

    * Enqueue: A packet arrived at the MAC for transmission.
    * Dequeue: A was passed down to the PHY from the MAC.
    * RX: A packet was destined for this MAC and was received.

ns3::UanPhyDual

    * RxOk: A packet was received successfully.
    * RxError: A packet was received unsuccessfully.
    * Tx: Packet transmission beginning.

ns3::UanMacRc

    * Enqueue: A  (data) packet arrived at MAC for transmission.
    * Dequeue: A  (data) packet was passed down to PHY from MAC.
    * RX: A packet was destined for and received at this MAC layer.

ns3::UanMacRcGw

    * RX: A packet was destined for and received at this MAC layer.
    * Cycle: Trace cycle statistics.

ns3::AcousticModemEnergyModel

    * TotalEnergyConsumption: Total energy consumption of the modem device.

ns3::Queue<QueueDiscItem>

    * Enqueue: Enqueue a packet in the queue.
    * Dequeue: Dequeue a packet from the queue.
    * Drop: Drop a packet (for whatever reason).
    * DropBeforeEnqueue: Drop a packet before enqueue.
    * DropAfterDequeue: Drop a packet after dequeue.

ns3::QueueDisc

    * Enqueue: Enqueue a packet in the queue disc
    * Dequeue: Dequeue a packet from the queue disc
    * Requeue: Requeue a packet in the queue disc
    * Drop: Drop a packet stored in the queue disc
    * DropBeforeEnqueue: Drop a packet before enqueue
    * DropAfterDequeue: Drop a packet after dequeue
    * Mark: Mark a packet stored in the queue disc
    * PacketsInQueue: Number of packets currently stored in the queue disc
    * BytesInQueue: Number of bytes currently stored in the queue disc
    * SojournTime: Sojourn time of the last packet dequeued from the queue disc

ns3::CoDelQueueDisc

    * Count: CoDel count
    * LastCount: CoDel lastcount
    * DropState: Dropping state
    * DropNext: Time until next packet drop

ns3::TbfQueueDisc

    * TokensInFirstBucket: Number of First Bucket Tokens in bytes
    * TokensInSecondBucket: Number of Second Bucket Tokens in bytes

ns3::PointToPointNetDevice

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel
    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel
    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
    * PhyRxEnd: Trace source indicating a packet has been completely received by the device
    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device

ns3::PointToPointChannel

    * TxRxPointToPoint: Trace source indicating transmission of packet from the PointToPointChannel, used by the Animation interface.

ns3::Ipv4L3Protocol

    * Tx: Send ipv4 packet to outgoing interface.
    * Rx: Receive ipv4 packet from incoming interface.
    * Drop: Drop ipv4 packet
    * SendOutgoing: A newly-generated packet by this node is about to be queued for transmission
    * UnicastForward: A unicast IPv4 packet was received by this node and is being forwarded to another node
    * LocalDeliver: An IPv4 packet was received by/for this node, and it is being forward up the stack

ns3::ArpCache

    * Drop: Packet dropped due to ArpCache entry in WaitReply expiring.

ns3::ArpL3Protocol

    * Drop: Packet dropped because not enough room in pending queue for a specific cache entry.

ns3::UdpSocketImpl

    * Drop: Drop UDP packet due to receive buffer overflow

ns3::Ipv6L3Protocol

    * Tx: Send IPv6 packet to outgoing interface.
    * Rx: Receive IPv6 packet from incoming interface.
    * Drop: Drop IPv6 packet
    * SendOutgoing: A newly-generated packet by this node is about to be queued for transmission
    * UnicastForward: A unicast IPv6 packet was received by this node and is being forwarded to another node
    * LocalDeliver: An IPv6 packet was received by/for this node, and it is being forward up the stack

ns3::TcpSocketBase

    * RTO: Retransmission timeout
    * RTT: Last RTT sample
    * NextTxSequence: Next sequence number to send (SND.NXT)
    * HighestSequence: Highest sequence number ever sent in socket's life time
    * State: TCP state
    * CongState: TCP Congestion machine state
    * EcnState: Trace ECN state change of socket
    * AdvWND: Advertised Window Size
    * RWND: Remote side's flow control window
    * BytesInFlight: Socket estimation of bytes in flight
    * HighestRxSequence: Highest sequence number received from peer
    * HighestRxAck: Highest ack received from peer
    * CongestionWindow: The TCP connection's congestion window
    * CongestionWindowInflated: The TCP connection's congestion window inflates as in older RFC
    * SlowStartThreshold: TCP slow start threshold (bytes)
    * Tx: Send tcp packet to IP protocol
    * Rx: Receive tcp packet from IP protocol
    * EcnEchoSeq: Sequence of last received ECN Echo
    * EcnCeSeq: Sequence of last received CE 
    * EcnCwrSeq: Sequence of last received CWR

ns3::TcpSocketState

    * CongestionWindow: The TCP connection's congestion window
    * CongestionWindowInflated: The TCP connection's inflated congestion window
    * SlowStartThreshold: TCP slow start threshold (bytes)
    * CongState: TCP Congestion machine state
    * EcnState: Trace ECN state change of socket
    * HighestSequence: Highest sequence number received from peer
    * NextTxSequence: Next sequence number to send (SND.NXT)
    * BytesInFlight: The TCP connection's congestion window
    * RTT: Last RTT sample

ns3::TcpHybla

    * Rho: Rho parameter of Hybla

ns3::TcpWestwood

    * EstimatedBW: The estimated bandwidth

ns3::TcpRxBuffer

    * NextRxSequence: Next sequence number expected (RCV.NXT)

ns3::TcpTxBuffer

    * UnackSequence: First unacknowledged sequence number (SND.UNA)

ns3::Ipv4PacketProbe

    * Output: The packet plus its IPv4 object and interface that serve as the output for this probe
    * OutputBytes: The number of bytes in the packet

ns3::Ipv6PacketProbe

    * Output: The packet plus its IPv6 object and interface that serve as the output for this probe
    * OutputBytes: The number of bytes in the packet

ns3::itp

    * CongestionWindow: The ITP connection's congestion window

ns3::consumer

    * CongestionWindow: The ITP connection's congestion window

ns3::SixLowPanNetDevice

    * Tx: Send - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.
    * Rx: Receive - packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.
    * Drop: Drop - DropReason, packet (including 6LoWPAN header), SixLoWPanNetDevice Ptr, interface index.

ns3::olsr::RoutingProtocol

    * Rx: Receive OLSR packet.
    * Tx: Send OLSR packet.
    * RoutingTableChanged: The OLSR routing table has changed.

ns3::WimaxNetDevice

    * Rx: Receive trace
    * Tx: Transmit trace

ns3::BaseStationNetDevice

    * BSTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
    * BSTxDrop: A packet has been dropped in the MAC layer before being queued for transmission.
    * BSPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * BSRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
    * BSRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.

ns3::SubscriberStationNetDevice

    * SSTxDrop: A packet has been dropped in the MAC layer before being queued for transmission.
    * SSPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * SSRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
    * SSRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.

ns3::SimpleOfdmWimaxPhy

    * Rx: Receive trace
    * Tx: Transmit trace
    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel
    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception

ns3::WimaxMacQueue

    * Enqueue: Enqueue trace
    * Dequeue: Dequeue trace
    * Drop: Drop trace

ns3::V4Ping

    * Rtt: The rtt calculated by the ping.

ns3::DhcpClient

    * NewLease: Get a NewLease
    * ExpireLease: A lease expires

ns3::BulkSendApplication

    * Tx: A new packet is created and is sent

ns3::OnOffApplication

    * Tx: A new packet is created and is sent
    * TxWithAddresses: A new packet is created and is sent

ns3::PacketSink

    * Rx: A packet has been received
    * RxWithAddresses: A packet has been received

ns3::UdpServer

    * Rx: A packet has been received
    * RxWithAddresses: A packet has been received

ns3::UdpEchoClient

    * Tx: A new packet is created and is sent
    * Rx: A packet has been received
    * TxWithAddresses: A new packet is created and is sent
    * RxWithAddresses: A packet has been received

ns3::UdpEchoServer

    * Rx: A packet has been received
    * RxWithAddresses: A packet has been received

ns3::ApplicationPacketProbe

    * Output: The packet plus its socket address that serve as the output for this probe
    * OutputBytes: The number of bytes in the packet

ns3::ThreeGppHttpClient

    * ConnectionEstablished: Connection to the destination web server has been established.
    * ConnectionClosed: Connection to the destination web server is closed.
    * Tx: General trace for sending a packet of any kind.
    * TxMainObjectRequest: Sent a request for a main object.
    * TxEmbeddedObjectRequest: Sent a request for an embedded object.
    * RxMainObjectPacket: A packet of main object has been received.
    * RxMainObject: Received a whole main object. Header is included.
    * RxEmbeddedObjectPacket: A packet of embedded object has been received.
    * RxEmbeddedObject: Received a whole embedded object. Header is included.
    * Rx: General trace for receiving a packet of any kind.
    * RxDelay: General trace of delay for receiving a complete object.
    * RxRtt: General trace of round trip delay time for receiving a complete object.
    * StateTransition: Trace fired upon every HTTP client state transition.

ns3::ThreeGppHttpServer

    * ConnectionEstablished: Connection to a remote web client has been established.
    * MainObject: A main object has been generated.
    * EmbeddedObject: An embedded object has been generated.
    * Tx: A packet has been sent.
    * Rx: A packet has been received.
    * RxDelay: A packet has been received with delay information.
    * StateTransition: Trace fired upon every HTTP client state transition.

ns3::UdpEchoClient1

    * Tx: A new packet is created and is sent
    * Rx: A packet has been received
    * TxWithAddresses: A new packet is created and is sent
    * RxWithAddresses: A packet has been received

ns3::UdpEchoServer1

    * Rx: A packet has been received
    * RxWithAddresses: A packet has been received

ns3::SpectrumChannel

    * Gain: This trace is fired whenever a new path loss value is calculated. The parameters to this trace are : Pointer to the mobility model of the transmitterPointer to the mobility model of the receiverTx antenna gainRx antenna gainPropagation gainPathloss
    * PathLoss: This trace is fired whenever a new path loss value is calculated. The first and second parameters to the trace are pointers respectively to the TX and RX SpectrumPhy instances, whereas the third parameters is the loss value in dB. Note that the loss value reported by this trace is the single-frequency loss value obtained by evaluating only the TX and RX AntennaModels and the PropagationLossModel. In particular, note that SpectrumPropagationLossModel (even if present) is never used to evaluate the loss value reported in this trace. 
    * TxSigParams: This trace is fired whenever a signal is transmitted.The sole parameter is a pointer to a copy of the SpectrumSignalParameters provided by the transmitter.

ns3::WaveformGenerator

    * TxStart: Trace fired when a new transmission is started
    * TxEnd: Trace fired when a previously started transmission is finished

ns3::SpectrumAnalyzer

    * AveragePowerSpectralDensityReport: Trace fired whenever a new value for the average Power Spectral Density is calculated

ns3::AlohaNoackNetDevice

    * MacTx: Trace source indicating a packet has arrived for transmission by this device
    * MacTxDrop: Trace source indicating a packet has been dropped by the device before transmission
    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,

ns3::HalfDuplexIdealPhy

    * TxStart: Trace fired when a new transmission is started
    * TxEnd: Trace fired when a previously started transmission is finished
    * RxStart: Trace fired when the start of a signal is detected
    * RxAbort: Trace fired when a previously started RX is aborted before time
    * RxEndOk: Trace fired when a previously started RX terminates successfully
    * RxEndError: Trace fired when a previously started RX terminates with an error (packet is corrupted)

ns3::LteSpectrumPhy

    * TxStart: Trace fired when a new transmission is started
    * TxEnd: Trace fired when a previously started transmission is finished
    * RxStart: Trace fired when the start of a signal is detected
    * RxEndOk: Trace fired when a previously started RX terminates successfully
    * RxEndError: Trace fired when a previously started RX terminates with an error
    * DlPhyReception: DL reception PHY layer statistics.
    * UlPhyReception: DL reception PHY layer statistics.

ns3::LteEnbPhy

    * ReportUeSinr: Report UEs' averaged linear SINR
    * ReportInterference: Report linear interference power per PHY RB
    * DlPhyTransmission: DL transmission PHY layer statistics.

ns3::LteUePhy

    * ReportCurrentCellRsrpSinr: RSRP and SINR statistics.
    * UlPhyTransmission: DL transmission PHY layer statistics.
    * ReportUeMeasurements: Report UE measurements RSRP (dBm) and RSRQ (dB).
    * StateTransition: Trace fired upon every UE PHY state transition

ns3::UeManager

    * StateTransition: fired upon every UE state transition seen by the UeManager at the eNB RRC

ns3::LteEnbRrc

    * NewUeContext: Fired upon creation of a new UE context.
    * ConnectionEstablished: Fired upon successful RRC connection establishment.
    * ConnectionReconfiguration: trace fired upon RRC connection reconfiguration
    * HandoverStart: trace fired upon start of a handover procedure
    * HandoverEndOk: trace fired upon successful termination of a handover procedure
    * RecvMeasurementReport: trace fired when measurement report is received

ns3::LteUeRrc

    * MibReceived: trace fired upon reception of Master Information Block
    * Sib1Received: trace fired upon reception of System Information Block Type 1
    * Sib2Received: trace fired upon reception of System Information Block Type 2
    * StateTransition: trace fired upon every UE RRC state transition
    * InitialCellSelectionEndOk: trace fired upon successful initial cell selection procedure
    * InitialCellSelectionEndError: trace fired upon failed initial cell selection procedure
    * RandomAccessSuccessful: trace fired upon successful completion of the random access procedure
    * RandomAccessError: trace fired upon failure of the random access procedure
    * ConnectionEstablished: trace fired upon successful RRC connection establishment
    * ConnectionTimeout: trace fired upon timeout RRC connection establishment because of T300
    * ConnectionReconfiguration: trace fired upon RRC connection reconfiguration
    * HandoverStart: trace fired upon start of a handover procedure
    * HandoverEndOk: trace fired upon successful termination of a handover procedure
    * HandoverEndError: trace fired upon failure of a handover procedure
    * SCarrierConfigured: trace fired after configuring secondary carriers

ns3::LteRlc

    * TxPDU: PDU transmission notified to the MAC.
    * RxPDU: PDU received.

ns3::LtePdcp

    * TxPDU: PDU transmission notified to the RLC.
    * RxPDU: PDU received.

ns3::LteEnbMac

    * DlScheduling: Information regarding DL scheduling.
    * UlScheduling: Information regarding UL scheduling.

ns3::EpcUeNas

    * StateTransition: fired upon every UE NAS state transition

ns3::LteUePowerControl

    * ReportPuschTxPower: Report PUSCH TxPower in dBm
    * ReportPucchTxPower: Report PUCCH TxPower in dBm
    * ReportSrsTxPower: Report SRS TxPower in dBm

ns3::LrWpanPhy

    * TrxStateValue: The state of the transceiver
    * TrxState: The state of the transceiver
    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel.
    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception

ns3::LrWpanMac

    * MacTxEnqueue: Trace source indicating a packet has been enqueued in the transaction queue
    * MacTxDequeue: Trace source indicating a packet has was dequeued from the transaction queue
    * MacTx: Trace source indicating a packet has arrived for transmission by this device
    * MacTxOk: Trace source indicating a packet has been successfully sent
    * MacTxDrop: Trace source indicating a packet has been dropped during transmission
    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace,
    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a non-promiscuous trace,
    * MacRxDrop: Trace source indicating a packet was received, but dropped before being forwarded up the stack
    * Sniffer: Trace source simulating a non-promiscuous packet sniffer attached to the device
    * PromiscSniffer: Trace source simulating a promiscuous packet sniffer attached to the device
    * MacStateValue: The state of LrWpan Mac
    * MacState: The state of LrWpan Mac
    * MacSentPkt: Trace source reporting some information about the sent packet

ns3::WifiPhy

    * PhyTxBegin: Trace source indicating a packet has begun transmitting over the channel medium
    * PhyTxEnd: Trace source indicating a packet has been completely transmitted over the channel. NOTE: the only official WifiPhy implementation available to this date never fires this trace source.
    * PhyTxDrop: Trace source indicating a packet has been dropped by the device during transmission
    * PhyRxBegin: Trace source indicating a packet has begun being received from the channel medium by the device
    * PhyRxEnd: Trace source indicating a packet has been completely received from the channel medium by the device
    * PhyRxDrop: Trace source indicating a packet has been dropped by the device during reception
    * MonitorSnifferRx: Trace source simulating a wifi device in monitor mode sniffing all received frames
    * MonitorSnifferTx: Trace source simulating the capability of a wifi device in monitor mode to sniff all frames being transmitted

ns3::WifiPhyStateHelper

    * State: The state of the PHY layer
    * RxOk: A packet has been received successfully.
    * RxError: A packet has been received unsuccessfully.
    * Tx: Packet transmission is starting.

ns3::SpectrumWifiPhy

    * SignalArrival: Signal arrival

ns3::Queue<WifiMacQueueItem>

    * Enqueue: Enqueue a packet in the queue.
    * Dequeue: Dequeue a packet from the queue.
    * Drop: Drop a packet (for whatever reason).
    * DropBeforeEnqueue: Drop a packet before enqueue.
    * DropAfterDequeue: Drop a packet after dequeue.

ns3::WifiMac

    * MacTx: A packet has been received from higher layers and is being processed in preparation for queueing for transmission.
    * MacTxDrop: A packet has been dropped in the MAC layer before transmission.
    * MacPromiscRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack.  This is a promiscuous trace.
    * MacRx: A packet has been received by this device, has been passed up from the physical layer and is being forwarded up the local protocol stack. This is a non-promiscuous trace.
    * MacRxDrop: A packet has been dropped in the MAC layer after it has been passed up from the physical layer.

ns3::RegularWifiMac

    * TxOkHeader: The header of successfully transmitted packet.
    * TxErrHeader: The header of unsuccessfully transmitted packet.

ns3::WifiRemoteStationManager

    * MacTxRtsFailed: The transmission of a RTS by the MAC layer has failed
    * MacTxDataFailed: The transmission of a data packet by the MAC layer has failed
    * MacTxFinalRtsFailed: The transmission of a RTS has exceeded the maximum number of attempts
    * MacTxFinalDataFailed: The transmission of a data packet has exceeded the maximum number of attempts

ns3::StaWifiMac

    * Assoc: Associated with an access point.
    * DeAssoc: Association with an access point lost.
    * BeaconArrival: Time of beacons arrival from associated AP

ns3::ArfWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::AarfWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::IdealWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::AmrrWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::OnoeWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::RraaWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::AarfcdWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::CaraWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::MinstrelWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::MinstrelHtWifiManager

    * Rate: Traced value for rate changes (b/s)

ns3::QosTxop

    * BackoffTrace: Trace source for backoff values
    * CwTrace: Trace source for contention window values
    * TxopTrace: Trace source for txop start and duration times

ns3::ParfWifiManager

    * PowerChange: The transmission power has change
    * RateChange: The transmission rate has change

ns3::AparfWifiManager

    * PowerChange: The transmission power has change
    * RateChange: The transmission rate has change

ns3::RrpaaWifiManager

    * RateChange: The transmission rate has change.
    * PowerChange: The transmission power has change.

ns3::WifiRadioEnergyModel

    * TotalEnergyConsumption: Total energy consumption of the radio device.

ns3::dot11s::PeerManagementProtocol

    * LinkOpen: New peer link opened
    * LinkClose: New peer link closed

ns3::dot11s::HwmpProtocol

    * RouteDiscoveryTime: The time of route discovery procedure
    * RouteChange: Routing table changed

ns3::dsr::DsrRouting

    * Tx: Send DSR packet.
    * Drop: Drop DSR packet

ns3::dsr::DsrOptions

    * Drop: Packet dropped.
    * Rx: Receive DSR packet.


===============================================================
Section attribute
Subsection attribute_Address Address Attribute
Attribute implementation for Address
  See: ns3::Address
===============================================================
Section attribute_Address
 ns3::AddressValue "address.h"
AttributeValue implementation for Address.
  See: AttributeValue
===============================================================
Address ns3::AddressValue::AddressValue(const Address & value)
Copy constructor.
  Arg: [in] value The Address value to copy.
===============================================================
Address ns3::AddressValue::Get (void) const
  Returns: The Address value.
===============================================================
bool ns3::AddressValue::GetAccessor (T & value) const
Access the Address value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Address value, as type  T.
  Returns: true.
===============================================================
void ns3::AddressValue::Set (const Address & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Address ns3::AddressValue::m_value
The stored Address instance.

===============================================================
Section attribute_Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeAddressAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Address

 ns3::AddressChecker "address.h"
AttributeChecker implementation for AddressValue.
  See: AttributeChecker
===============================================================
Section attribute_Address
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeAddressChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Box Box Attribute
Attribute implementation for Box
  See: ns3::Box
===============================================================
Section attribute_Box
 ns3::BoxValue "box.h"
AttributeValue implementation for Box.
  See: AttributeValue
===============================================================
Box ns3::BoxValue::BoxValue(const Box & value)
Copy constructor.
  Arg: [in] value The Box value to copy.
===============================================================
Box ns3::BoxValue::Get (void) const
  Returns: The Box value.
===============================================================
bool ns3::BoxValue::GetAccessor (T & value) const
Access the Box value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Box value, as type  T.
  Returns: true.
===============================================================
void ns3::BoxValue::Set (const Box & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Box ns3::BoxValue::m_value
The stored Box instance.

===============================================================
Section attribute_Box
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Box
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBoxAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Box

 ns3::BoxChecker "box.h"
AttributeChecker implementation for BoxValue.
  See: AttributeChecker
===============================================================
Section attribute_Box
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBoxChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_DataRate DataRate Attribute
Attribute implementation for DataRate
  See: ns3::DataRate
===============================================================
Section attribute_DataRate
 ns3::DataRateValue "data-rate.h"
AttributeValue implementation for DataRate.
  See: AttributeValue
===============================================================
DataRate ns3::DataRateValue::DataRateValue(const DataRate & value)
Copy constructor.
  Arg: [in] value The DataRate value to copy.
===============================================================
DataRate ns3::DataRateValue::Get (void) const
  Returns: The DataRate value.
===============================================================
bool ns3::DataRateValue::GetAccessor (T & value) const
Access the DataRate value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The DataRate value, as type  T.
  Returns: true.
===============================================================
void ns3::DataRateValue::Set (const DataRate & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: DataRate ns3::DataRateValue::m_value
The stored DataRate instance.

===============================================================
Section attribute_DataRate
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_DataRate
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDataRateAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_DataRate

 ns3::DataRateChecker "data-rate.h"
AttributeChecker implementation for DataRateValue.
  See: AttributeChecker
===============================================================
Section attribute_DataRate
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDataRateChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_DsssParameterSet DsssParameterSet Attribute
Attribute implementation for DsssParameterSet
  See: ns3::DsssParameterSet
===============================================================
Section attribute_DsssParameterSet
 ns3::DsssParameterSetValue "dsss-parameter-set.h"
AttributeValue implementation for DsssParameterSet.
  See: AttributeValue
===============================================================
DsssParameterSet ns3::DsssParameterSetValue::DsssParameterSetValue(const DsssParameterSet & value)
Copy constructor.
  Arg: [in] value The DsssParameterSet value to copy.
===============================================================
DsssParameterSet ns3::DsssParameterSetValue::Get (void) const
  Returns: The DsssParameterSet value.
===============================================================
bool ns3::DsssParameterSetValue::GetAccessor (T & value) const
Access the DsssParameterSet value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The DsssParameterSet value, as type  T.
  Returns: true.
===============================================================
void ns3::DsssParameterSetValue::Set (const DsssParameterSet & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: DsssParameterSet ns3::DsssParameterSetValue::m_value
The stored DsssParameterSet instance.

===============================================================
Section attribute_DsssParameterSet
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDsssParameterSetAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_DsssParameterSet
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDsssParameterSetAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_DsssParameterSet

 ns3::DsssParameterSetChecker "dsss-parameter-set.h"
AttributeChecker implementation for DsssParameterSetValue.
  See: AttributeChecker
===============================================================
Section attribute_DsssParameterSet
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDsssParameterSetChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_EdcaParameterSet EdcaParameterSet Attribute
Attribute implementation for EdcaParameterSet
  See: ns3::EdcaParameterSet
===============================================================
Section attribute_EdcaParameterSet
 ns3::EdcaParameterSetValue "edca-parameter-set.h"
AttributeValue implementation for EdcaParameterSet.
  See: AttributeValue
===============================================================
EdcaParameterSet ns3::EdcaParameterSetValue::EdcaParameterSetValue(const EdcaParameterSet & value)
Copy constructor.
  Arg: [in] value The EdcaParameterSet value to copy.
===============================================================
EdcaParameterSet ns3::EdcaParameterSetValue::Get (void) const
  Returns: The EdcaParameterSet value.
===============================================================
bool ns3::EdcaParameterSetValue::GetAccessor (T & value) const
Access the EdcaParameterSet value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The EdcaParameterSet value, as type  T.
  Returns: true.
===============================================================
void ns3::EdcaParameterSetValue::Set (const EdcaParameterSet & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: EdcaParameterSet ns3::EdcaParameterSetValue::m_value
The stored EdcaParameterSet instance.

===============================================================
Section attribute_EdcaParameterSet
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEdcaParameterSetAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_EdcaParameterSet
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEdcaParameterSetAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_EdcaParameterSet

 ns3::EdcaParameterSetChecker "edca-parameter-set.h"
AttributeChecker implementation for EdcaParameterSetValue.
  See: AttributeChecker
===============================================================
Section attribute_EdcaParameterSet
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeEdcaParameterSetChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_ErpInformation ErpInformation Attribute
Attribute implementation for ErpInformation
  See: ns3::ErpInformation
===============================================================
Section attribute_ErpInformation
 ns3::ErpInformationValue "erp-information.h"
AttributeValue implementation for ErpInformation.
  See: AttributeValue
===============================================================
ErpInformation ns3::ErpInformationValue::ErpInformationValue(const ErpInformation & value)
Copy constructor.
  Arg: [in] value The ErpInformation value to copy.
===============================================================
ErpInformation ns3::ErpInformationValue::Get (void) const
  Returns: The ErpInformation value.
===============================================================
bool ns3::ErpInformationValue::GetAccessor (T & value) const
Access the ErpInformation value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The ErpInformation value, as type  T.
  Returns: true.
===============================================================
void ns3::ErpInformationValue::Set (const ErpInformation & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: ErpInformation ns3::ErpInformationValue::m_value
The stored ErpInformation instance.

===============================================================
Section attribute_ErpInformation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeErpInformationAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_ErpInformation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeErpInformationAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_ErpInformation

 ns3::ErpInformationChecker "erp-information.h"
AttributeChecker implementation for ErpInformationValue.
  See: AttributeChecker
===============================================================
Section attribute_ErpInformation
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeErpInformationChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_ExtendedCapabilities ExtendedCapabilities Attribute
Attribute implementation for ExtendedCapabilities
  See: ns3::ExtendedCapabilities
===============================================================
Section attribute_ExtendedCapabilities
 ns3::ExtendedCapabilitiesValue "extended-capabilities.h"
AttributeValue implementation for ExtendedCapabilities.
  See: AttributeValue
===============================================================
ExtendedCapabilities ns3::ExtendedCapabilitiesValue::ExtendedCapabilitiesValue(const ExtendedCapabilities & value)
Copy constructor.
  Arg: [in] value The ExtendedCapabilities value to copy.
===============================================================
ExtendedCapabilities ns3::ExtendedCapabilitiesValue::Get (void) const
  Returns: The ExtendedCapabilities value.
===============================================================
bool ns3::ExtendedCapabilitiesValue::GetAccessor (T & value) const
Access the ExtendedCapabilities value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The ExtendedCapabilities value, as type  T.
  Returns: true.
===============================================================
void ns3::ExtendedCapabilitiesValue::Set (const ExtendedCapabilities & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: ExtendedCapabilities ns3::ExtendedCapabilitiesValue::m_value
The stored ExtendedCapabilities instance.

===============================================================
Section attribute_ExtendedCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeExtendedCapabilitiesAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_ExtendedCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeExtendedCapabilitiesAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_ExtendedCapabilities

 ns3::ExtendedCapabilitiesChecker "extended-capabilities.h"
AttributeChecker implementation for ExtendedCapabilitiesValue.
  See: AttributeChecker
===============================================================
Section attribute_ExtendedCapabilities
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeExtendedCapabilitiesChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_HeCapabilities HeCapabilities Attribute
Attribute implementation for HeCapabilities
  See: ns3::HeCapabilities
===============================================================
Section attribute_HeCapabilities
 ns3::HeCapabilitiesValue "he-capabilities.h"
AttributeValue implementation for HeCapabilities.
  See: AttributeValue
===============================================================
HeCapabilities ns3::HeCapabilitiesValue::HeCapabilitiesValue(const HeCapabilities & value)
Copy constructor.
  Arg: [in] value The HeCapabilities value to copy.
===============================================================
HeCapabilities ns3::HeCapabilitiesValue::Get (void) const
  Returns: The HeCapabilities value.
===============================================================
bool ns3::HeCapabilitiesValue::GetAccessor (T & value) const
Access the HeCapabilities value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The HeCapabilities value, as type  T.
  Returns: true.
===============================================================
void ns3::HeCapabilitiesValue::Set (const HeCapabilities & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: HeCapabilities ns3::HeCapabilitiesValue::m_value
The stored HeCapabilities instance.

===============================================================
Section attribute_HeCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeCapabilitiesAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_HeCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeCapabilitiesAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_HeCapabilities

 ns3::HeCapabilitiesChecker "he-capabilities.h"
AttributeChecker implementation for HeCapabilitiesValue.
  See: AttributeChecker
===============================================================
Section attribute_HeCapabilities
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHeCapabilitiesChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_VhtCapabilities VhtCapabilities Attribute
Attribute implementation for VhtCapabilities
  See: ns3::VhtCapabilities
===============================================================
Section attribute_VhtCapabilities
 ns3::VhtCapabilitiesValue "vht-capabilities.h"
AttributeValue implementation for VhtCapabilities.
  See: AttributeValue
===============================================================
VhtCapabilities ns3::VhtCapabilitiesValue::VhtCapabilitiesValue(const VhtCapabilities & value)
Copy constructor.
  Arg: [in] value The VhtCapabilities value to copy.
===============================================================
VhtCapabilities ns3::VhtCapabilitiesValue::Get (void) const
  Returns: The VhtCapabilities value.
===============================================================
bool ns3::VhtCapabilitiesValue::GetAccessor (T & value) const
Access the VhtCapabilities value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The VhtCapabilities value, as type  T.
  Returns: true.
===============================================================
void ns3::VhtCapabilitiesValue::Set (const VhtCapabilities & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: VhtCapabilities ns3::VhtCapabilitiesValue::m_value
The stored VhtCapabilities instance.

===============================================================
Section attribute_VhtCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtCapabilitiesAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_VhtCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtCapabilitiesAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_VhtCapabilities

 ns3::VhtCapabilitiesChecker "vht-capabilities.h"
AttributeChecker implementation for VhtCapabilitiesValue.
  See: AttributeChecker
===============================================================
Section attribute_VhtCapabilities
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVhtCapabilitiesChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_HtCapabilities HtCapabilities Attribute
Attribute implementation for HtCapabilities
  See: ns3::HtCapabilities
===============================================================
Section attribute_HtCapabilities
 ns3::HtCapabilitiesValue "ht-capabilities.h"
AttributeValue implementation for HtCapabilities.
  See: AttributeValue
===============================================================
HtCapabilities ns3::HtCapabilitiesValue::HtCapabilitiesValue(const HtCapabilities & value)
Copy constructor.
  Arg: [in] value The HtCapabilities value to copy.
===============================================================
HtCapabilities ns3::HtCapabilitiesValue::Get (void) const
  Returns: The HtCapabilities value.
===============================================================
bool ns3::HtCapabilitiesValue::GetAccessor (T & value) const
Access the HtCapabilities value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The HtCapabilities value, as type  T.
  Returns: true.
===============================================================
void ns3::HtCapabilitiesValue::Set (const HtCapabilities & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: HtCapabilities ns3::HtCapabilitiesValue::m_value
The stored HtCapabilities instance.

===============================================================
Section attribute_HtCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtCapabilitiesAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_HtCapabilities
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtCapabilitiesAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_HtCapabilities

 ns3::HtCapabilitiesChecker "ht-capabilities.h"
AttributeChecker implementation for HtCapabilitiesValue.
  See: AttributeChecker
===============================================================
Section attribute_HtCapabilities
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHtCapabilitiesChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_IeMeshId IeMeshId Attribute
Attribute implementation for IeMeshId
  See: ns3::dot11s::IeMeshId
===============================================================
Section attribute_IeMeshId
 ns3::IeMeshIdValue "ie-dot11s-id.h"
AttributeValue implementation for IeMeshId.
  See: AttributeValue
===============================================================
IeMeshId ns3::IeMeshIdValue::IeMeshIdValue(const IeMeshId & value)
Copy constructor.
  Arg: [in] value The IeMeshId value to copy.
===============================================================
IeMeshId ns3::IeMeshIdValue::Get (void) const
  Returns: The IeMeshId value.
===============================================================
bool ns3::IeMeshIdValue::GetAccessor (T & value) const
Access the IeMeshId value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The IeMeshId value, as type  T.
  Returns: true.
===============================================================
void ns3::IeMeshIdValue::Set (const IeMeshId & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: IeMeshId ns3::IeMeshIdValue::m_value
The stored IeMeshId instance.

===============================================================
Section attribute_IeMeshId
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_IeMeshId
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIeMeshIdAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_IeMeshId

 ns3::IeMeshIdChecker "ie-dot11s-id.h"
AttributeChecker implementation for IeMeshIdValue.
  See: AttributeChecker
===============================================================
Section attribute_IeMeshId
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIeMeshIdChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Ipv4Address Ipv4Address Attribute
Attribute implementation for Ipv4Address
  See: ns3::Ipv4Address
===============================================================
Section attribute_Ipv4Address
 ns3::Ipv4AddressValue "ipv4-address.h"
AttributeValue implementation for Ipv4Address.
  See: AttributeValue
===============================================================
Ipv4Address ns3::Ipv4AddressValue::Ipv4AddressValue(const Ipv4Address & value)
Copy constructor.
  Arg: [in] value The Ipv4Address value to copy.
===============================================================
Ipv4Address ns3::Ipv4AddressValue::Get (void) const
  Returns: The Ipv4Address value.
===============================================================
bool ns3::Ipv4AddressValue::GetAccessor (T & value) const
Access the Ipv4Address value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Ipv4Address value, as type  T.
  Returns: true.
===============================================================
void ns3::Ipv4AddressValue::Set (const Ipv4Address & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Ipv4Address ns3::Ipv4AddressValue::m_value
The stored Ipv4Address instance.

===============================================================
Section attribute_Ipv4Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv4Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4AddressAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv4Address

 ns3::Ipv4AddressChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4AddressValue.
  See: AttributeChecker
===============================================================
Section attribute_Ipv4Address
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4AddressChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Ipv4Mask Ipv4Mask Attribute
Attribute implementation for Ipv4Mask
  See: ns3::Ipv4Mask
===============================================================
Section attribute_Ipv4Mask
 ns3::Ipv4MaskValue "ipv4-address.h"
AttributeValue implementation for Ipv4Mask.
  See: AttributeValue
===============================================================
Ipv4Mask ns3::Ipv4MaskValue::Ipv4MaskValue(const Ipv4Mask & value)
Copy constructor.
  Arg: [in] value The Ipv4Mask value to copy.
===============================================================
Ipv4Mask ns3::Ipv4MaskValue::Get (void) const
  Returns: The Ipv4Mask value.
===============================================================
bool ns3::Ipv4MaskValue::GetAccessor (T & value) const
Access the Ipv4Mask value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Ipv4Mask value, as type  T.
  Returns: true.
===============================================================
void ns3::Ipv4MaskValue::Set (const Ipv4Mask & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Ipv4Mask ns3::Ipv4MaskValue::m_value
The stored Ipv4Mask instance.

===============================================================
Section attribute_Ipv4Mask
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv4Mask
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv4MaskAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv4Mask

 ns3::Ipv4MaskChecker "ipv4-address.h"
AttributeChecker implementation for Ipv4MaskValue.
  See: AttributeChecker
===============================================================
Section attribute_Ipv4Mask
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv4MaskChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Ipv6Address Ipv6Address Attribute
Attribute implementation for Ipv6Address
  See: ns3::Ipv6Address
===============================================================
Section attribute_Ipv6Address
 ns3::Ipv6AddressValue "ipv6-address.h"
AttributeValue implementation for Ipv6Address.
  See: AttributeValue
===============================================================
Ipv6Address ns3::Ipv6AddressValue::Ipv6AddressValue(const Ipv6Address & value)
Copy constructor.
  Arg: [in] value The Ipv6Address value to copy.
===============================================================
Ipv6Address ns3::Ipv6AddressValue::Get (void) const
  Returns: The Ipv6Address value.
===============================================================
bool ns3::Ipv6AddressValue::GetAccessor (T & value) const
Access the Ipv6Address value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Ipv6Address value, as type  T.
  Returns: true.
===============================================================
void ns3::Ipv6AddressValue::Set (const Ipv6Address & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Ipv6Address ns3::Ipv6AddressValue::m_value
The stored Ipv6Address instance.

===============================================================
Section attribute_Ipv6Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv6Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6AddressAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv6Address

 ns3::Ipv6AddressChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6AddressValue.
  See: AttributeChecker
===============================================================
Section attribute_Ipv6Address
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6AddressChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Ipv6Prefix Ipv6Prefix Attribute
Attribute implementation for Ipv6Prefix
  See: ns3::Ipv6Prefix
===============================================================
Section attribute_Ipv6Prefix
 ns3::Ipv6PrefixValue "ipv6-address.h"
AttributeValue implementation for Ipv6Prefix.
  See: AttributeValue
===============================================================
Ipv6Prefix ns3::Ipv6PrefixValue::Ipv6PrefixValue(const Ipv6Prefix & value)
Copy constructor.
  Arg: [in] value The Ipv6Prefix value to copy.
===============================================================
Ipv6Prefix ns3::Ipv6PrefixValue::Get (void) const
  Returns: The Ipv6Prefix value.
===============================================================
bool ns3::Ipv6PrefixValue::GetAccessor (T & value) const
Access the Ipv6Prefix value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Ipv6Prefix value, as type  T.
  Returns: true.
===============================================================
void ns3::Ipv6PrefixValue::Set (const Ipv6Prefix & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Ipv6Prefix ns3::Ipv6PrefixValue::m_value
The stored Ipv6Prefix instance.

===============================================================
Section attribute_Ipv6Prefix
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv6Prefix
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIpv6PrefixAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Ipv6Prefix

 ns3::Ipv6PrefixChecker "ipv6-address.h"
AttributeChecker implementation for Ipv6PrefixValue.
  See: AttributeChecker
===============================================================
Section attribute_Ipv6Prefix
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIpv6PrefixChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Mac16Address Mac16Address Attribute
Attribute implementation for Mac16Address
  See: ns3::Mac16Address
===============================================================
Section attribute_Mac16Address
 ns3::Mac16AddressValue "mac16-address.h"
AttributeValue implementation for Mac16Address.
  See: AttributeValue
===============================================================
Mac16Address ns3::Mac16AddressValue::Mac16AddressValue(const Mac16Address & value)
Copy constructor.
  Arg: [in] value The Mac16Address value to copy.
===============================================================
Mac16Address ns3::Mac16AddressValue::Get (void) const
  Returns: The Mac16Address value.
===============================================================
bool ns3::Mac16AddressValue::GetAccessor (T & value) const
Access the Mac16Address value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Mac16Address value, as type  T.
  Returns: true.
===============================================================
void ns3::Mac16AddressValue::Set (const Mac16Address & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Mac16Address ns3::Mac16AddressValue::m_value
The stored Mac16Address instance.

===============================================================
Section attribute_Mac16Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Mac16Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac16AddressAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Mac16Address

 ns3::Mac16AddressChecker "mac16-address.h"
AttributeChecker implementation for Mac16AddressValue.
  See: AttributeChecker
===============================================================
Section attribute_Mac16Address
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac16AddressChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Mac48Address Mac48Address Attribute
Attribute implementation for Mac48Address
  See: ns3::Mac48Address
===============================================================
Section attribute_Mac48Address
 ns3::Mac48AddressValue "mac48-address.h"
AttributeValue implementation for Mac48Address.
  See: AttributeValue
===============================================================
Mac48Address ns3::Mac48AddressValue::Mac48AddressValue(const Mac48Address & value)
Copy constructor.
  Arg: [in] value The Mac48Address value to copy.
===============================================================
Mac48Address ns3::Mac48AddressValue::Get (void) const
  Returns: The Mac48Address value.
===============================================================
bool ns3::Mac48AddressValue::GetAccessor (T & value) const
Access the Mac48Address value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Mac48Address value, as type  T.
  Returns: true.
===============================================================
void ns3::Mac48AddressValue::Set (const Mac48Address & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Mac48Address ns3::Mac48AddressValue::m_value
The stored Mac48Address instance.

===============================================================
Section attribute_Mac48Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Mac48Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac48AddressAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Mac48Address

 ns3::Mac48AddressChecker "mac48-address.h"
AttributeChecker implementation for Mac48AddressValue.
  See: AttributeChecker
===============================================================
Section attribute_Mac48Address
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac48AddressChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Mac64Address Mac64Address Attribute
Attribute implementation for Mac64Address
  See: ns3::Mac64Address
===============================================================
Section attribute_Mac64Address
 ns3::Mac64AddressValue "mac64-address.h"
AttributeValue implementation for Mac64Address.
  See: AttributeValue
===============================================================
Mac64Address ns3::Mac64AddressValue::Mac64AddressValue(const Mac64Address & value)
Copy constructor.
  Arg: [in] value The Mac64Address value to copy.
===============================================================
Mac64Address ns3::Mac64AddressValue::Get (void) const
  Returns: The Mac64Address value.
===============================================================
bool ns3::Mac64AddressValue::GetAccessor (T & value) const
Access the Mac64Address value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Mac64Address value, as type  T.
  Returns: true.
===============================================================
void ns3::Mac64AddressValue::Set (const Mac64Address & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Mac64Address ns3::Mac64AddressValue::m_value
The stored Mac64Address instance.

===============================================================
Section attribute_Mac64Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Mac64Address
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeMac64AddressAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Mac64Address

 ns3::Mac64AddressChecker "mac64-address.h"
AttributeChecker implementation for Mac64AddressValue.
  See: AttributeChecker
===============================================================
Section attribute_Mac64Address
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeMac64AddressChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_ObjectFactory ObjectFactory Attribute
Attribute implementation for ObjectFactory
  See: ns3::ObjectFactory
===============================================================
Section attribute_ObjectFactory
 ns3::ObjectFactoryValue "object-factory.h"
AttributeValue implementation for ObjectFactory.
  See: AttributeValue
===============================================================
ObjectFactory ns3::ObjectFactoryValue::ObjectFactoryValue(const ObjectFactory & value)
Copy constructor.
  Arg: [in] value The ObjectFactory value to copy.
===============================================================
ObjectFactory ns3::ObjectFactoryValue::Get (void) const
  Returns: The ObjectFactory value.
===============================================================
bool ns3::ObjectFactoryValue::GetAccessor (T & value) const
Access the ObjectFactory value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The ObjectFactory value, as type  T.
  Returns: true.
===============================================================
void ns3::ObjectFactoryValue::Set (const ObjectFactory & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: ObjectFactory ns3::ObjectFactoryValue::m_value
The stored ObjectFactory instance.

===============================================================
Section attribute_ObjectFactory
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_ObjectFactory
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectFactoryAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_ObjectFactory

 ns3::ObjectFactoryChecker "object-factory.h"
AttributeChecker implementation for ObjectFactoryValue.
  See: AttributeChecker
===============================================================
Section attribute_ObjectFactory
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectFactoryChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_OrganizationIdentifier OrganizationIdentifier Attribute
Attribute implementation for OrganizationIdentifier
  See: ns3::OrganizationIdentifier
===============================================================
Section attribute_OrganizationIdentifier
 ns3::OrganizationIdentifierValue "vendor-specific-action.h"
AttributeValue implementation for OrganizationIdentifier.
  See: AttributeValue
===============================================================
OrganizationIdentifier ns3::OrganizationIdentifierValue::OrganizationIdentifierValue(const OrganizationIdentifier & value)
Copy constructor.
  Arg: [in] value The OrganizationIdentifier value to copy.
===============================================================
OrganizationIdentifier ns3::OrganizationIdentifierValue::Get (void) const
  Returns: The OrganizationIdentifier value.
===============================================================
bool ns3::OrganizationIdentifierValue::GetAccessor (T & value) const
Access the OrganizationIdentifier value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The OrganizationIdentifier value, as type  T.
  Returns: true.
===============================================================
void ns3::OrganizationIdentifierValue::Set (const OrganizationIdentifier & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: OrganizationIdentifier ns3::OrganizationIdentifierValue::m_value
The stored OrganizationIdentifier instance.

===============================================================
Section attribute_OrganizationIdentifier
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_OrganizationIdentifier
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeOrganizationIdentifierAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_OrganizationIdentifier

 ns3::OrganizationIdentifierChecker "vendor-specific-action.h"
AttributeChecker implementation for OrganizationIdentifierValue.
  See: AttributeChecker
===============================================================
Section attribute_OrganizationIdentifier
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeOrganizationIdentifierChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Rectangle Rectangle Attribute
Attribute implementation for Rectangle
  See: ns3::Rectangle
===============================================================
Section attribute_Rectangle
 ns3::RectangleValue "rectangle.h"
AttributeValue implementation for Rectangle.
  See: AttributeValue
===============================================================
Rectangle ns3::RectangleValue::RectangleValue(const Rectangle & value)
Copy constructor.
  Arg: [in] value The Rectangle value to copy.
===============================================================
Rectangle ns3::RectangleValue::Get (void) const
  Returns: The Rectangle value.
===============================================================
bool ns3::RectangleValue::GetAccessor (T & value) const
Access the Rectangle value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Rectangle value, as type  T.
  Returns: true.
===============================================================
void ns3::RectangleValue::Set (const Rectangle & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Rectangle ns3::RectangleValue::m_value
The stored Rectangle instance.

===============================================================
Section attribute_Rectangle
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Rectangle
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRectangleAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Rectangle

 ns3::RectangleChecker "rectangle.h"
AttributeChecker implementation for RectangleValue.
  See: AttributeChecker
===============================================================
Section attribute_Rectangle
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeRectangleChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Ssid Ssid Attribute
Attribute implementation for Ssid
  See: ns3::Ssid
===============================================================
Section attribute_Ssid
 ns3::SsidValue "ssid.h"
AttributeValue implementation for Ssid.
  See: AttributeValue
===============================================================
Ssid ns3::SsidValue::SsidValue(const Ssid & value)
Copy constructor.
  Arg: [in] value The Ssid value to copy.
===============================================================
Ssid ns3::SsidValue::Get (void) const
  Returns: The Ssid value.
===============================================================
bool ns3::SsidValue::GetAccessor (T & value) const
Access the Ssid value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Ssid value, as type  T.
  Returns: true.
===============================================================
void ns3::SsidValue::Set (const Ssid & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Ssid ns3::SsidValue::m_value
The stored Ssid instance.

===============================================================
Section attribute_Ssid
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Ssid
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeSsidAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Ssid

 ns3::SsidChecker "ssid.h"
AttributeChecker implementation for SsidValue.
  See: AttributeChecker
===============================================================
Section attribute_Ssid
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeSsidChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_TypeId TypeId Attribute
Attribute implementation for TypeId
  See: ns3::TypeId
===============================================================
Section attribute_TypeId
 ns3::TypeIdValue "type-id.h"
AttributeValue implementation for TypeId.
  See: AttributeValue
===============================================================
TypeId ns3::TypeIdValue::TypeIdValue(const TypeId & value)
Copy constructor.
  Arg: [in] value The TypeId value to copy.
===============================================================
TypeId ns3::TypeIdValue::Get (void) const
  Returns: The TypeId value.
===============================================================
bool ns3::TypeIdValue::GetAccessor (T & value) const
Access the TypeId value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The TypeId value, as type  T.
  Returns: true.
===============================================================
void ns3::TypeIdValue::Set (const TypeId & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: TypeId ns3::TypeIdValue::m_value
The stored TypeId instance.

===============================================================
Section attribute_TypeId
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_TypeId
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTypeIdAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_TypeId

 ns3::TypeIdChecker "type-id.h"
AttributeChecker implementation for TypeIdValue.
  See: AttributeChecker
===============================================================
Section attribute_TypeId
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTypeIdChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_UanModesList UanModesList Attribute
Attribute implementation for UanModesList
  See: ns3::UanModesList
===============================================================
Section attribute_UanModesList
 ns3::UanModesListValue "uan-tx-mode.h"
AttributeValue implementation for UanModesList.
  See: AttributeValue
===============================================================
UanModesList ns3::UanModesListValue::UanModesListValue(const UanModesList & value)
Copy constructor.
  Arg: [in] value The UanModesList value to copy.
===============================================================
UanModesList ns3::UanModesListValue::Get (void) const
  Returns: The UanModesList value.
===============================================================
bool ns3::UanModesListValue::GetAccessor (T & value) const
Access the UanModesList value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The UanModesList value, as type  T.
  Returns: true.
===============================================================
void ns3::UanModesListValue::Set (const UanModesList & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: UanModesList ns3::UanModesListValue::m_value
The stored UanModesList instance.

===============================================================
Section attribute_UanModesList
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_UanModesList
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUanModesListAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_UanModesList

 ns3::UanModesListChecker "uan-tx-mode.h"
AttributeChecker implementation for UanModesListValue.
  See: AttributeChecker
===============================================================
Section attribute_UanModesList
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUanModesListChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Vector2D Vector2D Attribute
Attribute implementation for Vector2D
  See: ns3::Vector2D
===============================================================
Section attribute_Vector2D
 ns3::Vector2DValue "vector.h"
AttributeValue implementation for Vector2D.
  See: AttributeValue
===============================================================
Vector2D ns3::Vector2DValue::Vector2DValue(const Vector2D & value)
Copy constructor.
  Arg: [in] value The Vector2D value to copy.
===============================================================
Vector2D ns3::Vector2DValue::Get (void) const
  Returns: The Vector2D value.
===============================================================
bool ns3::Vector2DValue::GetAccessor (T & value) const
Access the Vector2D value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Vector2D value, as type  T.
  Returns: true.
===============================================================
void ns3::Vector2DValue::Set (const Vector2D & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Vector2D ns3::Vector2DValue::m_value
The stored Vector2D instance.

===============================================================
Section attribute_Vector2D
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Vector2D
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector2DAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Vector2D

 ns3::Vector2DChecker "vector.h"
AttributeChecker implementation for Vector2DValue.
  See: AttributeChecker
===============================================================
Section attribute_Vector2D
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector2DChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Vector3D Vector3D Attribute
Attribute implementation for Vector3D
  See: ns3::Vector3D
===============================================================
Section attribute_Vector3D
 ns3::Vector3DValue "vector.h"
AttributeValue implementation for Vector3D.
  See: AttributeValue
===============================================================
Vector3D ns3::Vector3DValue::Vector3DValue(const Vector3D & value)
Copy constructor.
  Arg: [in] value The Vector3D value to copy.
===============================================================
Vector3D ns3::Vector3DValue::Get (void) const
  Returns: The Vector3D value.
===============================================================
bool ns3::Vector3DValue::GetAccessor (T & value) const
Access the Vector3D value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Vector3D value, as type  T.
  Returns: true.
===============================================================
void ns3::Vector3DValue::Set (const Vector3D & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Vector3D ns3::Vector3DValue::m_value
The stored Vector3D instance.

===============================================================
Section attribute_Vector3D
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Vector3D
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVector3DAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Vector3D

 ns3::Vector3DChecker "vector.h"
AttributeChecker implementation for Vector3DValue.
  See: AttributeChecker
===============================================================
Section attribute_Vector3D
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVector3DChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_HeOperation HeOperation Attribute
Attribute implementation for HeOperation
  See: ns3::HeOperation
===============================================================
Section attribute_HeOperation
 ns3::HeOperationValue "he-operation.h"
AttributeValue implementation for HeOperation.
  See: AttributeValue
===============================================================
HeOperation ns3::HeOperationValue::HeOperationValue(const HeOperation & value)
Copy constructor.
  Arg: [in] value The HeOperation value to copy.
===============================================================
HeOperation ns3::HeOperationValue::Get (void) const
  Returns: The HeOperation value.
===============================================================
bool ns3::HeOperationValue::GetAccessor (T & value) const
Access the HeOperation value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The HeOperation value, as type  T.
  Returns: true.
===============================================================
void ns3::HeOperationValue::Set (const HeOperation & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: HeOperation ns3::HeOperationValue::m_value
The stored HeOperation instance.

===============================================================
Section attribute_HeOperation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeOperationAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_HeOperation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHeOperationAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_HeOperation

 ns3::HeOperationChecker "he-operation.h"
AttributeChecker implementation for HeOperationValue.
  See: AttributeChecker
===============================================================
Section attribute_HeOperation
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHeOperationChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_VhtOperation VhtOperation Attribute
Attribute implementation for VhtOperation
  See: ns3::VhtOperation
===============================================================
Section attribute_VhtOperation
 ns3::VhtOperationValue "vht-operation.h"
AttributeValue implementation for VhtOperation.
  See: AttributeValue
===============================================================
VhtOperation ns3::VhtOperationValue::VhtOperationValue(const VhtOperation & value)
Copy constructor.
  Arg: [in] value The VhtOperation value to copy.
===============================================================
VhtOperation ns3::VhtOperationValue::Get (void) const
  Returns: The VhtOperation value.
===============================================================
bool ns3::VhtOperationValue::GetAccessor (T & value) const
Access the VhtOperation value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The VhtOperation value, as type  T.
  Returns: true.
===============================================================
void ns3::VhtOperationValue::Set (const VhtOperation & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: VhtOperation ns3::VhtOperationValue::m_value
The stored VhtOperation instance.

===============================================================
Section attribute_VhtOperation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtOperationAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_VhtOperation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeVhtOperationAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_VhtOperation

 ns3::VhtOperationChecker "vht-operation.h"
AttributeChecker implementation for VhtOperationValue.
  See: AttributeChecker
===============================================================
Section attribute_VhtOperation
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeVhtOperationChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_HtOperation HtOperation Attribute
Attribute implementation for HtOperation
  See: ns3::HtOperation
===============================================================
Section attribute_HtOperation
 ns3::HtOperationValue "ht-operation.h"
AttributeValue implementation for HtOperation.
  See: AttributeValue
===============================================================
HtOperation ns3::HtOperationValue::HtOperationValue(const HtOperation & value)
Copy constructor.
  Arg: [in] value The HtOperation value to copy.
===============================================================
HtOperation ns3::HtOperationValue::Get (void) const
  Returns: The HtOperation value.
===============================================================
bool ns3::HtOperationValue::GetAccessor (T & value) const
Access the HtOperation value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The HtOperation value, as type  T.
  Returns: true.
===============================================================
void ns3::HtOperationValue::Set (const HtOperation & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: HtOperation ns3::HtOperationValue::m_value
The stored HtOperation instance.

===============================================================
Section attribute_HtOperation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtOperationAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_HtOperation
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeHtOperationAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_HtOperation

 ns3::HtOperationChecker "ht-operation.h"
AttributeChecker implementation for HtOperationValue.
  See: AttributeChecker
===============================================================
Section attribute_HtOperation
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeHtOperationChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Waypoint Waypoint Attribute
Attribute implementation for Waypoint
  See: ns3::Waypoint
===============================================================
Section attribute_Waypoint
 ns3::WaypointValue "waypoint.h"
AttributeValue implementation for Waypoint.
  See: AttributeValue
===============================================================
Waypoint ns3::WaypointValue::WaypointValue(const Waypoint & value)
Copy constructor.
  Arg: [in] value The Waypoint value to copy.
===============================================================
Waypoint ns3::WaypointValue::Get (void) const
  Returns: The Waypoint value.
===============================================================
bool ns3::WaypointValue::GetAccessor (T & value) const
Access the Waypoint value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Waypoint value, as type  T.
  Returns: true.
===============================================================
void ns3::WaypointValue::Set (const Waypoint & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Waypoint ns3::WaypointValue::m_value
The stored Waypoint instance.

===============================================================
Section attribute_Waypoint
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Waypoint
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWaypointAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Waypoint

 ns3::WaypointChecker "waypoint.h"
AttributeChecker implementation for WaypointValue.
  See: AttributeChecker
===============================================================
Section attribute_Waypoint
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWaypointChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_WifiMode WifiMode Attribute
Attribute implementation for WifiMode
  See: ns3::WifiMode
===============================================================
Section attribute_WifiMode
 ns3::WifiModeValue "wifi-mode.h"
AttributeValue implementation for WifiMode.
  See: AttributeValue
===============================================================
WifiMode ns3::WifiModeValue::WifiModeValue(const WifiMode & value)
Copy constructor.
  Arg: [in] value The WifiMode value to copy.
===============================================================
WifiMode ns3::WifiModeValue::Get (void) const
  Returns: The WifiMode value.
===============================================================
bool ns3::WifiModeValue::GetAccessor (T & value) const
Access the WifiMode value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The WifiMode value, as type  T.
  Returns: true.
===============================================================
void ns3::WifiModeValue::Set (const WifiMode & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: WifiMode ns3::WifiModeValue::m_value
The stored WifiMode instance.

===============================================================
Section attribute_WifiMode
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_WifiMode
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeWifiModeAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_WifiMode

 ns3::WifiModeChecker "wifi-mode.h"
AttributeChecker implementation for WifiModeValue.
  See: AttributeChecker
===============================================================
Section attribute_WifiMode
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeWifiModeChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Boolean Boolean Attribute
Attribute implementation for Boolean
===============================================================
Section attribute_Boolean
 ns3::BooleanValue "boolean.h"
AttributeValue implementation for Boolean.
  See: AttributeValue
===============================================================
Boolean ns3::BooleanValue::BooleanValue(const Boolean & value)
Copy constructor.
  Arg: [in] value The Boolean value to copy.
===============================================================
Boolean ns3::BooleanValue::Get (void) const
  Returns: The Boolean value.
===============================================================
bool ns3::BooleanValue::GetAccessor (T & value) const
Access the Boolean value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Boolean value, as type  T.
  Returns: true.
===============================================================
void ns3::BooleanValue::Set (const Boolean & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Boolean ns3::BooleanValue::m_value
The stored Boolean instance.

===============================================================
Section attribute_Boolean
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Boolean
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeBooleanAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Boolean

 ns3::BooleanChecker "boolean.h"
AttributeChecker implementation for BooleanValue.
  See: AttributeChecker
===============================================================
Section attribute_Boolean
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeBooleanChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Callback Callback Attribute
Attribute implementation for Callback
  See: ns3::Callback
===============================================================
Section attribute_Callback
 ns3::CallbackValue "callback.h"
AttributeValue implementation for Callback.
  See: AttributeValue
===============================================================
Callback ns3::CallbackValue::CallbackValue(const Callback & value)
Copy constructor.
  Arg: [in] value The Callback value to copy.
===============================================================
Callback ns3::CallbackValue::Get (void) const
  Returns: The Callback value.
===============================================================
bool ns3::CallbackValue::GetAccessor (T & value) const
Access the Callback value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Callback value, as type  T.
  Returns: true.
===============================================================
Variable: Callback ns3::CallbackValue::m_value
The stored Callback instance.

===============================================================
Section attribute_Callback
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Callback
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeCallbackAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Callback

 ns3::CallbackChecker "callback.h"
AttributeChecker implementation for CallbackValue.
  See: AttributeChecker
===============================================================
Section attribute_Callback
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeCallbackChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Double Double Attribute
Attribute implementation for Double
===============================================================
Section attribute_Double
 ns3::DoubleValue "double.h"
AttributeValue implementation for Double.
  See: AttributeValue
===============================================================
Double ns3::DoubleValue::DoubleValue(const double & value)
Copy constructor.
  Arg: [in] value The Double value to copy.
===============================================================
double ns3::DoubleValue::Get (void) const
  Returns: The Double value.
===============================================================
bool ns3::DoubleValue::GetAccessor (T & value) const
Access the Double value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Double value, as type  T.
  Returns: true.
===============================================================
void ns3::DoubleValue::Set (const double & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: double ns3::DoubleValue::m_value
The stored Double instance.

===============================================================
Section attribute_Double
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Double
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeDoubleAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Double

 ns3::DoubleChecker "double.h"
AttributeChecker implementation for DoubleValue.
  See: AttributeChecker
===============================================================
Section attribute_Double
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeDoubleChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Enum Enum Attribute
Attribute implementation for Enum
===============================================================
Section attribute_Enum
 ns3::EnumValue "enum.h"
AttributeValue implementation for Enum.
  See: AttributeValue
===============================================================
Enum ns3::EnumValue::EnumValue(const int & value)
Copy constructor.
  Arg: [in] value The Enum value to copy.
===============================================================
int ns3::EnumValue::Get (void) const
  Returns: The Enum value.
===============================================================
bool ns3::EnumValue::GetAccessor (T & value) const
Access the Enum value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Enum value, as type  T.
  Returns: true.
===============================================================
void ns3::EnumValue::Set (const int & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: int ns3::EnumValue::m_value
The stored Enum instance.

===============================================================
Section attribute_Enum
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Enum
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeEnumAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Enum

 ns3::EnumChecker "enum.h"
AttributeChecker implementation for EnumValue.
  See: AttributeChecker
===============================================================
Section attribute_Enum
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeEnumChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Integer Integer Attribute
Attribute implementation for Integer
===============================================================
Section attribute_Integer
 ns3::IntegerValue "integer.h"
AttributeValue implementation for Integer.
  See: AttributeValue
===============================================================
Integer ns3::IntegerValue::IntegerValue(const int64_t & value)
Copy constructor.
  Arg: [in] value The Integer value to copy.
===============================================================
int64_t ns3::IntegerValue::Get (void) const
  Returns: The Integer value.
===============================================================
bool ns3::IntegerValue::GetAccessor (T & value) const
Access the Integer value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Integer value, as type  T.
  Returns: true.
===============================================================
void ns3::IntegerValue::Set (const int64_t & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: int64_t ns3::IntegerValue::m_value
The stored Integer instance.

===============================================================
Section attribute_Integer
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Integer
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeIntegerAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Integer

 ns3::IntegerChecker "integer.h"
AttributeChecker implementation for IntegerValue.
  See: AttributeChecker
===============================================================
Section attribute_Integer
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeIntegerChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Pointer Pointer Attribute
Attribute implementation for Pointer
===============================================================
Section attribute_Pointer
 ns3::PointerValue "pointer.h"
AttributeValue implementation for Pointer.
  See: AttributeValue
===============================================================
Pointer ns3::PointerValue::PointerValue(const Pointer & value)
Copy constructor.
  Arg: [in] value The Pointer value to copy.
===============================================================
Pointer ns3::PointerValue::Get (void) const
  Returns: The Pointer value.
===============================================================
bool ns3::PointerValue::GetAccessor (T & value) const
Access the Pointer value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Pointer value, as type  T.
  Returns: true.
===============================================================
void ns3::PointerValue::Set (const Pointer & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Pointer ns3::PointerValue::m_value
The stored Pointer instance.

===============================================================
Section attribute_Pointer
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Pointer
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakePointerAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Pointer

 ns3::PointerChecker "pointer.h"
AttributeChecker implementation for PointerValue.
  See: AttributeChecker
===============================================================
Section attribute_Pointer
ns3::Ptr<const ns3::AttributeChecker> ns3::MakePointerChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_RandomVariable RandomVariable Attribute
Attribute implementation for RandomVariable
  See: ns3::RandomVariable
===============================================================
Section attribute_RandomVariable
 ns3::RandomVariableValue "random-variable-stream.h"
AttributeValue implementation for RandomVariable.
  See: AttributeValue
===============================================================
RandomVariable ns3::RandomVariableValue::RandomVariableValue(const RandomVariable & value)
Copy constructor.
  Arg: [in] value The RandomVariable value to copy.
===============================================================
RandomVariable ns3::RandomVariableValue::Get (void) const
  Returns: The RandomVariable value.
===============================================================
bool ns3::RandomVariableValue::GetAccessor (T & value) const
Access the RandomVariable value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The RandomVariable value, as type  T.
  Returns: true.
===============================================================
void ns3::RandomVariableValue::Set (const RandomVariable & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: RandomVariable ns3::RandomVariableValue::m_value
The stored RandomVariable instance.

===============================================================
Section attribute_RandomVariable
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRandomVariableAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_RandomVariable
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeRandomVariableAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_RandomVariable

 ns3::RandomVariableChecker "random-variable-stream.h"
AttributeChecker implementation for RandomVariableValue.
  See: AttributeChecker
===============================================================
Section attribute_RandomVariable
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeRandomVariableChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_String String Attribute
Attribute implementation for String
===============================================================
Section attribute_String
 ns3::StringValue "string.h"
AttributeValue implementation for String.
  See: AttributeValue
===============================================================
String ns3::StringValue::StringValue(const std::string & value)
Copy constructor.
  Arg: [in] value The String value to copy.
===============================================================
std::string ns3::StringValue::Get (void) const
  Returns: The String value.
===============================================================
bool ns3::StringValue::GetAccessor (T & value) const
Access the String value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The String value, as type  T.
  Returns: true.
===============================================================
void ns3::StringValue::Set (const std::string & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: std::string ns3::StringValue::m_value
The stored String instance.

===============================================================
Section attribute_String
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_String
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeStringAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_String

 ns3::StringChecker "string.h"
AttributeChecker implementation for StringValue.
  See: AttributeChecker
===============================================================
Section attribute_String
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeStringChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Time Time Attribute
Attribute implementation for Time
  See: ns3::Time
===============================================================
Section attribute_Time
 ns3::TimeValue "nstime.h"
AttributeValue implementation for Time.
  See: AttributeValue
===============================================================
Time ns3::TimeValue::TimeValue(const Time & value)
Copy constructor.
  Arg: [in] value The Time value to copy.
===============================================================
Time ns3::TimeValue::Get (void) const
  Returns: The Time value.
===============================================================
bool ns3::TimeValue::GetAccessor (T & value) const
Access the Time value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Time value, as type  T.
  Returns: true.
===============================================================
void ns3::TimeValue::Set (const Time & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: Time ns3::TimeValue::m_value
The stored Time instance.

===============================================================
Section attribute_Time
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Time
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeTimeAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Time

 ns3::TimeChecker "nstime.h"
AttributeChecker implementation for TimeValue.
  See: AttributeChecker
===============================================================
Section attribute_Time
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeTimeChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_Uinteger Uinteger Attribute
Attribute implementation for Uinteger
===============================================================
Section attribute_Uinteger
 ns3::UintegerValue "uinteger.h"
AttributeValue implementation for Uinteger.
  See: AttributeValue
===============================================================
Uinteger ns3::UintegerValue::UintegerValue(const uint64_t & value)
Copy constructor.
  Arg: [in] value The Uinteger value to copy.
===============================================================
uint64_t ns3::UintegerValue::Get (void) const
  Returns: The Uinteger value.
===============================================================
bool ns3::UintegerValue::GetAccessor (T & value) const
Access the Uinteger value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The Uinteger value, as type  T.
  Returns: true.
===============================================================
void ns3::UintegerValue::Set (const uint64_t & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: uint64_t ns3::UintegerValue::m_value
The stored Uinteger instance.

===============================================================
Section attribute_Uinteger
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_Uinteger
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeUintegerAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_Uinteger

 ns3::UintegerChecker "uinteger.h"
AttributeChecker implementation for UintegerValue.
  See: AttributeChecker
===============================================================
Section attribute_Uinteger
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeUintegerChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_EmptyAttribute EmptyAttribute Attribute
Attribute implementation for EmptyAttribute
===============================================================
Section attribute_EmptyAttribute
 ns3::EmptyAttributeValue "attribute.h"
AttributeValue implementation for EmptyAttribute.
  See: AttributeValue
===============================================================
EmptyAttribute ns3::EmptyAttributeValue::EmptyAttributeValue(void)
===============================================================
EmptyAttribute ns3::EmptyAttributeValue::Get (void) const
  Returns: The EmptyAttribute value.
===============================================================
bool ns3::EmptyAttributeValue::GetAccessor (T & value) const
Access the EmptyAttribute value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The EmptyAttribute value, as type  T.
  Returns: true.
===============================================================
void ns3::EmptyAttributeValue::Set (const EmptyAttribute & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: EmptyAttribute ns3::EmptyAttributeValue::m_value
The stored EmptyAttribute instance.

===============================================================
Section attribute
Subsection attribute_ObjectPtrContainer ObjectPtrContainer Attribute
Attribute implementation for ObjectPtrContainer
===============================================================
Section attribute_ObjectPtrContainer
 ns3::ObjectPtrContainerValue "object-ptr-container.h"
AttributeValue implementation for ObjectPtrContainer.
  See: AttributeValue
===============================================================
ObjectPtrContainer ns3::ObjectPtrContainerValue::ObjectPtrContainerValue(void)
===============================================================
ObjectPtrContainer ns3::ObjectPtrContainerValue::Get (void) const
  Returns: The ObjectPtrContainer value.
===============================================================
bool ns3::ObjectPtrContainerValue::GetAccessor (T & value) const
Access the ObjectPtrContainer value as type  T.
Template Arg: T [explicit] The type to cast to.
  Arg: [out] value The ObjectPtrContainer value, as type  T.
  Returns: true.
===============================================================
void ns3::ObjectPtrContainerValue::Set (const ObjectPtrContainer & value)
Set the value.
  Arg: [in] value The value to adopt.
===============================================================
Variable: ObjectPtrContainer ns3::ObjectPtrContainerValue::m_value
The stored ObjectPtrContainer instance.

===============================================================
Section attribute_ObjectPtrContainer

 ns3::ObjectPtrContainerChecker "object-ptr-container.h"
AttributeChecker implementation for ObjectPtrContainerValue.
  See: AttributeChecker
===============================================================
Section attribute_ObjectPtrContainer
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectPtrContainerChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_ObjectVector ObjectVector Attribute
Attribute implementation for ObjectVector
===============================================================
Section attribute_ObjectVector
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_ObjectVector
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectVectorAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_ObjectVector

 ns3::ObjectVectorChecker "object-vector.h"
AttributeChecker implementation for ObjectVectorValue.
  See: AttributeChecker
===============================================================
Section attribute_ObjectVector
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectVectorChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
===============================================================
Section attribute
Subsection attribute_ObjectMap ObjectMap Attribute
Attribute implementation for ObjectMap
===============================================================
Section attribute_ObjectMap
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1)
  See: ns3::MakeAccessorHelper(T1)
  See: AttributeAccessor
===============================================================
Section attribute_ObjectMap
ns3::Ptr<const ns3::AttributeAccessor> ns3::MakeObjectMapAccessor (T1 a1, T2 a2)
  See: ns3::MakeAccessorHelper(T1,T2)
  See: AttributeAccessor
===============================================================
Section attribute_ObjectMap

 ns3::ObjectMapChecker "object-map.h"
AttributeChecker implementation for ObjectMapValue.
  See: AttributeChecker
===============================================================
Section attribute_ObjectMap
ns3::Ptr<const ns3::AttributeChecker> ns3::MakeObjectMapChecker (void)
  Returns: The AttributeChecker.
  See: AttributeChecker
